/*
 * ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
 * Copyright 2022 Noelware <team@noelware.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.noelware.charted.configuration.dsl.features

import kotlinx.serialization.SerialName
import kotlin.properties.Delegates

/**
 * Represents the configuration for enabling [Noelware Analytics](https://analytics.noelware.org).
 * @param secretKey The secret key that was generated by the server. This must be hidden as an environment variable.
 * @param port The gRPC server port to use.
 */
@kotlinx.serialization.Serializable
data class NoelwareAnalyticsConfig(
    @SerialName("secret_key")
    val secretKey: String,
    val port: Int = 55412
) {
    class Builder {
        /**
         * The secret key that was generated by the server. This must be hidden as an environment variable.
         */
        var secretKey: String by Delegates.notNull()

        /**
         * The gRPC server port to use.
         */
        var port: Int = 55412

        /**
         * Finds the secret key from the system environment variables.
         * @param key The environment variable that has the secret.
         */
        fun fromEnvironment(key: String? = null): Builder {
            val secret = System.getenv(key ?: "NOELWARE_ANALYTICS_SECRET_KEY")
                ?: throw IllegalStateException("Couldn't find environment variable with key [${key ?: "NOELWARE_ANALYTICS_SECRET_KEY"}]")

            secretKey = secret
            return this
        }

        /**
         * Returns the [NoelwareAnalyticsConfig] object that is used to configure
         * Noelware Analytics.
         */
        fun build(): NoelwareAnalyticsConfig = NoelwareAnalyticsConfig(secretKey, port)
    }
}
