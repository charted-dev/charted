# ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
# Copyright 2022 Noelware <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release a new snapshot version
on:
  release:
    types:
      - prereleased
permissions:
  contents: write
  packages: write
jobs:
  release-snapshot:
    name: Release a new snapshot version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get the current git tag to use
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Setup Java 18
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 18

      - name: Validate gradle-wrapper.jar
        uses: gradle/wrapper-validation-action@v1

      - name: Let gradlew be executable
        run: chmod +x ./gradlew

      - name: Lint the repository via Spotless for linting errors
        run: ./gradlew spotlessCheck --scan

      - name: Compile the Kotlin sources for any compiler errors
        run: ./gradlew compileKotlin --scan

      - name: Compile the Java sources for any compiler errors
        run: ./gradlew compileJava --scan

      - name: Build artifacts for release
        run: ./gradlew :server:distZip :server:distTar

      - name: Upload the tarball to the release
        uses: actions/upload-artifact@v3
        with:
          name: charted-server-x64-${{ steps.tag.outputs.tag }}.tar.gz
          path: ./server/build/distributions/charted-server.tar.gz

      - name: Upload the ZIP file to the release
        uses: actions/upload-artifact@v3
        with:
          name: charted-server-x64-${{ steps.tag.outputs.tag }}.zip
          path: ./server/build/distributions/charted-server.zip

      - name: Upload artifacts to Noelware's download repository
        run: ./gradlew :distributions:archive:publish -Dorg.gradle.s3.endpoint=${{ secrets.S3_ENDPOINT }}
        env:
          NOELWARE_PUBLISHING_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          NOELWARE_PUBLISHING_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          NOELWARE_PUBLISHING_NIGHTLY: "1"

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup Docker layer cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx/cache
          key: ${{ runner.os }}-buildx-cache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-cache-

      - name: Login into ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: charted-dev
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build x86_64 image
        id: docker-build
        run: ./gradlew :distribution:docker:buildLinux64Image
        env:
          CHARTED_DOCKER_CACHE_FROM: type=local,src=/tmp/.buildx/cache
          CHARTED_DOCKER_CACHE_TO: type=local,dest=/tmp/.buildx/cache

      - name: Push images
        run: |
          for image in ${{ steps.docker-build.outputs.images }}; do
            docker push $image
          done
