# üêª‚Äç‚ùÑÔ∏èüì¶ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
# Copyright 2022-2023 Noelware <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Linting and Unit Testing
on:
    workflow_dispatch: {}
    pull_request:
        types: [opened, synchronize]
        branches:
            - 'issue/gh-**'
            - 'feat/**'
            - main

        paths-ignore:
            - 'assets/**'
            - .dockerignore
            - .gitignore
            - '**.md'
            - LICENSE
            - renovate.json
    push:
        branches:
            - 'issue/gh-**'
            - 'feat/**'
            - main

        paths-ignore:
            - '.github/**'
            - '.coder/**'
            - '.vscode/**'
            - 'assets/**'
            - '.*ignore'
            - '**.md'
            - LICENSE
            - renovate.json
jobs:
    spotless:
        name: Spotless [${{matrix.runner}}, Java ${{matrix.java-version}}]
        runs-on: ${{matrix.runner}}
        strategy:
            matrix:
                java-version: [17, 20]
                runner: [windows-latest, ubuntu-latest, macos-latest, self-hosted]
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3
              with:
                  submodules: recursive

            - name: Setup Java ${{matrix.java-version}}
              uses: actions/setup-java@v3
              with:
                  java-version: ${{matrix.java-version}}
                  distribution: temurin
                  architecture: ${{matrix.runner == 'self-hosted' && 'aarch64' || 'amd64'}}

            # Node.js is required for Spotless to install Prettier
            - name: Setup Node.js v19.x
              uses: actions/setup-node@v3
              with:
                  node-version: 19.x
                  architecture: ${{matrix.runner == 'self-hosted' && 'arm64' || 'x64'}}

            # Maven artifact for the `protoc` binary is undeterministic,
            # sometimes it'll be available but other times, it won't be.
            #
            # So, we will use the 'Noelware/setup-protoc' action to do so,
            # and pass in the `CHARTED_PROTOC` environment variable.
            - name: Setup protoc
              uses: Noelware/setup-protoc@1.1.0
              id: protoc
              with:
                  repo-token: ${{secrets.GITHUB_TOKEN}}

            - name: Update GitHub env
              if: ${{ matrix.runner != 'windows-latest' }}
              run: echo "CHARTED_PROTOC_PATH=${{steps.protoc.outputs.binary}}" >> $GITHUB_ENV

            # Needed for Windows since the official Windows runners use PowerShell, obviously...
            # https://stackoverflow.com/questions/64670494/github-action-pass-environment-variable-to-into-action-using-powershell
            - name: Update GitHub env (Windows)
              if: ${{ matrix.runner == 'windows-latest' }}
              run: echo "CHARTED_PROTOC_PATH=${{steps.protoc.outputs.binary}}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

            - name: Setup Gradle
              uses: gradle/gradle-build-action@v2

            - name: Validate Gradle Wrapper
              uses: gradle/wrapper-validation-action@v1

            - name: Lint code-base with Spotless
              uses: gradle/gradle-build-action@v2
              with:
                  arguments: spotlessCheck --scan

            - name: Compiles Kotlin source sets
              uses: gradle/gradle-build-action@v2
              with:
                  arguments: compileKotlin --scan

            - name: Compiles Java source sets
              uses: gradle/gradle-build-action@v2
              with:
                  arguments: compileJava --scan

            - name: Run unit and integration tests
              uses: gradle/gradle-build-action@v2
              with:
                  arguments: test --scan
