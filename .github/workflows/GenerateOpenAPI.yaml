# ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
# Copyright 2022-2023 Noelware <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Generate OpenAPI document
on:
  workflow_dispatch: {}
  push:
    branches:
      - 'issue/gh-**'
      - 'feat/**'
      - nightly
      - main

    paths-ignore:
      - '.github/**'
      - '.husky/**'
      - '.vscode/**'
      - 'assets/**'
      - 'locales/**'
      - 'docker/**'
      - '.dockerignore'
      - '.eslintignore'
      - '.gitignore'
      - '**.md'
      - 'LICENSE'
      - 'renovate.json'
jobs:
  openapi:
    name: Generate OpenAPI document
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Node.js 19
        uses: actions/setup-node@v3
        with:
          node-version: 19.x

      - name: Setup Java 19
        uses: actions/setup-java@v3
        with:
          java-version: 19
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Generate OpenAPI document
        run: chmod +x ./scripts/generate-openapi.sh && ./scripts/generate-openapi.sh

      - name: Run Prettier on ./assets/openapi.json
        run: npx prettier --write ./assets/openapi.json --config .prettierrc.json --print-width 80

      - name: Check if git status is dirty
        id: git_status
        run: |
          if [ -n "$(git status --porcelain)" ]; then
              echo '::set-output name=STATUS_DIRTY::true'
          else
            echo '::set-output name=STATUS_DIRTY::false'
          fi

      - name: Commit changes (if dirty)
        if: contains(steps.git_status.outputs.STATUS_DIRTY, 'true')
        run: |
          git config --global user.name "Noel[bot]"
          git config --global user.email "noelbot@users.noreply.github.com"
          git config --global committer.name "Noel"
          git config --global committer.email "cutie@floofy.dev"

          git add .
          git commit -m "[skip ci] Update OpenAPI document"
          git push -u origin master
