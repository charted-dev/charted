# üêª‚Äç‚ùÑÔ∏èüì¶ charted-server: Free, open source, and reliable Helm Chart registry made in Rust
# Copyright 2022-2023 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI
on:
    workflow_dispatch: {}
    push:
        branches:
            - 'issues/gh-**'
            - 'feat/**'
            - main
        paths-ignore:
            - '.github/**'
            - '.coder/**'
            - '.devcontainer/**'
            - '.vscode/**'
            - 'docs/**'
            - 'scripts/**'
            - '.*ignore'
            - '**.md'
            - renovate.json
            - LICENSE
    pull_request:
        types: [synchronize]
        paths-ignore:
            - '.coder/**'
            - '.devcontainer/**'
            - '.vscode/**'
            - 'docs/**'
            - 'scripts/**'
            - '.*ignore'
            - '**.md'
            - renovate.json
            - LICENSE
env:
    BAZEL_ARGS: --bazelrc=./.bazelrc --bazelrc=./.github/.ci.bazelrc --host_jvm_args=-Xmx500m --host_jvm_args=-Xms500m
jobs:
    ci:
        name: Rust CI (${{matrix.runner == 'ubuntu-latest' && 'Linux (x86_64)' || matrix.runner == 'self-hosted' && 'Linux (arm64)' || matrix.runner == 'macos-latest' && 'macOS (x86_64)' || matrix.runner == 'windows-latest' && 'Windows' || 'Unknown'}})
        runs-on: ${{matrix.runner}}
        strategy:
            fail-fast: true
            matrix:
                runner: [macos-latest, ubuntu-latest, self-hosted]
                include:
                    - runner: ubuntu-latest
                      bazel-cache-dir: ~/.cache/bazel
                      bazelisk-cache-dir: ~/.cache/bazelisk
                    - runner: self-hosted
                      bazel-cache-dir: ~/.cache/bazel
                      bazelisk-cache-dir: ~/.cache/bazelisk
                    - runner: macos-latest
                      bazel-cache-dir: /private/var/tmp/_bazel_runner/
                      bazelisk-cache-dir: ~/Library/Caches/bazelisk

                    # Windows fails with:
                    #
                    #   = note: LINK : fatal error LNK1181: cannot open input file 'bazel-out\x64_windows-opt-exec-2B5CBBC6\bin\external\rules_rust\cargo\cargo_build_script_runner\cargo_build_script_runner.cargo_build_script_runner.f5dd707fc85c7e4-cgu.0.rcgu.o'
                    #
                    # - runner: windows-latest
                    #   bazel-cache-dir: ~\bazel
                    #   bazelisk-cache-dir: ~\AppData\Local\bazelisk
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup Bazel cache
              uses: actions/cache@v3
              with:
                path: |
                    ${{matrix.bazelisk-cache-dir}}
                    ${{matrix.bazel-cache-dir}}
                restore-keys: bazel-cache-${{matrix.runner}}
                key: bazel-cache-${{matrix.runner}}

            # Use the `mold` linker for Linux
            - name: Setup `mold` linker
              uses: rui314/setup-mold@v1
              if: ${{matrix.runner == 'ubuntu-latest' || matrix.runner == 'self-hosted'}}

            - name: Sync dependencies
              run: ./dev sync-deps

            - name: Build CLI
              run: bazel ${BAZEL_ARGS} build //:cli

            - name: Build Helm plugin
              run: bazel ${BAZEL_ARGS} build //:helm-plugin

            - name: Build search indexer
              run: bazel ${BAZEL_ARGS} build //:search-indexer

            - name: Build emails microservice
              run: bazel ${BAZEL_ARGS} build //:emails

            # TODO: include clippy, rustfmt, golangci-lint, and testing ci tailoured
            #       to GitHub Actions.
            - name: Run tests
              run: bazel ${BAZEL_ARGS} test //...
