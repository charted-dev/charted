# ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
# Copyright 2022-2023 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Nightly Release Pipeline
on:
  release:
    types: [prereleased]
permissions:
  contents: write
  packages: write
jobs:
  archives:
    name: Build and publish archive [${{matrix.tasks.prettyName}}]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tasks:
          - { ext: 'tar.gz', task: 'distTar', prettyName: 'Tarball' }
          - { ext: 'zip', task: 'distZip', prettyName: 'Zip' }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get current release tag
        uses: auguwu/git-tag-action@master
        id: tag

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      # Node.js is required for Spotless to run Prettier
      - name: Setup Node.js v19x
        uses: actions/setup-node@v3
        with:
          node-version: 19.x
          architecture: ${{matrix.runner == 'self-hosted' && 'arm64' || 'x64'}}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Lint code-base with Spotless
        uses: gradle/gradle-build-action@v2
        with:
          arguments: spotlessCheck --no-daemon --scan

      - name: Compiles Kotlin source sets
        uses: gradle/gradle-build-action@v2
        with:
          arguments: compileKotlin --no-daemon --scan

      - name: Compiles Java source sets
        uses: gradle/gradle-build-action@v2
        with:
          arguments: compileJava --no-daemon --scan

      - name: Run unit and integration tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test --no-daemon --scan

      - name: Build ${{matrix.tasks.prettyName}} artifact
        uses: gradle/gradle-build-action@v2
        with:
          arguments: :cli:${{matrix.tasks.task}} --no-daemon --scan

      - name: Upload ${{matrix.tasks.prettyName}} artifact to workflow
        uses: actions/upload-artifact@v3
        with:
          name: charted-server.${{matrix.tasks.ext}}
          path: ./cli/build/distributions/charted-server.${{matrix.tasks.ext}}

      - name: Upload artifact to release
        uses: softprops/action-gh-release@v1
        with:
          files: ./cli/build/distributions/charted-server.${{matrix.tasks.ext}}

      - name: Upload artifacts to Noelware's Artifact Registry
        uses: Noelware/s3-action@2.1.0
        with:
          enforce-path-access-style: true
          files: ./cli/build/distributions/charted-server.${{matrix.tasks.ext}}
          path-format: $(prefix)/charted/server/${{steps.tag.outputs.version}}/charted-server.${{matrix.tasks.ext}}
          access-key-id: ${{secrets.S3_ACCESS_KEY}}
          secret-key: ${{secrets.S3_SECRET_KEY}}
          endpoint: ${{secrets.S3_ENDPOINT}}
          region: us-east-1
          prefix: /noelware/artifacts
          bucket: august
  migrations:
    name: Build migration distributions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dist:
          - { goos: windows, goarch: amd64, ext: '.exe' }
          - { goos: windows, goarch: i386, ext: '.exe' }
          - { goos: darwin, goarch: amd64, ext: '' }
          - { goos: darwin, goarch: arm64, ext: '' }
          - { goos: linux, goarch: amd64, ext: '' }
          - { goos: linux, goarch: arm64, ext: '' }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get current release tag
        uses: auguwu/git-tag-action@master
        id: tag

      - name: Setup Go v1.19
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.x

      - name: Build migrations binary
        working-directory: ./databases/clickhouse/migrations
        run: go build -mod=readonly -ldflags "-s -w -X main.version=${{steps.tag.outputs.version}}" -o ./bin/ch-migrations-${{matrix.dist.goos}}-${{matrix.dist.goarch}}${{matrix.dist.ext}}

      - name: Upload artifact to workflow
        uses: actions/upload-artifact@v3
        with:
          name: ch-migrations-${{matrix.dist.goos}}-${{matrix.dist.goarch}}${{matrix.dist.ext}}
          path: ./databases/clickhouse/migrations/bin/ch-migrations-${{matrix.dist.goos}}-${{matrix.dist.goarch}}${{matrix.dist.ext}}

      - name: Upload artifact to release
        uses: softprops/action-gh-release@v1
        with:
          files: ./databases/clickhouse/migrations/bin/ch-migrations-${{matrix.dist.goos}}-${{matrix.dist.goarch}}${{matrix.dist.ext}}

      - name: Upload artifacts to Noelware's Artifact Registry
        uses: Noelware/s3-action@2.1.0
        with:
          enforce-path-access-style: true
          files: ./databases/clickhouse/migrations/bin/ch-migrations-${{matrix.dist.goos}}-${{matrix.dist.goarch}}${{matrix.dist.ext}}
          path-format: $(prefix)/charted/server/${{steps.tag.outputs.version}}/ch-migrations-${{matrix.dist.goos}}-${{matrix.dist.goarch}}${{matrix.dist.ext}}
          access-key-id: ${{secrets.S3_ACCESS_KEY}}
          secret-key: ${{secrets.S3_SECRET_KEY}}
          endpoint: ${{secrets.S3_ENDPOINT}}
          region: us-east-1
          prefix: /noelware/artifacts
          bucket: august
  docker-image:
    name: Build Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Get current release tag
        uses: auguwu/git-tag-action@master
        id: tag

      - name: Get commit hash
        id: commit-hash
        run: echo "::set-output name=commit::$(git rev-parse --short=8 $GITHUB_SHA)"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login into GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: charted-dev
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Build and push Ubuntu images (x86_64)
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: .
          file: ./distribution/docker/ubuntu.Dockerfile
          push: true
          tags: |
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-nightly-amd64,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.version}}-amd64,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}-nightly-amd64,
            ghcr.io/charted-dev/charted:nightly-amd64
          labels: |
            org.opencontainers.image.title=charted-server
            org.opencontainers.image.description=ðŸ“¦ You know, for Helm Charts?
            org.opencontainers.image.version=${{steps.tag.outputs.version}}
            org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://charts.noelware.org/docs/server/${{steps.tag.outputs.version}}
            org.opencontainers.image.source=https://github.com/charted-dev/charted

      - name: Build and push Ubuntu images (aarch64)
        uses: docker/build-push-action@v4
        with:
          platforms: linux/arm64
          context: .
          file: ./distribution/docker/ubuntu/Dockerfile
          push: true
          tags: |
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-nightly-arm64,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.version}}-arm64,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}-nightly-arm64,
            ghcr.io/charted-dev/charted:nightly-arm64
          labels: |
            org.opencontainers.image.title=charted-server
            org.opencontainers.image.description=ðŸ“¦ You know, for Helm Charts?
            org.opencontainers.image.version=${{steps.tag.outputs.version}}
            org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://charts.noelware.org/docs/server/${{steps.tag.outputs.version}}
            org.opencontainers.image.source=https://github.com/charted-dev/charted

      - name: Build and push Alpine images
        uses: docker/build-push-action@v4
        with:
          platforms: linux/amd64
          context: .
          file: ./distribution/docker/alpine/Dockerfile
          push: true
          tags: |
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-nightly-alpine,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.version}}-alpine,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}-nightly-alpine,
            ghcr.io/charted-dev/charted:nightly-alpine
          labels: |
            org.opencontainers.image.title=charted-server
            org.opencontainers.image.description=ðŸ“¦ You know, for Helm Charts?
            org.opencontainers.image.version=${{steps.tag.outputs.version}}
            org.opencontainers.image.revision=${{steps.commit-hash.outputs.commit}}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://charts.noelware.org/docs/server/${{steps.tag.outputs.version}}
            org.opencontainers.image.source=https://github.com/charted-dev/charted

      - name: Combined manifest image (:nightly, Ubuntu)
        uses: Noelware/docker-manifest-action@0.3.1
        with:
          inputs: ghcr.io/charted-dev/charted:nightly
          images: |
            ghcr.io/charted-dev/charted:nightly-amd64,
            ghcr.io/charted-dev/charted:nightly-arm64

      - name: Combined manifest image (:${{steps.tag.outputs.version}}, Ubuntu)
        uses: Noelware/docker-manifest-action@0.3.1
        with:
          inputs: ghcr.io/charted-dev/charted:${{steps.tag.outputs.version}}
          images: |
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.version}}-amd64,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.version}}-arm64

      - name: Combined manifest image (:${{steps.tag.outputs.major}}, Ubuntu)
        uses: Noelware/docker-manifest-action@0.3.1
        with:
          inputs: ghcr.io/charted-dev/charted:nightly
          images: |
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}-nightly-amd64,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}-nightly-arm64

      - name: Combined manifest image (:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}, Ubuntu)
        uses: Noelware/docker-manifest-action@0.3.1
        with:
          inputs: ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-nightly
          images: |
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-nightly-amd64,
            ghcr.io/charted-dev/charted:${{steps.tag.outputs.major}}.${{steps.tag.outputs.minor}}-nightly-arm64
