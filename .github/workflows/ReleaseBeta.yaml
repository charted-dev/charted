# üêª‚Äç‚ùÑÔ∏èüì¶ charted-server: Free, open source, and reliable Helm Chart registry made in Rust
# Copyright 2022-2024 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Release CI (Beta)
on:
    push:
        tags:
            - 'v?[0-9]+.[0-9]+.[0-9]+-beta(\.[0-9]+)?'
jobs:
    binary:
        name: Create binaries (${{matrix.runner}} ${{matrix.target}})
        runs-on: ${{matrix.runner}}
        strategy:
            fail-fast: true
            matrix:
                include:
                    # charted (Linux x86_64 ~ GNU)
                    - runner: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      arch: x86_64
                      ext: ''
                      os: linux

                    # charted (Linux x86_64 ~ Musl)
                    - runner: ubuntu-latest
                      target: x86_64-unknown-linux-musl
                      arch: x86_64
                      ext: ''
                      os: linux

                    # charted (Linux ARM64 ~ GNU)
                    - runner: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      arch: arm64
                      ext: ''
                      os: linux

                    # charted (macOS x86_64 ~ Intel)
                    - runner: macos-latest
                      target: x86_64-apple-darwin
                      arch: x86_64
                      ext: ''
                      os: darwin

                    # charted (macOS ARM64 ~ Apple Silicon)
                    - runner: macos-latest
                      target: aarch64-apple-darwin
                      arch: arm64
                      ext: ''
                      os: darwin

                    # charted (Windows x86_64)
                    - runner: windows-latest
                      target: x86_64-pc-windows-msvc
                      arch: x86_64
                      ext: .exe
                      os: windows
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4

            - name: Get Git tag
              uses: auguwu/git-tag-action@master
              id: tag

            - name: Setup Rust toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                  toolchain: stable
                  components: clippy, rustfmt

            - name: Setup Rust cache
              uses: Swatinem/rust-cache@v2

            - name: Setup `VCPKG_ROOT` environment variable
              if: matrix.runner == 'windows-latest'
              id: vcpkg
              run: |
                  echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
                  echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

            - name: Setup vcpkg cache
              if: matrix.runner == 'windows-latest'
              uses: actions/cache@v4
              with:
                  key: vcpkg-cache
                  path: |
                      ${{steps.vcpkg.outputs.VCPKG_ROOT}}

            - name: Install OpenSSL on Windows with `vcpkg`
              if: matrix.runner == 'windows-latest'
              run: vcpkg install openssl:x64-windows-static-md

            - name: Install `protoc`
              uses: Noelware/setup-protoc@1.2.0
              with:
                  repo-token: ${{github.token}}

            - name: Setup Bun
              uses: oven-sh/setup-bun@v1

            - name: Install NPM packages
              working-directory: ./web
              run: bun install

            - name: Build frontend
              working-directory: ./web
              run: bun run build

            - name: Build binary
              run: cargo build --release --locked --target=${{matrix.target}}
              env:
                  RUSTFLAGS: '--cfg tokio_unstable --cfg bundle_web'

            - name: Create SHA256 checksum (Unix-like)
              if: ${{matrix.runner != 'windows-latest'}}
              run: sha256sum ./target/${{matrix.runner}}/release/charted > ./target/${{matrix.runner}}/release/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256

            - name: Create SHA256 checksum (Windows)
              if: ${{matrix.runner == 'windows-latest'}}
              run: ((Get-FileHash -Path ./target/${{matrix.runner}}/release/charted.exe).Hash).ToLower() | Out-File ./target/${{matrix.runner}}/release/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256

            - name: Upload binary to Noelware's Artifact Registry (/charted/server/${{steps.tag.outputs.tag}}/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}})
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/server/${{steps.tag.outputs.tag}}/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/charted${{matrix.ext}}
                  region: us-east-1
                  bucket: artifacts

            - name: Upload checksum to Noelware's Artifact Registry (/charted/server/${{steps.tag.outputs.tag}}/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256)
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/server/${{steps.tag.outputs.tag}}/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  region: us-east-1
                  bucket: artifacts

            - name: Upload binary to Noelware's Artifact Registry (/charted/server/beta/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}})
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/server/beta/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/charted${{matrix.ext}}
                  region: us-east-1
                  bucket: artifacts

            - name: Upload checksum to Noelware's Artifact Registry (/charted/server/beta/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256)
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/server/beta/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  region: us-east-1
                  bucket: artifacts
    helm-plugin:
        name: Create `charted-helm-plugin` binaries
        runs-on: ${{matrix.runner}}
        strategy:
            fail-fast: true
            matrix:
                include:
                    # charted (Linux x86_64 ~ GNU)
                    - runner: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      arch: x86_64
                      ext: ''
                      os: linux

                    # charted (Linux x86_64 ~ Musl)
                    - runner: ubuntu-latest
                      target: x86_64-unknown-linux-musl
                      arch: x86_64
                      ext: ''
                      os: linux

                    # charted (Linux ARM64 ~ GNU)
                    - runner: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      arch: arm64
                      ext: ''
                      os: linux

                    # charted (macOS x86_64 ~ Intel)
                    - runner: macos-latest
                      target: x86_64-apple-darwin
                      arch: x86_64
                      ext: ''
                      os: darwin

                    # charted (macOS ARM64 ~ Apple Silicon)
                    - runner: macos-latest
                      target: aarch64-apple-darwin
                      arch: arm64
                      ext: ''
                      os: darwin

                    # charted (Windows x86_64)
                    - runner: windows-latest
                      target: x86_64-pc-windows-msvc
                      arch: x86_64
                      ext: .exe
                      os: windows
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4

            - name: Get Git tag
              uses: auguwu/git-tag-action@master
              id: tag

            - name: Setup Rust toolchain
              uses: dtolnay/rust-toolchain@master
              with:
                  toolchain: stable
                  components: clippy, rustfmt

            - name: Setup Rust cache
              uses: Swatinem/rust-cache@v2

            - name: Setup `VCPKG_ROOT` environment variable
              if: matrix.runner == 'windows-latest'
              id: vcpkg
              run: |
                  echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
                  echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

            - name: Setup vcpkg cache
              if: matrix.runner == 'windows-latest'
              uses: actions/cache@v4
              with:
                  key: vcpkg-cache
                  path: |
                      ${{steps.vcpkg.outputs.VCPKG_ROOT}}

            - name: Install OpenSSL on Windows with `vcpkg`
              if: matrix.runner == 'windows-latest'
              run: vcpkg install openssl:x64-windows-static-md

            - name: Install `protoc`
              uses: Noelware/setup-protoc@1.2.0
              with:
                  repo-token: ${{github.token}}

            - name: Build binary
              run: cargo build --release --locked --target=${{matrix.target}} --package=charted-helm-plugin

            - name: Create SHA256 checksum (Unix-like)
              if: ${{matrix.runner != 'windows-latest'}}
              run: sha256sum ./target/${{matrix.runner}}/release/charted-helm-plugin > ./target/${{matrix.runner}}/release/charted-helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256

            - name: Create SHA256 checksum (Windows)
              if: ${{matrix.runner == 'windows-latest'}}
              run: ((Get-FileHash -Path ./target/${{matrix.runner}}/release/charted-helm-plugin.exe).Hash).ToLower() | Out-File ./target/${{matrix.runner}}/release/charted-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256

            - name: Upload binary to Noelware's Artifact Registry (/charted/helm-plugin/${{steps.tag.outputs.tag}}/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}})
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/helm-plugin/${{steps.tag.outputs.tag}}/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/charted-helm-plugin${{matrix.ext}}
                  region: us-east-1
                  bucket: artifacts

            - name: Upload checksum to Noelware's Artifact Registry (/charted/helm-plugin/${{steps.tag.outputs.tag}}/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256)
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/helm-plugin/${{steps.tag.outputs.tag}}/charted-helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/charted-helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  region: us-east-1
                  bucket: artifacts

            - name: Upload binary to Noelware's Artifact Registry (/charted/helm-plugin/beta/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}})
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/helm-plugin/beta/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/helm-plugin${{matrix.ext}}
                  region: us-east-1
                  bucket: artifacts

            - name: Upload checksum to Noelware's Artifact Registry (/charted/helm-plugin/beta/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256)
              uses: Noelware/s3-action@2.2.2
              with:
                  enforce-path-access-style: true
                  access-key-id: ${{secrets.S3_ACCESS_KEY}}
                  secret-key: ${{secrets.S3_SECRET_KEY}}
                  path-format: /charted/helm-plugin/beta/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  endpoint: ${{secrets.S3_ENDPOINT}}
                  files: ./target/${{matrix.runner}}/release/helm-plugin-${{matrix.os}}-${{matrix.arch}}${{matrix.ext}}.sha256
                  region: us-east-1
                  bucket: artifacts
    docker-debian:
        name: Build Docker Image (Debian) [${{matrix.platform}}]
        runs-on: ubuntu-latest
        strategy:
            fail-fast: true
            matrix:
                platform: [linux/amd64, linux/arm64]
    docker-alpine:
        name: Build Docker Image (Debian) [${{matrix.platform}}]
        runs-on: ubuntu-latest
        strategy:
            fail-fast: true
            matrix:
                platform: [linux/amd64, linux/arm64]
    helm-plugin-docker-debian:
        name: Build Docker Image (Debian) [${{matrix.platform}}]
        runs-on: ubuntu-latest
        needs: [helm-plugin]
        strategy:
            fail-fast: true
            matrix:
                platform: [linux/amd64, linux/arm64]
    helm-plugin-docker-alpine:
        name: Build Docker Image (Debian) [${{matrix.platform}}]
        runs-on: ubuntu-latest
        needs: [helm-plugin]
        strategy:
            fail-fast: true
            matrix:
                platform: [linux/amd64, linux/arm64]
