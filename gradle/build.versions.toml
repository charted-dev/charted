# ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
# Copyright 2022 Noelware <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[versions]
apache-commons-validator = "1.7"
exposed-powergamer-tools = "1.1.0"
spring-security-crypto = "5.7.4"
kotlinx-serialization = "1.4.1"
apache-commons-lang3 = "3.12.0"
logback-contrib-json = "0.1.5"
kotlinx-coroutines = "1.6.4"
elasticsearch-rest = "8.4.3"
apache-commons-io = "2.11.0"
meilisearch-rest = "1.0"
kotlinx-datetime = "0.4.0"
logstash-logback = "7.2"
prometheus-java = "0.16.0"
testcontainers = "1.17.5"
mockito-kotlin = "4.0.0"
noel-commons = "2.3.0"
ktor-routing = "0.4-beta"
elastic-apm = "1.34.1"
kubernetes = "16.0.2"
bouncycastle = "1.72"
clickhouse = "0.3.2-test3"
postgresql = "42.5.0"
joptsimple = "5.0.4"
java-mail = "1.5.0-b01"
hikaricp = "5.0.1"
mordant = "2.0.0-beta8"
lettuce = "6.1.10.RELEASE"
jackson = "2.13.4"
mockito = "4.8.1"
exposed = "0.39.2"
logback = "1.4.4"
tegral = "0.0.3"
junit5 = "5.9.1"
janino = "3.1.8"
sentry = "6.6.0"
okhttp = "4.10.0"
slf4j = "2.0.3"
koin = "3.2.2"
kaml = "0.49.0"
haru = "1.3.0"
remi = "0.4.1-beta"
ktor = "2.1.3"
totp = "1.7.1"
otel = "1.19.2-alpha"
jwt = "4.2.1"

[libraries]
# kotlinx libraries
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-jdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlinx-coroutines" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# slf4j libraries
slf4j-over-log4j = { module = "org.slf4j:log4j-over-slf4j", version.ref = "slf4j" }
slf4j-over-jcl = { module = "org.slf4j:jcl-over-slf4j", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }

# exposed libraries
exposed-kotlin-datetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }

# noel utilities
noel-commons-extensions-kotlin = { module = "dev.floofy.commons:extensions-kotlin", version.ref = "noel-commons" }
noel-commons-extensions-koin = { module = "dev.floofy.commons:extensions-koin", version.ref = "noel-commons" }
noel-commons-exposed = { module = "dev.floofy.commons:exposed", version.ref = "noel-commons" }
noel-commons-slf4j = { module = "dev.floofy.commons:slf4j", version.ref = "noel-commons" }

# apache utilities
apache-commons-validator = { module = "commons-validator:commons-validator", version.ref = "apache-commons-validator" }
apache-commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "apache-commons-lang3" }
apache-commons-io = { module = "commons-io:commons-io", version.ref = "apache-commons-io" }

# remi libraries
remi-support-minio = { module = "org.noelware.remi:remi-support-minio", version.ref = "remi" }
remi-support-s3 = { module = "org.noelware.remi:remi-support-s3", version.ref = "remi" }
remi-support-fs = { module = "org.noelware.remi:remi-support-fs", version.ref = "remi" }
remi-core = { module = "org.noelware.remi:remi-core", version.ref = "remi" }

# sentry libraries
sentry-kotlin-extensions = { module = "io.sentry:sentry-kotlin-extensions", version.ref = "sentry" }
sentry-logback = { module = "io.sentry:sentry-logback", version.ref = "sentry" }
sentry = { module = "io.sentry:sentry", version.ref = "sentry" }

# ktor server and client libraries
ktor-client-content-negotitation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-auto-head-response = { module = "io.ktor:ktor-server-auto-head-response", version.ref = "ktor" }
ktor-server-default-headers = { module = "io.ktor:ktor-server-default-headers", version.ref = "ktor" }
ktor-server-double-receive = { module = "io.ktor:ktor-server-double-receive", version.ref = "ktor" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-websockets = { module = "io.ktor:ktor-server-websockets", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-client-logging = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-serialization = { module = "io.ktor:ktor-serialization", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }

# logback libraries
logback-logstash = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }

# testcontainers
testcontainers-elasticsearch = { module = "org.testcontainers:elasticsearch", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
testcontainers-cassandra = { module = "org.testcontainers:cassandra", version.ref = "testcontainers" }
testcontainers-core = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-k3s = { module = "org.testcontainers:k3s", version.ref = "testcontainers" }

# noelware's ktor routing
noelware-ktor-routing-loaders-koin = { module = "org.noelware.ktor:ktor-routing-loader-koin", version.ref = "ktor-routing" }
noelware-ktor-routing-core = { module = "org.noelware.ktor:ktor-routing-core", version.ref = "ktor-routing" }

# mockito
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockito-kotlin" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }

# elasticsearch
elasticsearch-rest-client-sniffer = { module = "org.elasticsearch.client:elasticsearch-rest-client-sniffer", version.ref = "elasticsearch-rest" }
elasticsearch-rest-client = { module = "org.elasticsearch.client:elasticsearch-rest-client", version.ref = "elasticsearch-rest" }
elasticsearch-java-client = { module = "co.elastic.clients:elasticsearch-java", version.ref = "elasticsearch-rest" }

# elastic apm
elastic-apm-agent-plugin-sdk = { module = "co.elastic.apm:apm-agent-plugin-sdk", version.ref = "elastic-apm" }
elastic-apm-agent-attach = { module = "co.elastic.apm:apm-agent-attach", version.ref = "elastic-apm" }
elastic-apm-agent-api = { module = "co.elastic.apm:apm-agent-api", version.ref = "elastic-apm" }

# prometheus
prometheus-simpleclient-hotspot = { module = "io.prometheus:simpleclient_hotspot", version.ref = "prometheus-java" }
prometheus-simpleclient-common = { module = "io.prometheus:simpleclient_common", version.ref = "prometheus-java" }
prometheus-simpleclient = { module = "io.prometheus:simpleclient", version.ref = "prometheus-java" }

# jackson libraries
jackson-kotlin-module = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }

# junit
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit5" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit5" }

# clickhouse
clickhouse-jdbc = { module = "com.clickhouse:clickhouse-jdbc", version.ref = "clickhouse" }

# opentelemetry
opentelemetry-annotations = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations", version.ref = "otel" }

# external libraries
spring-security-crypto = { module = "org.springframework.security:spring-security-crypto", version.ref = "spring-security-crypto" }
exposed-powergamer-tools = { module = "net.perfectdreams.exposedpowerutils:postgres-power-utils", version.ref = "exposed-powergamer-tools" }
meilisearch-rest-client = { module = "dev.floofy.meilisearch:rest-client", version.ref = "meilisearch-rest" }
kubernetes-client = { module = "io.kubernetes:client-java", version.ref = "kubernetes" }
tegral-openapi = { module = "guru.zoroark.tegral:tegral-openapi-dsl", version.ref = "tegral" }
bouncycastle = { module = "org.bouncycastle:bcpkix-jdk15to18", version.ref = "bouncycastle" }
joptsimple = { module = "net.sf.jopt-simple:jopt-simple", version.ref = "joptsimple" }
javax-mail = { module = "javax.mail:mail", version.ref = "java-mail" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }
lettuce = { module = "io.lettuce:lettuce-core", version.ref = "lettuce" }
mordant = { module = "com.github.ajalt.mordant:mordant", version.ref = "mordant" }
janino = { module = "org.codehaus.janino:janino", version.ref = "janino" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
kaml = { module = "com.charleskorn.kaml:kaml", version.ref = "kaml" }
haru = { module = "dev.floofy.haru:Haru", version.ref = "haru" }
totp = { module = "dev.samstevens.totp:totp", version.ref = "totp" }
jwt = { module = "com.auth0:java-jwt", version.ref = "jwt" }
