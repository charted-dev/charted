# üêª‚Äç‚ùÑÔ∏èüì¶ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
# Copyright 2022-2023 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[versions]
otel-instrumentation-alpha = "1.26.0-alpha" # why does opentelemetry have inconsistent versions WAAAAAA
apache-commons-validator = "1.7"
exposed-powergamer-tools = "1.2.1"
apache-commons-compress = "1.23.0"
tomcat-annotations-api = "6.0.53"
spring-security-crypto = "6.1.1"
kotlinx-serialization = "1.5.1"
otel-instrumentation = "1.27.0"
apache-commons-lang3 = "3.12.0"
elasticsearch-rest = "8.8.1"
kotlinx-coroutines = "1.7.1"
kotlinx-atomicfu = "0.21.0"
kotlinx-datetime = "0.4.0"
logstash-logback = "7.4"
prometheus-java = "0.16.0"
testcontainers = "1.18.3"
jb-annotations = "24.0.1"
analytics-jvm = "0.1.4-beta"
swagger-core = "2.2.14"
unbound-ldap = "6.0.9"
system-stubs = "2.0.2"
bouncycastle = "1.75"
noel-commons = "2.5.1"
elastic-apm = "1.39.0"
grpc-kotlin = "1.3.0"
postgresql = "42.6.0"
snowflake = "0.1-beta"
protobuf = "3.23.3"
caffeine = "3.1.6"
hikaricp = "5.0.1"
jackson = "2.15.2"
assertj = "3.24.2"
mordant = "2.0.0-beta14"
lettuce = "6.2.4.RELEASE"
logback = "1.4.8"
exposed = "0.41.1"
junit5 = "5.9.3"
janino = "3.1.9"
picnic = "0.6.0"
sentry = "6.24.0"
clikt = "3.5.4"
semver = "1.4.2"
slf4j = "2.0.7"
grpc = "1.56.0"
otel = "1.27.0"
remi = "0.5.4-beta"
kaml = "0.54.0"
koin = "3.4.2"
ktor = "2.3.1"
jwt = "4.4.0"

[libraries]
# kotlinx libraries
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-serialization" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinx-serialization" }
kotlinx-coroutines-debug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-jdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlinx-coroutines" }
kotlinx-atomicfu-jvm = { module = "org.jetbrains.kotlinx:atomicfu-jvm", version.ref = "kotlinx-atomicfu" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinx-datetime" }

# slf4j libraries
slf4j-over-log4j = { module = "org.slf4j:log4j-over-slf4j", version.ref = "slf4j" }
slf4j-over-jcl = { module = "org.slf4j:jcl-over-slf4j", version.ref = "slf4j" }
slf4j-from-jul = { module = "org.slf4j:jul-to-slf4j", version.ref = "slf4j" }
slf4j-simple = { module = "org.slf4j:slf4j-simple", version.ref = "slf4j" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }

# noel utilities
noel-commons-extensions-kotlin = { module = "dev.floofy.commons:extensions-kotlin", version.ref = "noel-commons" }
noel-commons-extensions-koin = { module = "dev.floofy.commons:extensions-koin", version.ref = "noel-commons" }
noel-commons-java-utils = { module = "dev.floofy.commons:java-utils", version.ref = "noel-commons" }
noel-commons-slf4j = { module = "dev.floofy.commons:slf4j", version.ref = "noel-commons" }

# apache utilities
apache-commons-validator = { module = "commons-validator:commons-validator", version.ref = "apache-commons-validator" }
apache-commons-compress = { module = "org.apache.commons:commons-compress", version.ref = "apache-commons-compress" }
apache-commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "apache-commons-lang3" }

# remi libraries
remi-storage-azure = { module = "org.noelware.remi:remi-storage-azure", version.ref = "remi" }
remi-storage-gcs = { module = "org.noelware.remi:remi-storage-gcs", version.ref = "remi" }
remi-storage-s3 = { module = "org.noelware.remi:remi-storage-s3", version.ref = "remi" }
remi-storage-fs = { module = "org.noelware.remi:remi-storage-fs", version.ref = "remi" }
remi-core = { module = "org.noelware.remi:remi-core", version.ref = "remi" }

# exposed libraries
exposed-kotlin-datetime = { module = "org.jetbrains.exposed:exposed-kotlin-datetime", version.ref = "exposed" }
exposed-jdbc = { module = "org.jetbrains.exposed:exposed-jdbc", version.ref = "exposed" }
exposed-core = { module = "org.jetbrains.exposed:exposed-core", version.ref = "exposed" }
exposed-dao = { module = "org.jetbrains.exposed:exposed-dao", version.ref = "exposed" }

# ktor server and client libraries
ktor-client-content-negotitation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-auto-head-response = { module = "io.ktor:ktor-server-auto-head-response", version.ref = "ktor" }
ktor-server-default-headers = { module = "io.ktor:ktor-server-default-headers", version.ref = "ktor" }
ktor-server-caching-headers = { module = "io.ktor:ktor-server-caching-headers", version.ref = "ktor" }
ktor-server-double-receive = { module = "io.ktor:ktor-server-double-receive", version.ref = "ktor" }
ktor-server-ratelimiting = { module = "io.ktor:ktor-server-rate-limit", version.ref = "ktor" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-test-host = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
ktor-serialization = { module = "io.ktor:ktor-serialization", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-client-java = { module = "io.ktor:ktor-client-java", version.ref = "ktor" }
ktor-server-cors = { module = "io.ktor:ktor-server-cors", version.ref = "ktor" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }

# sentry libraries
sentry-kotlin-extensions = { module = "io.sentry:sentry-kotlin-extensions", version.ref = "sentry" }
sentry-logback = { module = "io.sentry:sentry-logback", version.ref = "sentry" }
sentry = { module = "io.sentry:sentry", version.ref = "sentry" }

# logback libraries
logback-logstash = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-logback" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }

# noelware analytics
noelware-analytics-server-kotlin-support = { module = "org.noelware.analytics:analytics-kotlin-support-server", version.ref = "analytics-jvm" }
noelware-analytics-server = { module = "org.noelware.analytics:analytics-server", version.ref = "analytics-jvm" }

# protobuf
protobuf-kotlin = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "protobuf" }
protobuf-java = { module = "com.google.protobuf:protobuf-kotlin", version.ref = "protobuf" }

# grpc
grpc-netty-shaded = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
grpc-kotlin-stub = { module = "io.grpc:grpc-kotlin-stub", version.ref = "grpc-kotlin" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-services = { module = "io.grpc:grpc-services", version.ref = "grpc" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }

# testcontainers
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-core = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-k3s = { module = "org.testcontainers:k3s", version.ref = "testcontainers" }

# junit
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit5" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit5" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit5" }

# elasticsearch
elasticsearch-rest-client-sniffer = { module = "org.elasticsearch.client:elasticsearch-rest-client-sniffer", version.ref = "elasticsearch-rest" }
elasticsearch-rest-client = { module = "org.elasticsearch.client:elasticsearch-rest-client", version.ref = "elasticsearch-rest" }
elasticsearch-java-client = { module = "co.elastic.clients:elasticsearch-java", version.ref = "elasticsearch-rest" }

# prometheus
prometheus-simpleclient-hotspot = { module = "io.prometheus:simpleclient_hotspot", version.ref = "prometheus-java" }
prometheus-simpleclient-common = { module = "io.prometheus:simpleclient_common", version.ref = "prometheus-java" }
prometheus-simpleclient = { module = "io.prometheus:simpleclient", version.ref = "prometheus-java" }

# jackson libraries
jackson-kotlin-module = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-format-yaml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }

# swagger
swagger-core-models = { module = "io.swagger.core.v3:swagger-models", version.ref = "swagger-core" }
swagger-annotations = { module = "io.swagger.core.v3:swagger-annotations", version.ref = "swagger-core" }
swagger-core = { module = "io.swagger.core.v3:swagger-core", version.ref = "swagger-core" }

# system stubs
system-stubs-jupiter = { module = "uk.org.webcompere:system-stubs-jupiter", version.ref = "system-stubs" }
system-stubs-core = { module = "uk.org.webcompere:system-stubs-core", version.ref = "system-stubs" }

# elastic apm
elastic-apm-agent-attach = { module = "co.elastic.apm:apm-agent-attach", version.ref = "elastic-apm" }
elastic-apm-agent-api = { module = "co.elastic.apm:apm-agent-api", version.ref = "elastic-apm" }

# opentelemetry
opentelemetry-exporter-otlp = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "otel" }
opentelemetry-logback-mdc = { module = "io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0", version.ref = "otel-instrumentation-alpha" }
opentelemetry-annotations = { module = "io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations", version.ref = "otel-instrumentation" }
opentelemetry-javaagent = { module = "io.opentelemetry.javaagent:opentelemetry-javaagent", version.ref = "otel-instrumentation" }
opentelemetry-api = { module = "io.opentelemetry:opentelemetry-api", version.ref = "otel" }
opentelemetry-sdk = { module = "io.opentelemetry:opentelemetry-sdk", version.ref = "otel" }

# external libraries
exposed-powergamer-tools = { module = "net.perfectdreams.exposedpowerutils:postgres-power-utils", version.ref = "exposed-powergamer-tools" }
spring-security-crypto = { module = "org.springframework.security:spring-security-crypto", version.ref = "spring-security-crypto" }
tomcat-annotations-api = { module = "org.apache.tomcat:annotations-api", version.ref = "tomcat-annotations-api" }
jetbrains-annotations = { module = "org.jetbrains:annotations", version.ref = "jb-annotations" }
unbound-ldap-sdk = { module = "com.unboundid:unboundid-ldapsdk", version.ref = "unbound-ldap" }
bouncycastle = { module = "org.bouncycastle:bcpkix-jdk15to18", version.ref = "bouncycastle" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
snowflake = { module = "org.noelware.charted.snowflake:snowflake", version.ref = "snowflake" }
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }
mordant = { module = "com.github.ajalt.mordant:mordant", version.ref = "mordant" }
lettuce = { module = "io.lettuce:lettuce-core", version.ref = "lettuce" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
picnic = { module = "com.jakewharton.picnic:picnic", version.ref = "picnic" }
janino = { module = "org.codehaus.janino:janino", version.ref = "janino" }
semver = { module = "io.github.z4kn4fein:semver", version.ref = "semver" }
clikt = { module = "com.github.ajalt.clikt:clikt", version.ref = "clikt" }
koin = { module = "io.insert-koin:koin-core", version.ref = "koin" }
kaml = { module = "com.charleskorn.kaml:kaml", version.ref = "kaml" }
jwt = { module = "com.auth0:java-jwt", version.ref = "jwt" }
