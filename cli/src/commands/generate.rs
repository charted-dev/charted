// ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
// Copyright 2022 Noelware <team@noelware.org>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use std::{fmt::Write as _, fs::File, io::Write as _, path::PathBuf};

use clap::Parser;
use rand::Rng;

use super::Execute;

#[derive(Debug, Parser)]
#[clap(about = "Generates a configuraton file in a given path")]
pub struct Generate {
    #[clap(help = "The destination file to generate in.")]
    dest: PathBuf,
}

impl Execute for Generate {
    fn execute(self) -> anyhow::Result<()> {
        let dest = self.dest;
        info!("generating configuration in {}", dest.display());

        if dest.exists() {
            // TODO(noel): display prompt for this
            // TODO(noel): allow overridding by prompt
            warn!("path {} already exists!", dest.display());
            return Ok(());
        }

        if dest.is_dir() {
            warn!("path {} is a directory, skipping...", dest.display());
            return Ok(());
        }

        // This isn't probably the best way to do this, so, we might
        // have to check this before we reach a beta stage.
        let bytes = rand::thread_rng().gen::<[u8; 32]>();
        let mut hex = String::with_capacity(2 * bytes.len());
        for byte in bytes {
            write!(hex, "{:02x}", byte)?;
        }

        let mut file = File::create(dest.clone())?;
        let generated_config = format!(
            r#"# This configuration file was generated by the 'charted generate' command by you.

# If this ever changes, then all sessions will be un-usuable and you will
# have to delete all sessions from the Redis database.
secret_key_base: {}
metrics: true
storage:
    filesystem:
        directory: /var/lib/noelware/charted/data
"#,
            hex
        );

        write!(&mut file, "{}", generated_config)?;
        info!("wrote default configuration in {}!", dest.display());

        Ok(())
    }
}
