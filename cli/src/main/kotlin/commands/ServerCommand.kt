/*
 * ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
 * Copyright 2022-2023 Noelware <team@noelware.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.noelware.charted.cli.commands

import com.github.ajalt.clikt.core.CliktCommand
import com.github.ajalt.clikt.parameters.options.option
import com.github.ajalt.clikt.parameters.types.file
import com.github.ajalt.mordant.rendering.TextAlign
import com.github.ajalt.mordant.rendering.TextColors.*
import com.github.ajalt.mordant.rendering.TextColors.Companion.rgb
import com.github.ajalt.mordant.rendering.TextStyles
import com.github.ajalt.mordant.terminal.Terminal
import kotlinx.coroutines.runBlocking
import org.noelware.charted.ChartedInfo
import org.noelware.charted.RandomStringGenerator
import org.noelware.charted.cli.logger
import org.noelware.charted.server.Bootstrap
import java.io.File

class ServerCommand(private val terminal: Terminal): CliktCommand(
    "Bootstrap and starts the server in the same process",
    name = "server",
    invokeWithoutSubcommand = true
) {
    private val logbackPath: File? by option(
        "--logback-config", "-lc",
        help = "Configuration file for customizing charted-server's logging system",
        envvar = "CHARTED_LOGBACK_CONFIG_PATH"
    ).file(
        mustExist = true,
        canBeFile = true,
        canBeDir = false,
        mustBeWritable = true,
        mustBeReadable = true,
        canBeSymlink = true
    )

    private val config: File? by option(
        "--config", "-c",
        help = "The configuration path to use",
        envvar = "CHARTED_CONFIG_PATH"
    ).file(
        mustExist = false,
        canBeFile = true,
        canBeDir = false,
        mustBeWritable = true,
        mustBeReadable = true,
        canBeSymlink = true
    )

    override fun run() {
        val bannerColour = TextStyles.bold + rgb("#d4abd8")
        terminal.println(gray("+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+"), align = TextAlign.CENTER)
        terminal.println(gray("+       ${bannerColour("_")}                ${bannerColour("_")}           ${bannerColour("_")}                                      +"), align = TextAlign.CENTER)
        terminal.println(gray("+    ${bannerColour("___| |__   __ _ _ __| |_ ___  __| |      ___  ___ _ ____   _____ _ __")}  +"), align = TextAlign.CENTER)
        terminal.println(gray("+   ${bannerColour("/ __| '_ \\ / _` | '__| __/ _ \\/ _` |_____/ __|/ _ \\ '__\\ \\ / / _ \\ '__|")} +"), align = TextAlign.CENTER)
        terminal.println(gray("+  ${bannerColour("| (__| | | | (_| | |  | ||  __/ (_| |_____\\__ \\  __/ |   \\ V /  __/ |")}    +"), align = TextAlign.CENTER)
        terminal.println(gray("+   ${bannerColour("\\___|_| |_|\\__,_|_|   \\__\\___|\\__,_|     |___/\\___|_|    \\_/ \\___|_|")}    +"), align = TextAlign.CENTER)
        terminal.println(gray("+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+"), align = TextAlign.CENTER)
        terminal.println("")

        if (logbackPath != null && logbackPath!!.exists()) {
            System.getProperty("-Dorg.noelware.charted.logback.config", logbackPath.toString())
        }

        val configPath = if (config != null) {
            config!!
        } else {
            File("./config.yml")
        }

        if (!configPath.exists()) {
            terminal.logger.warn("Configuration file at [$configPath] doesn't exist! Creating...")
            configPath.writeText(
                """
                |# This configuration file was generated by `charted server`
                |# Read more on what to configure: https://charts.noelware.org/docs/server/${ChartedInfo.version}/self-hosting/configuration
                |
                |jwt_secret_key: $\{JWT_SECRET_KEY:-${RandomStringGenerator.generate(64)}}
                """.trimMargin("|")
            )
        }

        runBlocking {
            Bootstrap.start(configPath)
        }
    }
}
