#!/usr/bin/env bash

# 🐻‍❄️📦 charted-server: Free, open source, and reliable Helm Chart registry made in Rust
# Copyright 2022-2025 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eu

if [ -n "${CHARTED_HELM_NO_INSTALL_HOOK:-}" ]; then
    echo "===> In development mode, not downloading!"
    exit 0
fi

function charted::helm::os {
    case "$(uname -s)" in
        Darwin)
            echo "darwin"
            ;;

        Linux)
            echo "linux"
            ;;

        *)
            echo "Unsupported operating system: \`$(uname -s)\`" >&2
            exit 1
            ;;
    esac
}

function charted::helm::architecture {
    case "$(uname -m)" in
        x86_64|amd64)
            echo "x86_64"
            ;;

        aarch64|arm64)
            echo "arm64"
            ;;

        *)
            echo "Unsupported architecture: \`$(uname -m)\`" >&2
            exit 1
            ;;
    esac
}

function charted::helm::binary_url {
    local version="$1"

    arch=$(charted::helm::architecture)
    os=$(charted::helm::os)

    echo "https://artifacts.noelware.org/charted/helm-plugin/$version/helm-plugin-$os-$arch"
}

function charted::helm::checksum_url {
    local version="$1"

    arch=$(charted::helm::architecture)
    os=$(charted::helm::os)

    echo "https://artifacts.noelware.org/charted/helm-plugin/$version/helm-plugin-$os-$arch.sha256"
}

function charted::helm::download {
    local url="$1"
    local loc="$2"

    if command -v curl >/dev/null; then
        curl -sSL "$url" -o "$loc"
    elif command -v wget >/dev/null; then
        wget -q "$1" -O "$2"
    else
        echo "~> FATAL: Failed to download \`charted-helm-plugin\` as \`curl\` or \`wget\` was not found on the system" >/dev/stderr
    fi
}

function charted::helm::fetch {
    local url="$1"

    if command -v curl >/dev/null; then
        curl -fsSL "$url"
    elif command -v wget >/dev/null; then
        wget -q -S -O - "$url" 2>&1
    else
        echo "~> FATAL: missing either \`wget\` or \`curl\`" >/dev/stderr
    fi
}

function charted::helm::semver::compare {
    [ "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
}

function charted::helm::update {
    version=$(grep "version" $HELM_PLUGIN_DIR/plugin.yaml | cut -d "'" -f2)
    latest_version=$(charted::helm::fetch "https://artifacts.noelware.org/charted/helm-plugin/versions.json" | jq '.latest.version')

    if charted::helm::semver::compare "$version" "$latest_version"; then
        echo "==> \`charted-helm-plugin\` is already up to date."
        exit 0
    fi

    charted::helm::install
}

function charted::helm::delete {
    echo "==> Deleting resources..."

    rm -rf "$HELM_PLUGIN_DIR/bin"
    echo "==> Done"
}

function charted::helm::install {
    version=$(grep "version" $HELM_PLUGIN_DIR/plugin.yaml | cut -d "'" -f2)

    echo "Attempting to download \`charted-helm-plugin\` v$version"
    binary_url=$(charted::helm::binary_url "$version")
    checksums_url=$(charted::helm::checksum_url "$version")

    echo "~> Downloading binary \`charted-helm-plugin\` from source: $binary_url"
    charted::helm::download "$binary_url" bin/charted-helm-plugin

    echo "~> Downloading checksum for \`charted-helm-plugin\` from source: $checksums_url"
    charted::helm::download "$checksums_url" bin/charted-helm-plugin

    if command -v sha256sum >/dev/null; then
        checksum=$(sha256sum "$HELM_PLUGIN_DIR/bin/charted-helm-plugin" | awk '{print $1}')
        if ! grep -q "$checksum" bin/charted-helm-plugin.sha256; then
            echo "...failed to verify checksum:"
            echo "-----------------------------"
            echo "generated:"
            echo "$checksum"
            echo "-----------------------------"
            echo "from artifacts registry:"
            cat "$HELM_PLUGIN_DIR/bin/charted-helm-plugin.sha256" 2>/dev/null

            rm -rf "$HELM_PLUGIN_DIR/bin" || true

            exit 1
        fi

        rm "$HELM_PLUGIN_DIR/bin/charted-helm-plugin.sha256"

        echo "Completed! \`helm charted\` is now avaliable on the system."
        exit 0
    fi

    if [ "$(charted::helm::os)" == "darwin" ]; then
        checksum=$(shasum -a 256 bin/charted-helm-plugin | awk '{print $1}')
        if ! grep -q "$checksum" bin/charted-helm-plugin.sha256; then
            echo "...failed to verify checksum:"
            echo "-----------------------------"
            echo "generated:"
            echo "$checksum"
            echo "-----------------------------"
            echo "from artifacts registry:"
            cat "$HELM_PLUGIN_DIR/bin/charted-helm-plugin.sha256" 2>/dev/null

            rm -rf "$HELM_PLUGIN_DIR/bin" || true

            exit 1
        fi

        rm "$HELM_PLUGIN_DIR/bin/charted-helm-plugin.sha256"

        echo "Completed! \`helm charted\` is now avaliable on the system."
        exit 0
    fi
}

case $1 in
    install|update|delete)
        "charted::helm::$1" "$@"
        ;;

    *)
        echo "unknown action: $1"
        ;;
esac
