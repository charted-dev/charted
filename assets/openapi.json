{
    "openapi": "3.0.1",
    "info": {
        "title": "charted-server",
        "description": "üêª‚Äç‚ùÑÔ∏èüì¶ Free, open source, and reliable Helm Chart registry made in Kotlin",
        "termsOfService": "https://charts.noelware.org/legal/tos",
        "contact": {
            "name": "Noelware, LLC.",
            "url": "https://noelware.org",
            "email": "team@noelware.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "v0.4.0-unstable.4"
    },
    "externalDocs": {
        "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4"
    },
    "servers": [
        {
            "url": "https://charts.noelware.org/api",
            "description": "Official Instance"
        }
    ],
    "paths": {
        "/_openapi": {
            "description": "Endpoint for the OpenAPI specification for charted-server",
            "get": {
                "description": "Gets the document in JSON format or YAML format",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/_openapi"
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Format to use",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pretty",
                        "in": "query",
                        "description": "If the document should be pretty or not, this is only applicable to the JSON format",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/_swagger": {
            "description": "Endpoint for Swagger UI",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/_swagger"
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/users"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkMainUserResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Welcome to the Users API!",
                                        "docs_url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/users"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "REST controller to create a new user into this instance. This can fail if the server is invite-only or if registrations are disabled.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/PUT-/users"
                },
                "responses": {
                    "201": {
                        "description": "User resource was successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the session manager configured for this server is local, then this will indicate a password was not available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the server doesn't allow new users to be created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the current authenticated user. This will destroy all metadata (repositories, organizations), search indexing (if enabled), and all Helm charts that are published.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/DELETE-/users"
                },
                "responses": {
                    "202": {
                        "description": "Session token was deleted from the server, and can't be validated again",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/features": {
            "description": "REST controller to describe all the server features. This is useful to determine if this instance is using the OCI registry or not",
            "get": {
                "description": "Retrieve the instance's enabled features",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/features"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkFeaturesResponse"
                                },
                                "example": {
                                    "data": {
                                        "docker_registry": false,
                                        "registrations": true,
                                        "audit_logs": false,
                                        "webhooks": false,
                                        "is_invite_only": false,
                                        "integrations": {
                                            "github": false,
                                            "noelware": true
                                        },
                                        "search": false
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/logout": {
            "description": "REST controller for revoking session tokens",
            "delete": {
                "description": "Revokes a session token from the server",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/DELETE-/users/@me/logout"
                },
                "responses": {
                    "202": {
                        "description": "Session token was deleted from the server, and can't be validated again",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me": {
            "description": "REST controller to retrieve the current authenticated user's metadata.",
            "get": {
                "description": "REST controller to retrieve the current authenticated user's metadata.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/users/@me"
                },
                "responses": {
                    "200": {
                        "description": "User resource that was located",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/avatars/{hash}": {
            "description": "REST controller for fetching a user's current avatar, with an optional hash identifier",
            "get": {
                "description": "Retrieves and returns a user's current avatar, or with the `hash` path parameter, return it by the specific hash",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/users/{idOrName}/avatars/{hash}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Hash of the avatar to look-up for a user.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar that was fetched from the storage service",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    },
                    "404": {
                        "description": "If the resource was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/heartbeat": {
            "description": "REST controller to check server availability, useful for Docker healthchecks or Kubernetes liveness, readiness, and startup probes",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/heartbeat"
                },
                "responses": {
                    "200": {
                        "description": "The server has responded successfully, indicating that it is live",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "Ok."
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/sessions": {
            "description": "REST controller for listing all the sessions by the current authenticated user",
            "get": {
                "description": "Retrieve all the sessions by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/users/@me/sessions"
                },
                "responses": {
                    "200": {
                        "description": "All the sessions that the API server is managing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListSession"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present, or doesn't have the 'users:sessions:list' API key scope.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Refresh the session and give a new session in return",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/PATCH-/users/@me/sessions"
                },
                "responses": {
                    "200": {
                        "description": "Refreshed session",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present, the body was not in the format a Session Token would be in, or if the refresh token was not provided as the token it wants.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "description": "REST controller for creating sessions that last over 7 days for services like Hoshi.",
            "post": {
                "description": "Creates a long-lived session",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/POST-/users/login"
                },
                "responses": {
                    "201": {
                        "description": "Session object that was created on the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the user credentials weren't found in the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Specified password was not the right one to authenticate the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/avatars": {
            "description": "Upload a new avatar for the current authenticated user",
            "post": {
                "description": "Upload a new avatar, this can be in a `multipart/form-data` content-type, or in a `text/plain` type with the image being base64 encoded",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/POST-/users/@me/avatars"
                },
                "responses": {
                    "202": {
                        "description": "Avatar was successfully updated, this will return an empty response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUnit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request was a multipart form-data, this will indicate that the selected part was not a File type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "This can indicate two types of problems:\n* If it failed at the authentication level, it is indicated that the `Authorization` header was not in a valid format the server can accept,\n* This can also indicate that the request body was not formatted in the way it can be accepted; it has to be in the form of 'data:image/{format};base64,...'",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/indexes": {
            "description": "Returns a organization or user's Helm index, which shows all the repositories to the Helm CLI.",
            "get": {
                "description": "Retrieve an organization or user's Helm index",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/indexes"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Helm index for the organization or user",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChartIndexYaml"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User or organization doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}": {
            "description": "REST controller to retrieve a user from the server",
            "get": {
                "description": "Retrieve a User object from the server",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/users/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource was found from the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the `idOrName` path parameter was not a [Snowflake] or a [Name]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the resource was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/info": {
            "description": "Information about the server, like version, commit, build-date, etc.",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/info"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkInfoResponse"
                                },
                                "example": {
                                    "data": {
                                        "distribution": "git",
                                        "commit_sha": "dafe863f",
                                        "build_date": "2023-06-11T01:04:19Z",
                                        "product": "charted-server",
                                        "version": "0.4.0-unstable.4",
                                        "vendor": "Noelware"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/avatars/{hash}": {
            "description": "REST controller for fetching the current authenticated user's current avatar, with an optional hash identifier",
            "get": {
                "description": "Retrieves and returns the current authenticated user's current avatar, or with the `hash` path parameter, return it by the specific hash",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/users/@me/avatars/{hash}"
                },
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Hash of the avatar to look-up for a user.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar that was fetched from the storage service",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    },
                    "404": {
                        "description": "If the resource was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/": {
            "description": "Generic main entrypoint to charted-server's API server",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-unstable.4/api/GET-/"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkMainResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Hello, world! üëã",
                                        "tagline": "You know, for Helm charts?",
                                        "docs": "https://charts.noelware.org/docs"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ApiError": {
                "required": ["code", "message"],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Kind of error that occurred. You can look up all the codes in the API documentation: https://charts.noelware.org/docs/server/api/reference#error-codes"
                    },
                    "message": {
                        "type": "string",
                        "description": "More meaningful, humane response on why this request failed."
                    },
                    "detail": {
                        "type": "object",
                        "description": "Extra context about the error that might help prevent it in the future"
                    }
                },
                "description": "Represents a structured object that can be serialized as an API response error for anyreason that might've occurred in a REST controller. It contains a `code` property, to identifythe error kind that this error is, a `message` property to give a more humane response on whyit failed, and optionally a `detail` property that gives more context on how this error came through.\nYou can read up all the codes present in the API documentation: https://charts.noelware.org/docs/server/current/api/reference#error-codes"
            },
            "ApiResponseUnit": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                }
            },
            "ChartDependency": {
                "required": ["import-values", "name", "tags"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "condition": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "import-values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StringOrImportValue"
                        }
                    },
                    "alias": {
                        "type": "string"
                    }
                }
            },
            "ChartIndexSpec": {
                "required": [
                    "annotations",
                    "apiVersion",
                    "dependencies",
                    "deprecated",
                    "keywords",
                    "maintainers",
                    "name",
                    "removed",
                    "sources",
                    "urls",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "enum": ["v1", "v2"]
                    },
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "kubeVersion": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["application", "library", "operator"]
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "home": {
                        "type": "string"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartDependency"
                        }
                    },
                    "maintainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartMaintainer"
                        }
                    },
                    "icon": {
                        "type": "string"
                    },
                    "appVersion": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "created": {
                        "type": "string",
                        "format": "date"
                    },
                    "removed": {
                        "type": "boolean"
                    },
                    "digest": {
                        "type": "string"
                    }
                }
            },
            "ChartIndexYaml": {
                "required": ["apiVersion", "entries", "generated"],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entries": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChartIndexSpec"
                            }
                        }
                    },
                    "generated": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "ChartMaintainer": {
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "CreateUserPayload": {
                "required": ["email", "username"],
                "type": "object",
                "properties": {
                    "password": {
                        "pattern": "^.*(?=.{8,})(?=.*[a-zA-Z])(?=.*\\d)?(?=.*[!#$%&? \"])?.*$",
                        "type": "string",
                        "description": "Password for logging in, if the server is configured to use the local session manager, this is a required field."
                    },
                    "username": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address to identify this user"
                    }
                },
                "description": "Payload object to create a new User resource"
            },
            "Err": {
                "required": ["errors", "success"],
                "type": "object",
                "description": "Represents an unsuccessful response, with any errors that might've occurred during the invocation of the request",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ApiResponseUnit"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "description": "List of [ApiError] objects that might've occurred when invoking an request.",
                                "items": {
                                    "$ref": "#/components/schemas/ApiError"
                                }
                            }
                        }
                    }
                ]
            },
            "FeaturesResponse": {
                "required": [
                    "audit_logs",
                    "docker_registry",
                    "integrations",
                    "is_invite_only",
                    "registrations",
                    "search",
                    "webhooks"
                ],
                "type": "object",
                "properties": {
                    "docker_registry": {
                        "type": "boolean",
                        "description": "Whether if the external OCI registry experimental feature or the home-made implementation registry feature is enabled or not."
                    },
                    "registrations": {
                        "type": "boolean",
                        "description": "Whether if registrations are enabled on the server"
                    },
                    "audit_logs": {
                        "type": "boolean",
                        "description": "Whether if the Audit Logging feature is enabled or not."
                    },
                    "webhooks": {
                        "type": "boolean",
                        "description": "Whether if the Webhooks feature is enabled or not."
                    },
                    "is_invite_only": {
                        "type": "boolean",
                        "description": "Whether if this server instance is invite-only."
                    },
                    "integrations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean",
                            "description": "Mapping of all available session integrations."
                        },
                        "description": "Mapping of all available session integrations."
                    },
                    "search": {
                        "type": "boolean",
                        "description": "Whether if the server has search capabilities with the Elasticsearch or Meilisearch backend"
                    }
                },
                "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
            },
            "ImportValue": {
                "required": ["child", "parent"],
                "type": "object",
                "properties": {
                    "child": {
                        "type": "string"
                    },
                    "parent": {
                        "type": "string"
                    }
                }
            },
            "InfoResponse": {
                "required": ["build_date", "commit_sha", "distribution", "product", "vendor", "version"],
                "type": "object",
                "properties": {
                    "distribution": {
                        "type": "string",
                        "description": "The distribution the server is running off from",
                        "enum": ["kubernetes", "unknown", "docker", "rpm", "deb", "git"]
                    },
                    "commit_sha": {
                        "type": "string",
                        "description": "The commit hash from the Git repository."
                    },
                    "build_date": {
                        "type": "string",
                        "description": "Build date in RFC3339 format"
                    },
                    "product": {
                        "type": "string",
                        "description": "Product name. Will always be \"charted-server\""
                    },
                    "version": {
                        "type": "string",
                        "description": "Valid SemVer 2 of the current version of this instance"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Vendor of charted-server, will always be \"Noelware\""
                    }
                },
                "description": "Represents the response for the `GET /info` REST handler."
            },
            "MainResponse": {
                "required": ["docs", "message", "tagline"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Message to greet users! Will always be \"Hello, world! üëã\""
                    },
                    "tagline": {
                        "type": "string",
                        "description": "Tagline of charted-server, will always be \"You know, for Helm charts?\""
                    },
                    "docs": {
                        "type": "string",
                        "description": "Documentation URI for charted-server."
                    }
                },
                "description": "Represents the response for the `GET /` method."
            },
            "MainUserResponse": {
                "required": ["docs_url", "message"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Generic message to greet the user to the Users API!"
                    },
                    "docs_url": {
                        "type": "string",
                        "description": "Documentation URL for the Users API"
                    }
                },
                "description": "Generic entrypoint response for the Users API"
            },
            "Name": {
                "pattern": "^([A-z]|-|_|\\d{0,9}){0,32}",
                "type": "string",
                "description": "Valid UTF-8 string that is used to point to a user, repository, or organization resource. Mainly used for `idOrName` path parameters in REST controllers to help identify which resource to locate from a valid `Snowflake` identifier, or a Name to point to a resource."
            },
            "NameOrSnowflake": {
                "type": "object",
                "description": "Union discriminated type that can resolve a valid `Snowflake`, or a `Name` that can safely point to a user, organization, or repository",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Snowflake"
                    },
                    {
                        "$ref": "#/components/schemas/Name"
                    }
                ]
            },
            "Ok": {
                "required": ["success"],
                "type": "object",
                "description": "Represents a successful response, with any data attached if any",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ApiResponseUnit"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "object",
                                "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
                            }
                        }
                    }
                ]
            },
            "OkFeaturesResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/FeaturesResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkInfoResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/InfoResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListSession": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present.",
                        "items": {
                            "$ref": "#/components/schemas/Session"
                        }
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkMainResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MainResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkMainUserResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MainUserResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkSession": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Session"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkUnit": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Unit"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkUser": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/User"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "Session": {
                "required": ["access_token", "refresh_token", "session_id", "user_id"],
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    },
                    "access_token": {
                        "type": "string"
                    },
                    "session_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "description": "Represents a session token object. This is how sessions are stored when authenticating to charted-server."
            },
            "Snowflake": {
                "minLength": 15,
                "type": "integer",
                "description": "A unique identifier that points to a User, Repository, or Organization resource",
                "format": "int64"
            },
            "StringOrImportValue": {
                "type": "object",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "$ref": "#/components/schemas/ImportValue"
                    }
                ]
            },
            "Unit": {
                "type": "object",
                "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
            },
            "User": {
                "required": ["admin", "created_at", "id", "updated_at", "username", "verified_publisher"],
                "type": "object",
                "properties": {
                    "verified_publisher": {
                        "type": "boolean",
                        "description": "Whether if this User is a Verified Publisher or not."
                    },
                    "gravatar_email": {
                        "type": "string",
                        "description": "Valid email address that points to an Gravatar avatar, or `null` if it shouldn't use one as the primary avatar"
                    },
                    "description": {
                        "type": "string",
                        "description": "Short description about this user, can be `null` if none was provided."
                    },
                    "avatar_hash": {
                        "type": "string",
                        "description": "Unique hash to locate a user's avatar, this also includes the extension that this avatar is, i.e, `png`."
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Date of when this user was registered to this instance",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Date of when the server has last updated this user",
                        "format": "date-time"
                    },
                    "username": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "admin": {
                        "type": "boolean",
                        "description": "Whether if this User is an Administrator of this instance"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name for this user, it should be displayed as '{name} (@{username})' or just '@{username}' if there is no display name"
                    },
                    "id": {
                        "$ref": "#/components/schemas/Snowflake"
                    }
                },
                "description": "Represents an account that can own repositories and organizations"
            },
            "UserLoginPayload": {
                "required": ["password"],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username to authenticate as. This is mutually exclusive with `email`."
                    },
                    "password": {
                        "type": "string",
                        "description": "Raw password to authenticate the user as."
                    },
                    "email": {
                        "type": "string",
                        "description": "Email to authenticate a user as, this is mutually exclusive with `username`."
                    }
                }
            }
        },
        "securitySchemes": {
            "SessionToken": {
                "type": "http",
                "description": "Session token from the POST /users/login endpoint",
                "in": "header",
                "scheme": "Bearer",
                "bearerFormat": "Bearer"
            },
            "ApiKey": {
                "type": "apiKey",
                "in": "header",
                "bearerFormat": "ApiKey"
            },
            "Basic": {
                "type": "http",
                "description": "Basic authentication",
                "in": "header",
                "scheme": "Basic",
                "bearerFormat": "Basic"
            }
        }
    }
}
