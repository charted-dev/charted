{
    "openapi": "3.0.1",
    "info": {
        "title": "charted-server",
        "description": "üêª‚Äç‚ùÑÔ∏èüì¶ Free, open source, and reliable Helm Chart registry made in Kotlin",
        "termsOfService": "https://charts.noelware.org/legal/tos",
        "contact": {
            "name": "Noelware, LLC.",
            "url": "https://noelware.org",
            "email": "team@noelware.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "v0.1.0-beta"
    },
    "externalDocs": {
        "url": "https://charts.noelware.org/docs/server/0.1.0-beta"
    },
    "servers": [
        {
            "url": "https://charts.noelware.org/api",
            "description": "Official Instance"
        }
    ],
    "paths": {
        "/_openapi": {
            "description": "Endpoint for the OpenAPI specification for charted-server",
            "get": {
                "description": "Gets the document in JSON format or YAML format",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/_openapi"
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Format to use",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pretty",
                        "in": "query",
                        "description": "If the document should be pretty or not, this is only applicable to the JSON format",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/_swagger": {
            "description": "Endpoint for Swagger UI",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/_swagger"
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkMainUserResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Welcome to the Users API!",
                                        "docs_url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/users"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "REST controller to create a new user into this instance. This can fail if the server is invite-only or if registrations are disabled.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PUT-/users"
                },
                "requestBody": {
                    "description": "Payload object to create this user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "User resource was successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the session manager configured for this server is local, then this will indicate a password was not available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the server doesn't allow new users to be created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the current authenticated user. This will destroy all metadata (repositories, organizations), search indexing (if enabled), and all Helm charts that are published.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/DELETE-/users"
                },
                "responses": {
                    "202": {
                        "description": "Session token was deleted from the server, and can't be validated again",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}": {
            "get": {
                "description": "Retrieve a single repository release resource",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}/releases/{version}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup the release for",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/VersionConstraint"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseRepositoryRelease"
                                },
                                "example": {
                                    "data": {
                                        "update_text": "# v0.0.1-beta\n* Added new stuff",
                                        "created_at": "2023-04-08T02:37:53.741502369",
                                        "updated_at": "2023-04-08T02:37:53.741502369",
                                        "tag": "0.0.1-beta",
                                        "id": 1234
                                    },
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a repository release, and the tarball if it exists",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/DELETE-/repositories/{id}/releases/{version}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup the release for",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/VersionConstraint"
                        }
                    }
                ],
                "responses": {}
            },
            "patch": {
                "description": "Patch a repository release's metadata",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PATCH-/repositories/{id}/releases/{version}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup the release for",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/VersionConstraint"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchRepositoryReleasePayload"
                            },
                            "example": {
                                "update_text": "# Hello, world?\n> Some markdown! :D"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "Generic entrypoint for the Repositories API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/organizations"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MainOrganizationResponse"
                                },
                                "example": {
                                    "message": "Welcome to the Organizations API!",
                                    "docs": "https://charts.noelware.org/docs/server/0.1.0-beta/api/organizations"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates an organization resource with the specified parameters.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PUT-/organizations"
                },
                "requestBody": {
                    "description": "Payload for creating an organization",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateOrganizationPayload"
                            },
                            "example": {
                                "display_name": "Noelware, LLC.",
                                "private": false,
                                "name": "noelware"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Returns the created organization resource.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                },
                                "example": {
                                    "verified_publisher": true,
                                    "display_name": "Noelware, LLC.",
                                    "created_at": "2023-04-08T02:37:53.741502369",
                                    "updated_at": "2023-04-08T02:37:53.741502369",
                                    "private": false,
                                    "owner": {
                                        "verified_publisher": true,
                                        "created_at": "2023-04-08T02:37:53.741502369",
                                        "updated_at": "2023-04-08T02:37:53.741502369",
                                        "username": "noel",
                                        "admin": false,
                                        "name": "Noel",
                                        "id": 1
                                    },
                                    "name": "noelware",
                                    "id": 1234
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}.tar.gz": {
            "get": {
                "description": "Gets a repository release's tarball, if the version exists",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}/releases/{version}.tar.gz"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the tar resource wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Tar resource itself",
                        "content": {
                            "application/tar+gzip": {}
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a tarball that is a valid Helm tarball that was generated from the `helm package` command.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/POST-/repositories/{id}/releases/{version}.tar.gz"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to use as the tarball name",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/VersionConstraint"
                        }
                    }
                ],
                "requestBody": {
                    "description": "multipart/form-data object with a file part being the actual tarball",
                    "content": {
                        "multipart/form-data": {}
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Tarball was stored successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid multipart/form-data object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "NOT_FILE_PART",
                                            "message": "Part was not a file."
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/features": {
            "description": "REST controller to describe all the server features. This is useful to determine if this instance is using the OCI registry or not",
            "get": {
                "description": "Retrieve the instance's enabled features",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/features"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkFeaturesResponse"
                                },
                                "example": {
                                    "data": {
                                        "docker_registry": false,
                                        "registrations": true,
                                        "audit_logs": false,
                                        "webhooks": false,
                                        "is_invite_only": false,
                                        "integrations": {
                                            "github": false,
                                            "noelware": true
                                        },
                                        "search": false
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/repositories/{repoIdOrName}": {
            "get": {
                "description": "Fetch a single repository from a user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/{idOrName}/repositories/{repoIdOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Name or Snowflake to query a user",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "repoIdOrName",
                        "in": "path",
                        "description": "Name or Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "if a user or repository couldn't be found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListRepository"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/readme": {
            "get": {
                "description": "Retrieve a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "README content in Markdown",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "# Some Markdown\n> Hopefully..."
                            }
                        }
                    },
                    "404": {
                        "description": "If a repository wasn't found or if there is no README",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates or updates a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/POST-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "README was updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Creates or updates a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/DELETE-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "README was updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}/Chart.yaml": {
            "get": {
                "description": "Returns the given Chart.yaml file of this release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}/releases/{version}/Chart.yaml"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the Chart.yaml file wasn't found for this release",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Chart.yaml file",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/repositories/{id}": {
            "patch": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PATCH-/users/{idOrName}/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases": {
            "get": {
                "description": "Retrieve all repository releases",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}/releases"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListRepositoryRelease"
                                },
                                "example": [
                                    {
                                        "update_text": "# v0.0.1-beta\n* Added new stuff",
                                        "created_at": "2023-04-08T02:37:53.741502369",
                                        "updated_at": "2023-04-08T02:37:53.741502369",
                                        "tag": "0.0.1-beta",
                                        "id": 1234
                                    }
                                ]
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a repository release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PUT-/repositories/{id}/releases"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "Payload for creating a repository release",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRepositoryReleasePayload"
                            },
                            "example": {
                                "update_text": "# 0.0.1-beta\nSome updates!",
                                "tag": "0.0.1-beta"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Release resource was created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RepositoryRelease"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/logout": {
            "description": "REST controller for revoking session tokens",
            "delete": {
                "description": "Revokes a session token from the server",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/DELETE-/users/@me/logout"
                },
                "responses": {
                    "202": {
                        "description": "Session token was deleted from the server, and can't be validated again",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apikeys": {
            "get": {
                "description": "Returns all of the API key resources created by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/apikeys"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ApiKeys"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates an API key under the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PUT-/apikeys"
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateApiKeyPayload"
                            },
                            "example": {
                                "description": "API key to automate some stuff!",
                                "scopes": ["apikeys:create", "user:access"],
                                "name": "some-api-key"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkApiKeys"
                                },
                                "example": {
                                    "data": {
                                        "description": "API key to automate some stuff!",
                                        "scopes": 536870913,
                                        "owner": {
                                            "verified_publisher": true,
                                            "created_at": "2023-04-08T02:37:53.741502369",
                                            "updated_at": "2023-04-08T02:37:53.741502369",
                                            "username": "noel",
                                            "admin": true,
                                            "name": "Noel",
                                            "id": 1
                                        },
                                        "name": "some-api-key",
                                        "id": 1234
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{idOrName}/repositories/{id}": {
            "description": "Allows updating a repository based on its ID.",
            "patch": {
                "description": "Updates an organization's repository based on its ID.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PATCH-/organizations/{idOrName}/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The [Snowflake] ID of the repository being queried.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me": {
            "description": "REST controller to retrieve the current authenticated user's metadata.",
            "get": {
                "description": "REST controller to retrieve the current authenticated user's metadata.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/@me"
                },
                "responses": {
                    "200": {
                        "description": "User resource that was located",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/repositories": {
            "get": {
                "description": "Returns all of an user's repositories",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/{idOrName}/repositories"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListRepository"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/avatars/{hash}": {
            "description": "REST controller for fetching a user's current avatar, with an optional hash identifier",
            "get": {
                "description": "Retrieves and returns a user's current avatar, or with the `hash` path parameter, return it by the specific hash",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/{idOrName}/avatars/{hash}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Hash of the avatar to look-up for a user.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar that was fetched from the storage service",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    },
                    "404": {
                        "description": "If the resource was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/heartbeat": {
            "description": "REST controller to check server availability, useful for Docker healthchecks or Kubernetes liveness, readiness, and startup probes",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/heartbeat"
                },
                "responses": {
                    "200": {
                        "description": "The server has responded successfully, indicating that it is live",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "Ok."
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/sessions": {
            "description": "REST controller for listing all the sessions by the current authenticated user",
            "get": {
                "description": "Retrieve all the sessions by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/@me/sessions"
                },
                "responses": {
                    "200": {
                        "description": "All the sessions that the API server is managing",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListSession"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present, or doesn't have the 'users:sessions:list' API key scope.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Refresh the session and give a new session in return",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PATCH-/users/@me/sessions"
                },
                "responses": {
                    "200": {
                        "description": "Refreshed session",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present, the body was not in the format a Session Token would be in, or if the refresh token was not provided as the token it wants.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header was not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apikeys/{idOrName}": {
            "get": {
                "description": "Returns a single API key resource owned by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/apikeys/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "API_KEY_NOT_FOUND",
                                            "message": "API key with name 'noel-is-cute' was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiKeys"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an API key resource off the current authenticated user's account",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/DELETE-/apikeys/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "API key resource with name or ID was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "API_KEY_NOT_FOUND",
                                            "message": "API key with name 'noel-is-cute' was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "API key resource was deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Patches an API key resource",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PATCH-/apikeys/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchApiKeyPayload"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "API_KEY_NOT_FOUND",
                                            "message": "API key with name 'noel-is-cute' was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{idOrName}": {
            "get": {
                "description": "Retrieve an organization resource by its [NameOrSnowflake].",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/organizations/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the organization resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                },
                                "example": {
                                    "verified_publisher": true,
                                    "twitter_handle": "@noelware",
                                    "display_name": "üêª‚Äç‚ùÑÔ∏è Noelware, LLC.",
                                    "created_at": "2023-04-08T02:37:53.741502369",
                                    "updated_at": "2023-04-08T02:37:53.741502369",
                                    "private": false,
                                    "owner": {
                                        "verified_publisher": true,
                                        "created_at": "2023-04-08T02:37:53.741502369",
                                        "updated_at": "2023-04-08T02:37:53.741502369",
                                        "username": "noel",
                                        "admin": true,
                                        "name": "Noel",
                                        "id": 1
                                    },
                                    "name": "noelware",
                                    "id": 2
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "description": "Patch an organization's metadata",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PATCH-/organizations/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchOrganizationPayload"
                            },
                            "example": {
                                "display_name": "awau!",
                                "private": true,
                                "name": "heck"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "description": "REST controller for creating sessions that last over 7 days for services like Hoshi.",
            "post": {
                "description": "Creates a long-lived session",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/POST-/users/login"
                },
                "requestBody": {
                    "description": "Payload object for user credentials",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserLoginPayload"
                            },
                            "example": {
                                "username": "noel",
                                "password": "a password that is probably not valid"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Session object that was created on the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the user credentials weren't found in the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Specified password was not the right one to authenticate the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}": {
            "get": {
                "description": "Returns a repository entity with the given ID. Use the /users/{idOrName}/repos/{repoIdOrName} to fetch a user repository with a ID or name, or /organizations/{idOrName}/repos/{repoIdOrName} to fetch a organization repository with a ID or name",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake of the repository to look up",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a repository",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/DELETE-/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of the repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The repository was deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "If the `id` path parameter couldn't be into a valid Snowflake",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "UNABLE_TO_PARSE",
                                            "message": "Unable to convert into a Snowflake"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/avatars": {
            "description": "Upload a new avatar for the current authenticated user",
            "post": {
                "description": "Upload a new avatar, this can be in a `multipart/form-data` content-type, or in a `text/plain` type with the image being base64 encoded",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/POST-/users/@me/avatars"
                },
                "requestBody": {
                    "description": "A multipart form-data of the image itself; if multiple parts were appended to this request, then all subsequent parts except the first one will be used. If this is a 'text/plain' request, then the server will only accept 'data:image/png;base64,<...>' as the body",
                    "content": {
                        "text/plain": {},
                        "multipart/form-data": {}
                    },
                    "required": true
                },
                "responses": {
                    "202": {
                        "description": "Avatar was successfully updated, this will return an empty response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUnit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request was a multipart form-data, this will indicate that the selected part was not a File type",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session token couldn't be authorized successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or the body was not a proper session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "This can indicate two types of problems:\n* If it failed at the authentication level, it is indicated that the `Authorization` header was not in a valid format the server can accept,\n* This can also indicate that the request body was not formatted in the way it can be accepted; it has to be in the form of 'data:image/{format};base64,...'",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}/templates": {
            "get": {
                "description": "List of all available templates of a given release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}/releases/{version}/templates"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the tar resource wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "All the templates available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListString"
                                },
                                "example": {
                                    "data": [
                                        "http://localhost:3651/repositories/1/releases/1.0.2-alpha/templates/statefulset.yaml"
                                    ],
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/indexes": {
            "description": "Returns a organization or user's Helm index, which shows all the repositories to the Helm CLI.",
            "get": {
                "description": "Retrieve an organization or user's Helm index",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/indexes"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Helm index for the organization or user",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChartIndexYaml"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User or organization doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}": {
            "description": "REST controller to retrieve a user from the server",
            "get": {
                "description": "Retrieve a User object from the server",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource was found from the server",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the `idOrName` path parameter was not a [Snowflake] or a [Name]",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the resource was not found.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/info": {
            "description": "Information about the server, like version, commit, build-date, etc.",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/info"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkInfoResponse"
                                },
                                "example": {
                                    "data": {
                                        "distribution": "git",
                                        "commit_sha": "dafe863f",
                                        "build_date": "2023-06-11T01:04:19Z",
                                        "product": "charted-server",
                                        "version": "0.1.0-beta",
                                        "vendor": "Noelware"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/organizations": {
            "get": {
                "description": "Retrieves all of the user's organization.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/{idOrName}/organizations"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListOrganization"
                                },
                                "example": {
                                    "data": [
                                        {
                                            "verified_publisher": true,
                                            "twitter_handle": "@noelware",
                                            "display_name": "üêª‚Äç‚ùÑÔ∏è Noelware, LLC.",
                                            "created_at": "2023-04-08T02:37:53.741502369",
                                            "updated_at": "2023-04-08T02:37:53.741502369",
                                            "private": false,
                                            "owner": {
                                                "verified_publisher": true,
                                                "created_at": "2023-04-08T02:37:53.741502369",
                                                "updated_at": "2023-04-08T02:37:53.741502369",
                                                "username": "noel",
                                                "admin": true,
                                                "name": "Noel",
                                                "id": 1
                                            },
                                            "name": "noelware",
                                            "id": 2
                                        }
                                    ],
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{idOrName}/repositories": {
            "description": "Returns all of an organization's repositories.",
            "get": {
                "description": "Returns all of an organization's repositories.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/organizations/{idOrName}/repositories"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of repositories within this organization.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListRepository"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a repository that is owned by an organization.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PUT-/organizations/{idOrName}/repositories"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRepositoryPayload"
                            },
                            "example": {
                                "description": "helm library to provide common stuff",
                                "private": false,
                                "readme": "# Hello, world!\n> we do magic stuff here~!",
                                "name": "common",
                                "type": "LIBRARY"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "The [Repository] of the newly created repository.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepository"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/repositories": {
            "put": {
                "description": "Creates a repository that is owned by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/PUT-/users/@me/repositories"
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateRepositoryPayload"
                            },
                            "example": {
                                "description": "helm library to provide common stuff",
                                "private": false,
                                "readme": "# Hello, world!\n> we do magic stuff here~!",
                                "name": "common",
                                "type": "LIBRARY"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepository"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/avatars/{hash}": {
            "description": "REST controller for fetching the current authenticated user's current avatar, with an optional hash identifier",
            "get": {
                "description": "Retrieves and returns the current authenticated user's current avatar, or with the `hash` path parameter, return it by the specific hash",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/users/@me/avatars/{hash}"
                },
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Hash of the avatar to look-up for a user.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Avatar that was fetched from the storage service",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    },
                    "404": {
                        "description": "If the resource was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/": {
            "description": "Generic main entrypoint to charted-server's API server",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkMainResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Hello, world! üëã",
                                        "tagline": "You know, for Helm charts?",
                                        "docs": "https://charts.noelware.org/docs"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{idOrName}/repositories/{repoIdOrName}": {
            "description": "Fetches a single repository from an organization.",
            "get": {
                "description": "Fetches a single repository from the given organization based on its name or ID.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/organizations/{idOrName}/repositories/{repoIdOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Parameter that can take [Name] or [Snowflake] as a way to identify this resource.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "repoIdOrName",
                        "in": "path",
                        "description": "The [Name] or [Snowflake] ID of the repository being queried.",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Organization or repository doesn't exist",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "The metadata of this [Repository].",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Repository"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories": {
            "get": {
                "description": "Generic entrypoint for the Repositories API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkMainRepositoryResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Welcome to the Repositories API!",
                                        "docsUrl": "https://charts.noelware.org/docs/server/0.1.0-beta/api/repositories"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}/templates/{template}": {
            "get": {
                "description": "List of all available templates of a given release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/GET-/repositories/{id}/releases/{version}/templates/{template}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "template",
                        "in": "path",
                        "description": "Valid template to look for",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the template wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Valid Kubernetes API object as YAML",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "description": "Allows deleting an organization.",
            "delete": {
                "description": "Allows deleting an organization.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.1.0-beta/api/DELETE-/organizations/{id}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake ID of the organization resource to delete",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Organization was successfully deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ApiError": {
                "required": ["code", "message"],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "Kind of error that occurred. You can look up all the codes in the API documentation: https://charts.noelware.org/docs/server/api/reference#error-codes"
                    },
                    "message": {
                        "type": "string",
                        "description": "More meaningful, humane response on why this request failed."
                    },
                    "detail": {
                        "type": "object",
                        "description": "Extra context about the error that might help prevent it in the future"
                    }
                },
                "description": "Represents a structured object that can be serialized as an API response error for anyreason that might've occurred in a REST controller. It contains a `code` property, to identifythe error kind that this error is, a `message` property to give a more humane response on whyit failed, and optionally a `detail` property that gives more context on how this error came through.\nYou can read up all the codes present in the API documentation: https://charts.noelware.org/docs/server/current/api/reference#error-codes"
            },
            "ApiKeys": {
                "required": ["id", "name", "owner", "scopes"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Short descriptive text about this API key"
                    },
                    "expires_in": {
                        "type": "string",
                        "description": "Datetime of when this API key has expired, `null` is represented as this API key will never expire",
                        "format": "date-time"
                    },
                    "scopes": {
                        "type": "integer",
                        "description": "Bitfield of the available scopes for this API key, useful to restrict access to charted-server APIs that this key doesn't need",
                        "format": "int64"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token itself, this isn't revealed if you fetched it from the API, this is only populated when you create the key."
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "id": {
                        "$ref": "#/components/schemas/Snowflake"
                    }
                },
                "description": "Resource for a personal API key that is created by a user. This is useful for command line tools or scripts, but its main use-case is for the Helm plugin to help you push Helm charts easily into charted-server."
            },
            "ApiResponseRepositoryRelease": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                }
            },
            "ApiResponseUnit": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                }
            },
            "ChartDependency": {
                "required": ["import-values", "name", "tags"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the chart."
                    },
                    "version": {
                        "$ref": "#/components/schemas/VersionConstraint"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The repository URL or alias"
                    },
                    "condition": {
                        "type": "string",
                        "description": "YAML path that resolves to a Boolean, used for enabling/disabling charts."
                    },
                    "tags": {
                        "type": "array",
                        "description": "Tags can be used to group charts for enabling/disabling together",
                        "items": {
                            "type": "string",
                            "description": "Tags can be used to group charts for enabling/disabling together"
                        }
                    },
                    "import-values": {
                        "type": "array",
                        "description": "ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.",
                        "items": {
                            "$ref": "#/components/schemas/StringOrImportValue"
                        }
                    },
                    "alias": {
                        "type": "string",
                        "description": "Alias to be used for the chart. Useful when you have to add the same chart multiple times"
                    }
                },
                "description": "In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies' field in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined as a list in the dependencies field."
            },
            "ChartIndexSpec": {
                "required": [
                    "annotations",
                    "apiVersion",
                    "dependencies",
                    "deprecated",
                    "keywords",
                    "maintainers",
                    "name",
                    "removed",
                    "sources",
                    "urls",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The apiVersion field should be v2 for Helm charts that require at least Helm 3. Charts supporting previous Helm versions have an apiVersion set to v1 and are still installable by Helm 3.",
                        "enum": ["v1", "v2"]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the chart"
                    },
                    "version": {
                        "$ref": "#/components/schemas/VersionConstraint"
                    },
                    "kubeVersion": {
                        "$ref": "#/components/schemas/VersionConstraint"
                    },
                    "description": {
                        "type": "string",
                        "description": "A single-sentence description of this project"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the chart",
                        "enum": ["application", "library", "operator"]
                    },
                    "keywords": {
                        "type": "array",
                        "description": "List of keywords about this project. These keywords can be searched via the Repository Search API if a search backend is enabled.",
                        "items": {
                            "type": "string",
                            "description": "List of keywords about this project. These keywords can be searched via the Repository Search API if a search backend is enabled."
                        }
                    },
                    "home": {
                        "type": "string",
                        "description": "The URL of this project's homepage."
                    },
                    "sources": {
                        "type": "array",
                        "description": "A list of URLs to the source code for this project",
                        "items": {
                            "type": "string",
                            "description": "A list of URLs to the source code for this project"
                        }
                    },
                    "dependencies": {
                        "type": "array",
                        "description": "In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies' field in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined as a list in the dependencies field.",
                        "items": {
                            "$ref": "#/components/schemas/ChartDependency"
                        }
                    },
                    "maintainers": {
                        "type": "array",
                        "description": "A list of name and URL/email address combinations for the maintainer(s)",
                        "items": {
                            "$ref": "#/components/schemas/ChartMaintainer"
                        }
                    },
                    "icon": {
                        "type": "string",
                        "description": "A URL or an SVG or PNG image to be used as an icon"
                    },
                    "appVersion": {
                        "type": "string",
                        "description": "Note that the appVersion field is not related to the version field. It is a way of specifying the version of theapplication. For example, the drupal chart may have an appVersion: \"8.2.1\", indicating that the version of Drupalincluded in the chart (by default) is 8.2.1. This field is informational, and has no impact on chart version calculations.\nWrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string.Leaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets 1.0 as a floating point value,and a git commit SHA like 1234e10 as scientific notation."
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "When managing charts in a Chart Repository, it is sometimes necessary to deprecate a chart. The optional deprecated fieldin Chart.yaml can be used to mark a chart as deprecated. If the latest version of a chart in the repository is markedas deprecated, then the chart as a whole is considered to be deprecated.\nThe chart name can be later reused by publishing a newer version that is not marked as deprecated."
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "A list of annotations keyed by name and value."
                        },
                        "description": "A list of annotations keyed by name and value."
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "created": {
                        "type": "string",
                        "format": "date"
                    },
                    "removed": {
                        "type": "boolean"
                    },
                    "digest": {
                        "type": "string"
                    }
                }
            },
            "ChartIndexYaml": {
                "required": ["apiVersion", "entries", "generated"],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entries": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChartIndexSpec"
                            }
                        }
                    },
                    "generated": {
                        "type": "string",
                        "format": "date"
                    }
                },
                "description": "The index file in a chart repository"
            },
            "ChartMaintainer": {
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "description": "Name and URL/email address combination as a maintainer. The `name` can be a [NameOrSnowflake] to reference a maintainer in the Hoshi UI."
            },
            "ChartSpec": {
                "required": [
                    "annotations",
                    "apiVersion",
                    "dependencies",
                    "deprecated",
                    "keywords",
                    "maintainers",
                    "name",
                    "sources",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "description": "The apiVersion field should be v2 for Helm charts that require at least Helm 3. Charts supporting previous Helm versions have an apiVersion set to v1 and are still installable by Helm 3.",
                        "enum": ["v1", "v2"]
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the chart"
                    },
                    "version": {
                        "$ref": "#/components/schemas/VersionConstraint"
                    },
                    "kubeVersion": {
                        "$ref": "#/components/schemas/VersionConstraint"
                    },
                    "description": {
                        "type": "string",
                        "description": "A single-sentence description of this project"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of the chart",
                        "enum": ["application", "library", "operator"]
                    },
                    "keywords": {
                        "type": "array",
                        "description": "List of keywords about this project. These keywords can be searched via the Repository Search API if a search backend is enabled.",
                        "items": {
                            "type": "string",
                            "description": "List of keywords about this project. These keywords can be searched via the Repository Search API if a search backend is enabled."
                        }
                    },
                    "home": {
                        "type": "string",
                        "description": "The URL of this project's homepage."
                    },
                    "sources": {
                        "type": "array",
                        "description": "A list of URLs to the source code for this project",
                        "items": {
                            "type": "string",
                            "description": "A list of URLs to the source code for this project"
                        }
                    },
                    "dependencies": {
                        "type": "array",
                        "description": "In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies' field in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined as a list in the dependencies field.",
                        "items": {
                            "$ref": "#/components/schemas/ChartDependency"
                        }
                    },
                    "maintainers": {
                        "type": "array",
                        "description": "A list of name and URL/email address combinations for the maintainer(s)",
                        "items": {
                            "$ref": "#/components/schemas/ChartMaintainer"
                        }
                    },
                    "icon": {
                        "type": "string",
                        "description": "A URL or an SVG or PNG image to be used as an icon"
                    },
                    "appVersion": {
                        "type": "string",
                        "description": "Note that the appVersion field is not related to the version field. It is a way of specifying the version of theapplication. For example, the drupal chart may have an appVersion: \"8.2.1\", indicating that the version of Drupalincluded in the chart (by default) is 8.2.1. This field is informational, and has no impact on chart version calculations.\nWrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string.Leaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets 1.0 as a floating point value,and a git commit SHA like 1234e10 as scientific notation."
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "When managing charts in a Chart Repository, it is sometimes necessary to deprecate a chart. The optional deprecated fieldin Chart.yaml can be used to mark a chart as deprecated. If the latest version of a chart in the repository is markedas deprecated, then the chart as a whole is considered to be deprecated.\nThe chart name can be later reused by publishing a newer version that is not marked as deprecated."
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string",
                            "description": "A list of annotations keyed by name and value."
                        },
                        "description": "A list of annotations keyed by name and value."
                    }
                },
                "description": "Represents a `Chart.yaml` definition object."
            },
            "CreateApiKeyPayload": {
                "required": ["name", "scopes"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "expires_in": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "description": "Represents a resource for creating API keys"
            },
            "CreateOrganizationPayload": {
                "required": ["name", "private"],
                "type": "object",
                "properties": {
                    "display_name": {
                        "type": "string"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CreateRepositoryPayload": {
                "required": ["name", "private", "type"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "readme": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["application", "library", "operator"]
                    }
                }
            },
            "CreateRepositoryReleasePayload": {
                "required": ["tag"],
                "type": "object",
                "properties": {
                    "update_text": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    }
                }
            },
            "CreateUserPayload": {
                "required": ["email", "username"],
                "type": "object",
                "properties": {
                    "password": {
                        "pattern": "^.*(?=.{8,})(?=.*[a-zA-Z])(?=.*\\d)?(?=.*[!#$%&? \"])?.*$",
                        "type": "string",
                        "description": "Password for logging in, if the server is configured to use the local session manager, this is a required field."
                    },
                    "username": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address to identify this user"
                    }
                },
                "description": "Payload object to create a new User resource"
            },
            "Err": {
                "required": ["errors", "success"],
                "type": "object",
                "description": "Represents an unsuccessful response, with any errors that might've occurred during the invocation of the request",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ApiResponseUnit"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "description": "List of [ApiError] objects that might've occurred when invoking an request.",
                                "items": {
                                    "$ref": "#/components/schemas/ApiError"
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseRepositoryRelease"
                    }
                ]
            },
            "FeaturesResponse": {
                "required": [
                    "audit_logs",
                    "docker_registry",
                    "integrations",
                    "is_invite_only",
                    "registrations",
                    "search",
                    "webhooks"
                ],
                "type": "object",
                "properties": {
                    "docker_registry": {
                        "type": "boolean",
                        "description": "Whether if the external OCI registry experimental feature or the home-made implementation registry feature is enabled or not."
                    },
                    "registrations": {
                        "type": "boolean",
                        "description": "Whether if registrations are enabled on the server"
                    },
                    "audit_logs": {
                        "type": "boolean",
                        "description": "Whether if the Audit Logging feature is enabled or not."
                    },
                    "webhooks": {
                        "type": "boolean",
                        "description": "Whether if the Webhooks feature is enabled or not."
                    },
                    "is_invite_only": {
                        "type": "boolean",
                        "description": "Whether if this server instance is invite-only."
                    },
                    "integrations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean",
                            "description": "Mapping of all available session integrations."
                        },
                        "description": "Mapping of all available session integrations."
                    },
                    "search": {
                        "type": "boolean",
                        "description": "Whether if the server has search capabilities with the Elasticsearch or Meilisearch backend"
                    }
                },
                "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
            },
            "ImportValue": {
                "required": ["child", "parent"],
                "type": "object",
                "properties": {
                    "child": {
                        "type": "string"
                    },
                    "parent": {
                        "type": "string"
                    }
                }
            },
            "InfoResponse": {
                "required": ["build_date", "commit_sha", "distribution", "product", "vendor", "version"],
                "type": "object",
                "properties": {
                    "distribution": {
                        "type": "string",
                        "description": "The distribution the server is running off from",
                        "enum": ["kubernetes", "unknown", "docker", "rpm", "deb", "git"]
                    },
                    "commit_sha": {
                        "type": "string",
                        "description": "The commit hash from the Git repository."
                    },
                    "build_date": {
                        "type": "string",
                        "description": "Build date in RFC3339 format"
                    },
                    "product": {
                        "type": "string",
                        "description": "Product name. Will always be \"charted-server\""
                    },
                    "version": {
                        "type": "string",
                        "description": "Valid SemVer 2 of the current version of this instance"
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Vendor of charted-server, will always be \"Noelware\""
                    }
                },
                "description": "Represents the response for the `GET /info` REST handler."
            },
            "MainOrganizationResponse": {
                "required": ["docs", "message"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "docs": {
                        "type": "string"
                    }
                }
            },
            "MainRepositoryResponse": {
                "required": ["docsUrl", "message"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "docsUrl": {
                        "type": "string"
                    }
                },
                "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
            },
            "MainResponse": {
                "required": ["docs", "message", "tagline"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Message to greet users! Will always be \"Hello, world! üëã\""
                    },
                    "tagline": {
                        "type": "string",
                        "description": "Tagline of charted-server, will always be \"You know, for Helm charts?\""
                    },
                    "docs": {
                        "type": "string",
                        "description": "Documentation URI for charted-server."
                    }
                },
                "description": "Represents the response for the `GET /` method."
            },
            "MainUserResponse": {
                "required": ["docs_url", "message"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string",
                        "description": "Generic message to greet the user to the Users API!"
                    },
                    "docs_url": {
                        "type": "string",
                        "description": "Documentation URL for the Users API"
                    }
                },
                "description": "Generic entrypoint response for the Users API"
            },
            "Name": {
                "pattern": "^([A-z]|-|_|\\d{0,9}){0,32}",
                "type": "string",
                "description": "Valid UTF-8 string that is used to point to a user, repository, or organization resource. Mainly used for `idOrName` path parameters in REST controllers to help identify which resource to locate from a valid `Snowflake` identifier, or a Name to point to a resource."
            },
            "NameOrSnowflake": {
                "type": "object",
                "description": "Union discriminated type that can resolve a valid `Snowflake`, or a `Name` that can safely point to a user, organization, or repository",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Snowflake"
                    },
                    {
                        "$ref": "#/components/schemas/Name"
                    }
                ]
            },
            "Ok": {
                "required": ["success"],
                "type": "object",
                "description": "Represents a successful response, with any data attached if any",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ApiResponseUnit"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "object",
                                "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseRepositoryRelease"
                    }
                ]
            },
            "OkApiKeys": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/ApiKeys"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkFeaturesResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/FeaturesResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkInfoResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/InfoResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListOrganization": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present.",
                        "items": {
                            "$ref": "#/components/schemas/Organization"
                        }
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListRepository": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present.",
                        "items": {
                            "$ref": "#/components/schemas/Repository"
                        }
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListRepositoryRelease": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present.",
                        "items": {
                            "$ref": "#/components/schemas/RepositoryRelease"
                        }
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListSession": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present.",
                        "items": {
                            "$ref": "#/components/schemas/Session"
                        }
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListString": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present.",
                        "items": {
                            "type": "string",
                            "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
                        }
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkMainRepositoryResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MainRepositoryResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkMainResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MainResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkMainUserResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/MainUserResponse"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkRepository": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Repository"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkSession": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Session"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkUnit": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Unit"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkUser": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/User"
                    },
                    "success": {
                        "type": "boolean",
                        "description": "Indicator to whenever this request succeeded or not."
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "Organization": {
                "required": ["created_at", "id", "name", "owner", "private", "updated_at", "verified_publisher"],
                "type": "object",
                "properties": {
                    "verified_publisher": {
                        "type": "boolean",
                        "description": "Whether if this organization is a verified publisher on this instance"
                    },
                    "twitter_handle": {
                        "type": "string",
                        "description": "Twitter handle for this organization that will probably lead to a valid Twitter account."
                    },
                    "gravatar_email": {
                        "type": "string",
                        "description": "Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar"
                    },
                    "display_name": {
                        "type": "string",
                        "description": "Display name for this organization. It should be formatted as '{display_name} (@{name})'or just '{name}' in applications that use the API and the default formatting that Hoshi uses"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Date of when this organization was registered to this instance",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Date of when the server has last updated this organization",
                        "format": "date-time"
                    },
                    "icon_hash": {
                        "type": "string",
                        "description": "Unique hash to locate an organization's icon, this also includes the extension that this icon is, i.e, `png`."
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Whether this organization is private and only its member can access this resource."
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "id": {
                        "$ref": "#/components/schemas/Snowflake"
                    }
                },
                "description": "Represents a unified organization that can own and manage repositories. An \"organization\" in the API server is used as a business that houses multiple Helm projects."
            },
            "PatchApiKeyPayload": {
                "required": ["scopes"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "expires_in": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "description": "Represents a resource for patching API key metadata"
            },
            "PatchOrganizationPayload": {
                "type": "object",
                "properties": {
                    "twitter_handle": {
                        "type": "string"
                    },
                    "gravatar_email": {
                        "type": "string"
                    },
                    "display_name": {
                        "type": "string"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "PatchRepositoryReleasePayload": {
                "type": "object",
                "properties": {
                    "update_text": {
                        "type": "string"
                    }
                }
            },
            "Repository": {
                "required": ["created_at", "deprecated", "id", "name", "owner_id", "private", "type", "updated_at"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Short description about this user, can be `null` if none was provided."
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether if this repository is or not"
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Date of when this repository was registered to this instance",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Date of when the server has last updated this repository",
                        "format": "date-time"
                    },
                    "icon_hash": {
                        "type": "string",
                        "description": "Unique hash to locate a repository's icon, this also includes the extension that this avatar is, i.e, `png`."
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Whether if this repository is private or not"
                    },
                    "owner_id": {
                        "$ref": "#/components/schemas/Snowflake"
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "type": {
                        "type": "string",
                        "description": "The chart type that this repository is",
                        "enum": ["application", "library", "operator"]
                    },
                    "id": {
                        "$ref": "#/components/schemas/Snowflake"
                    }
                }
            },
            "RepositoryRelease": {
                "required": ["created_at", "id", "tag", "updated_at"],
                "type": "object",
                "properties": {
                    "update_text": {
                        "type": "string",
                        "description": "Markdown-formatted string that contains a changelog of this release."
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Date-time of when this repository release resource was created at.",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Date-time of when this repository release was last updated at.",
                        "format": "date-time"
                    },
                    "tag": {
                        "$ref": "#/components/schemas/VersionConstraint"
                    },
                    "id": {
                        "$ref": "#/components/schemas/Snowflake"
                    }
                },
                "description": "Represents a Repository Release resource. Releases are a way to group Helm chart versions as a singular tag that can be fetched from the API server.\nAny repository can have an unlimited amount of tags, but tags cannot clash into each other, so there is no more than release tag per release. Each tag has to be a SemVer 2 comformant string and is validated by the API server."
            },
            "Session": {
                "required": ["access_token", "refresh_token", "session_id", "user_id"],
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    },
                    "access_token": {
                        "type": "string"
                    },
                    "session_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "description": "Represents a session token object. This is how sessions are stored when authenticating to charted-server."
            },
            "Snowflake": {
                "minLength": 15,
                "type": "integer",
                "description": "A unique identifier that points to a User, Repository, or Organization resource",
                "format": "int64"
            },
            "StringOrImportValue": {
                "type": "object",
                "description": "ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "$ref": "#/components/schemas/ImportValue"
                    }
                ]
            },
            "Unit": {
                "type": "object",
                "description": "Data that is sent out to the recipient, this can be any unstructured object that is returned from the API, or `null` if none is present."
            },
            "User": {
                "required": ["admin", "created_at", "id", "updated_at", "username", "verified_publisher"],
                "type": "object",
                "properties": {
                    "verified_publisher": {
                        "type": "boolean",
                        "description": "Whether if this User is a Verified Publisher or not."
                    },
                    "gravatar_email": {
                        "type": "string",
                        "description": "Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar"
                    },
                    "description": {
                        "type": "string",
                        "description": "Short description about this user, can be `null` if none was provided."
                    },
                    "avatar_hash": {
                        "type": "string",
                        "description": "Unique hash to locate a user's avatar, this also includes the extension that this avatar is, i.e, `png`."
                    },
                    "created_at": {
                        "type": "string",
                        "description": "Date of when this user was registered to this instance",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "description": "Date of when the server has last updated this user",
                        "format": "date-time"
                    },
                    "username": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "admin": {
                        "type": "boolean",
                        "description": "Whether if this User is an Administrator of this instance"
                    },
                    "name": {
                        "type": "string",
                        "description": "Display name for this user, it should be displayed as '{name} (@{username})' or just '@{username}' if there is no display name"
                    },
                    "id": {
                        "$ref": "#/components/schemas/Snowflake"
                    }
                },
                "description": "Represents an account that can own repositories and organizations"
            },
            "UserLoginPayload": {
                "required": ["password"],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "description": "Username to authenticate as. This is mutually exclusive with `email`."
                    },
                    "password": {
                        "type": "string",
                        "description": "Raw password to authenticate the user as."
                    },
                    "email": {
                        "type": "string",
                        "description": "Email to authenticate a user as, this is mutually exclusive with `username`."
                    }
                }
            },
            "VersionConstraint": {
                "type": "object",
                "description": "The version of the chart."
            }
        },
        "securitySchemes": {
            "SessionToken": {
                "type": "http",
                "description": "Session token from the POST /users/login endpoint",
                "in": "header",
                "scheme": "Bearer",
                "bearerFormat": "Bearer"
            },
            "ApiKey": {
                "type": "apiKey",
                "in": "header",
                "bearerFormat": "ApiKey"
            },
            "Basic": {
                "type": "http",
                "description": "Basic authentication",
                "in": "header",
                "scheme": "Basic",
                "bearerFormat": "Basic"
            }
        }
    }
}
