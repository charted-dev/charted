{
  "openapi": "3.0.1",
  "info": {
    "title": "charted-server",
    "termsOfService": "https://charts.noelware.org/legal/tos",
    "contact": { "name": "Noelware", "url": "https://noelware.org", "email": "team@noelware.org" },
    "license": { "name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.txt" },
    "version": "0.4.0-nightly"
  },
  "externalDocs": { "url": "https://charts.noelware.org/docs" },
  "servers": [{ "url": "https://charts.noelware.org/api" }, { "url": "http://localhost:3651" }],
  "paths": {
    "/": {
      "get": {
        "summary": "Generic main entrypoint",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api#GET-/" },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OkMainResponse" },
                "example": {
                  "success": true,
                  "data": {
                    "message": "Hello, world! ðŸ‘‹",
                    "tagline": "You know, for Helm charts?",
                    "docs": "https://charts.noelware.org/docs"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/features": {
      "get": {
        "summary": "All the enabled features that are enabled on this instance",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api#GET-/features" },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FeaturesResponse" },
                "example": {
                  "success": true,
                  "data": {
                    "dockerRegistry": true,
                    "registrations": false,
                    "auditLogs": true,
                    "webhooks": false,
                    "integrations": {},
                    "search": true,
                    "inviteOnly": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/heartbeat": {
      "get": {
        "summary": "Endpoint to signify that the server is healthy",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api#GET-/heartbeat" },
        "responses": { "200": { "content": { "text/plain": { "schema": { "type": "string" }, "example": "OK" } } } }
      }
    },
    "/info": {
      "get": {
        "summary": "Returns additional information about the server",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api#GET-/info" },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/OkInfoResponse" },
                "example": {
                  "success": true,
                  "data": {
                    "distribution": "GIT",
                    "commitHash": "f6c845ac",
                    "buildDate": "2023-01-23T01:39:14Z",
                    "product": "charted-server",
                    "version": "0.4.0-nightly",
                    "vendor": "Noelware"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Returns the Prometheus metrics, if enabled on the server",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api#GET-/metrics" },
        "responses": {
          "200": { "content": { "text/plain; version=0.0.4; charset=utf-8": { "schema": { "type": "string" } } } },
          "404": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } } }
        }
      }
    },
    "/indexes": {
      "get": {
        "summary": "Returns a user or organization's chart index",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/indexes#GET-/:idOrName" },
        "responses": {
          "200": { "content": { "text/yaml": { "schema": { "$ref": "#/components/schemas/ChartIndexYaml" } } } },
          "404": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } } }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Generic entrypoint to the Users REST handler",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users" },
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkMainUserResponse" } } }
          }
        }
      },
      "put": {
        "description": "Registers a new user if the server accepts registrations",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#PUT-/users" },
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/NewUserBody" } } },
          "required": true
        },
        "responses": {
          "201": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUnit" } } } },
          "400": {
            "description": "If the session token or API key couldn't be validated or if the Authorization header was malformed",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "401": {
            "description": "If the request couldn't be authorized to perform this action due to an expired access/refresh session token, or an invalid password (in Basic authentication)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "403": {
            "description": "â€¢ If the given API key has missing scopes that this route requires,\nâ€¢ If the username and password didn't match in Basic authentication,\nâ€¢ If there was no `Authorization` header present in the request",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "500": {
            "description": "Internal Server Error (it can happen)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "406": {
            "description": "If the payload couldn't be accepted due to:\n â€¢ If the username or email given was already taken,\n â€¢ If the header wasn't formed as base64 encoded 'username:password' (in Basic authentication),\n â€¢ Unknown JWT exception had occurred (in Session authentication),\n â€¢ The request header didn't follow the '[Type] [Token]' scheme\n â€¢ `Type` is \"Basic\", \"ApiKey\", or \"Bearer\"\n â€¢ `Token` is the actual token or base64-encoded of 'username:password' if `Type` is Basic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        }
      },
      "delete": {
        "description": "Delete the current user off the database",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#DELETE-/users" },
        "responses": {
          "202": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUnit" } } } },
          "400": {
            "description": "If the session token or API key couldn't be validated or if the Authorization header was malformed",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "401": {
            "description": "If the request couldn't be authorized to perform this action due to an expired access/refresh session token, or an invalid password (in Basic authentication)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "403": {
            "description": "â€¢ If the given API key has missing scopes that this route requires,\nâ€¢ If the username and password didn't match in Basic authentication,\nâ€¢ If there was no `Authorization` header present in the request",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "406": {
            "description": "If the Authorization request header couldn't be accepted due to:\n â€¢ If the header wasn't formed as base64 encoded 'username:password' (in Basic authentication),\n â€¢ Unknown JWT exception had occurred (in Session authentication),\n â€¢ The request header didn't follow the '[Type] [Token]' scheme\n â€¢ `Type` is \"Basic\", \"ApiKey\", or \"Bearer\"\n â€¢ `Token` is the actual token or base64-encoded of 'username:password' if `Type` is Basic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "500": {
            "description": "Internal Server Error (it can happen)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        },
        "security": [{ "sessionToken": [] }]
      },
      "patch": {
        "description": "Updates any user metadata in the database.",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#PATCH-/users" },
        "requestBody": {
          "content": { "application/json": { "schema": { "$ref": "#/components/schemas/UpdateUserBody" } } },
          "required": true
        },
        "responses": {
          "201": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUnit" } } } },
          "400": {
            "description": "If the session token or API key couldn't be validated or if the Authorization header was malformed",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "401": {
            "description": "If the request couldn't be authorized to perform this action due to an expired access/refresh session token, or an invalid password (in Basic authentication)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "403": {
            "description": "â€¢ If the given API key has missing scopes that this route requires,\nâ€¢ If the username and password didn't match in Basic authentication,\nâ€¢ If there was no `Authorization` header present in the request",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "500": {
            "description": "Internal Server Error (it can happen)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "406": {
            "description": "If the payload couldn't be accepted due to:\n â€¢ If the username or email given was already taken,\n â€¢ If the header wasn't formed as base64 encoded 'username:password' (in Basic authentication),\n â€¢ Unknown JWT exception had occurred (in Session authentication),\n â€¢ The request header didn't follow the '[Type] [Token]' scheme\n â€¢ `Type` is \"Basic\", \"ApiKey\", or \"Bearer\"\n â€¢ `Token` is the actual token or base64-encoded of 'username:password' if `Type` is Basic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        },
        "security": [{ "sessionToken": [] }, { "apiKey": [] }]
      }
    },
    "/users/@me": {
      "get": {
        "description": "Returns the current user that is logged in.",
        "externalDocs": { "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users/@me" },
        "responses": {
          "200": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUser" } } } },
          "400": {
            "description": "If the session token or API key couldn't be validated or if the Authorization header was malformed",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "401": {
            "description": "If the request couldn't be authorized to perform this action due to an expired access/refresh session token, or an invalid password (in Basic authentication)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "403": {
            "description": "â€¢ If the given API key has missing scopes that this route requires,\nâ€¢ If the username and password didn't match in Basic authentication,\nâ€¢ If there was no `Authorization` header present in the request",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "406": {
            "description": "If the Authorization request header couldn't be accepted due to:\n â€¢ If the header wasn't formed as base64 encoded 'username:password' (in Basic authentication),\n â€¢ Unknown JWT exception had occurred (in Session authentication),\n â€¢ The request header didn't follow the '[Type] [Token]' scheme\n â€¢ `Type` is \"Basic\", \"ApiKey\", or \"Bearer\"\n â€¢ `Token` is the actual token or base64-encoded of 'username:password' if `Type` is Basic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "500": {
            "description": "Internal Server Error (it can happen)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        },
        "security": [{ "sessionToken": [] }, { "apiKey": [] }]
      }
    },
    "/users/@me/connections": {
      "get": {
        "description": "Returns all the current user's connections that they have explicitly connected with.",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users/@me/connections"
        },
        "responses": {
          "200": {
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUserConnections" } } }
          },
          "400": {
            "description": "If the session token or API key couldn't be validated or if the Authorization header was malformed",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "401": {
            "description": "If the request couldn't be authorized to perform this action due to an expired access/refresh session token, or an invalid password (in Basic authentication)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "403": {
            "description": "â€¢ If the given API key has missing scopes that this route requires,\nâ€¢ If the username and password didn't match in Basic authentication,\nâ€¢ If there was no `Authorization` header present in the request",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "406": {
            "description": "If the Authorization request header couldn't be accepted due to:\n â€¢ If the header wasn't formed as base64 encoded 'username:password' (in Basic authentication),\n â€¢ Unknown JWT exception had occurred (in Session authentication),\n â€¢ The request header didn't follow the '[Type] [Token]' scheme\n â€¢ `Type` is \"Basic\", \"ApiKey\", or \"Bearer\"\n â€¢ `Token` is the actual token or base64-encoded of 'username:password' if `Type` is Basic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "500": {
            "description": "Internal Server Error (it can happen)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        },
        "security": [{ "sessionToken": [] }, { "apiKey": [] }]
      }
    },
    "/users/@me/avatars": {
      "post": {
        "description": "Updates the current logged-in user's avatar. If more parts were used in the request, it will be discarded\n and the first part that it can poll is the one that is used.",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users/@me/avatars"
        },
        "responses": {
          "202": {
            "description": "If the avatar was successfully updated",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUnit" } } }
          },
          "401": {
            "description": "If the request couldn't be authorized to perform this action due to an expired access/refresh session token, or an invalid password (in Basic authentication)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "403": {
            "description": "â€¢ If the given API key has missing scopes that this route requires,\nâ€¢ If the username and password didn't match in Basic authentication,\nâ€¢ If there was no `Authorization` header present in the request",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "500": {
            "description": "Internal Server Error (it can happen)",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "400": {
            "description": "If this request fails due to:\n â€¢ The `Content-Type` header was not \"multipart/form-data\",\n â€¢ If there were no form data parts available to consume,\n â€¢ If the session token or API key couldn't be validated,\n â€¢ If the Authorization header was malformed.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          },
          "406": {
            "description": "Whether if the request payload was not accepted due to:\n â€¢ If the form data part was not a FileItem,\n â€¢ If the Authorization header wasn't formed as base64 encoded 'username:password' (in Basic authentication),\n â€¢ Unknown JWT exception had occurred (in Session authentication),\n â€¢ The request header didn't follow the '[Type] [Token]' scheme\n â€¢ `Type` is \"Basic\", \"ApiKey\", or \"Bearer\"\n â€¢ `Token` is the actual token or base64-encoded of 'username:password' if `Type` is Basic",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        },
        "security": [{ "sessionToken": [] }, { "apiKey": [] }]
      }
    },
    "/users/@me/sessions/{sessionId}": {
      "delete": {
        "description": "Deletes the current session from Redis permanently",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users/@me/sessions/{sessionId}"
        },
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "description": "The session UUID that should be deleted",
            "required": true,
            "schema": { "type": "string" }
          }
        ]
      }
    },
    "/users/{idOrName}": {
      "get": {
        "description": "Finds a user by their ID or username",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users/{idOrName}"
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "description": "The user's ID or name to search for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUser" } } } },
          "404": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } } }
        }
      }
    },
    "/users/{idOrName}/avatars/current.png": {
      "get": {
        "description": "Returns the current user's avatar by their gravatar email or self-uploaded image, defaults to Identicons if no avatar was found",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users/@me/avatars/current.png"
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "description": "The user's ID or name to search for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/png": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpeg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/gif": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } }
            }
          },
          "404": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } } }
        }
      }
    },
    "/users/{idOrName}/avatars/{hash}": {
      "get": {
        "description": "Returns the current user's avatar by their avatar hash, gravatar email, or self-uploaded image, defaults to Identicons if no avatar was found",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users#GET-/users/@me/sessions/{sessionId}"
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "description": "The user's ID or name to search for",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "hash",
            "in": "path",
            "description": "Avatar hash to look for",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "image/png": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpeg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/gif": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } }
            }
          },
          "404": { "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } } }
        }
      }
    },
    "/repositories/{idOrName}/icons/current.png": {
      "get": {
        "description": "Returns the current repository's icon, if any. Otherwise, a 404 will occur.",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/repositories#GET-/:idOrName/icons/current.png"
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "description": "The repository's snowflake ID or name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The actual avatar as an image file",
            "content": {
              "image/png": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpeg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/gif": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } }
            }
          },
          "404": {
            "description": "If the icon was not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        }
      }
    },
    "/repositories/{idOrName}/icons/{hash}": {
      "get": {
        "description": "Returns a repository's icon by its hash, if any. Otherwise, a 404 will occur.",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/repositories#GET-/:idOrName/icons/:hash"
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "description": "The repository's snowflake ID or name",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "name": "hash",
            "in": "path",
            "description": "The icon hash as `<key>.<ext>`",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "The actual icon as an image file",
            "content": {
              "image/png": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/jpeg": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } },
              "image/gif": { "schema": { "type": "array", "items": { "type": "string", "format": "byte" } } }
            }
          },
          "404": {
            "description": "If the avatar was not found",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        }
      }
    },
    "/repositories/{idOrName}/icons": {
      "post": {
        "description": "Updates the repository's icon. If more parts were used in this request, the server will filter\n through 5 requests (at most), retrieve the first part that matches a file, and discards the rest,\n or bails if no parts or more than 5 parts were sent.",
        "externalDocs": {
          "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/repositories#POST-/:idOrName/icons"
        },
        "parameters": [
          {
            "name": "idOrName",
            "in": "path",
            "description": "The repository's snowflake ID or name",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "202": {
            "description": "If the repository icon update was a success",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/OkUnit" } } }
          },
          "400": {
            "description": "If the request was not a `multipart/form-data` request, or if there were no parts available, or if there were more 5 parts included in this request.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Err" } } }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiError": {
        "type": "object",
        "properties": { "code": { "type": "string" }, "message": { "type": "string" }, "detail": { "type": "object" } }
      },
      "ChartDependency": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "version": { "type": "string" },
          "repository": { "type": "string" },
          "condition": { "type": "string" },
          "tags": { "type": "array", "items": { "type": "string" } },
          "importValues": { "type": "array", "items": { "$ref": "#/components/schemas/StringOrImportValue" } },
          "alias": { "type": "string" }
        }
      },
      "ChartIndexSpec": {
        "type": "object",
        "properties": {
          "apiVersion": { "type": "string", "enum": ["V2", "V3"] },
          "name": { "type": "string" },
          "version": { "type": "string" },
          "kubeVersion": { "type": "string" },
          "description": { "type": "string" },
          "type": { "type": "string", "enum": ["APPLICATION", "LIBRARY", "OPERATOR"] },
          "keywords": { "type": "array", "items": { "type": "string" } },
          "home": { "type": "string" },
          "sources": { "type": "array", "items": { "type": "string" } },
          "dependencies": { "type": "array", "items": { "$ref": "#/components/schemas/ChartDependency" } },
          "maintainers": { "type": "array", "items": { "$ref": "#/components/schemas/ChartMaintainer" } },
          "icon": { "type": "string" },
          "appVersion": { "type": "string" },
          "deprecated": { "type": "boolean" },
          "annotations": { "type": "object", "additionalProperties": { "type": "string" } },
          "urls": { "type": "array", "items": { "type": "string" } },
          "created": { "$ref": "#/components/schemas/Instant" },
          "removed": { "type": "boolean" },
          "digest": { "type": "string" }
        }
      },
      "ChartIndexYaml": {
        "type": "object",
        "properties": {
          "apiVersion": { "type": "string" },
          "entries": {
            "type": "object",
            "additionalProperties": { "type": "array", "items": { "$ref": "#/components/schemas/ChartIndexSpec" } }
          },
          "generated": { "$ref": "#/components/schemas/Instant" }
        }
      },
      "ChartMaintainer": {
        "type": "object",
        "properties": { "name": { "type": "string" }, "email": { "type": "string" }, "url": { "type": "string" } }
      },
      "Err": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "errors": { "type": "array", "items": { "$ref": "#/components/schemas/ApiError" } }
        }
      },
      "FeaturesResponse": {
        "type": "object",
        "properties": {
          "dockerRegistry": { "type": "boolean" },
          "registrations": { "type": "boolean" },
          "auditLogs": { "type": "boolean" },
          "webhooks": { "type": "boolean" },
          "integrations": { "type": "object", "additionalProperties": { "type": "boolean" } },
          "search": { "type": "boolean" },
          "inviteOnly": { "type": "boolean" }
        }
      },
      "ImportValue": {
        "type": "object",
        "properties": { "child": { "type": "string" }, "parent": { "type": "string" } }
      },
      "InfoResponse": {
        "type": "object",
        "properties": {
          "distribution": { "type": "string", "enum": ["KUBERNETES", "UNKNOWN", "DOCKER", "AUR", "RPM", "DEB", "GIT"] },
          "commitHash": { "type": "string" },
          "buildDate": { "type": "string" },
          "product": { "type": "string" },
          "version": { "type": "string" },
          "vendor": { "type": "string" }
        }
      },
      "Instant": {
        "type": "object",
        "properties": {
          "epochSeconds": { "type": "integer", "format": "int64" },
          "value$kotlinx_datetime": { "type": "string", "format": "date-time" },
          "nanosecondsOfSecond": { "type": "integer", "format": "int32" }
        }
      },
      "LocalDate": {
        "type": "object",
        "properties": {
          "year": { "type": "integer", "format": "int32" },
          "dayOfMonth": { "type": "integer", "format": "int32" },
          "month": {
            "type": "string",
            "enum": [
              "JANUARY",
              "FEBRUARY",
              "MARCH",
              "APRIL",
              "MAY",
              "JUNE",
              "JULY",
              "AUGUST",
              "SEPTEMBER",
              "OCTOBER",
              "NOVEMBER",
              "DECEMBER"
            ]
          },
          "dayOfWeek": {
            "type": "string",
            "enum": ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]
          },
          "dayOfYear": { "type": "integer", "format": "int32" },
          "value$kotlinx_datetime": { "type": "string", "format": "date" },
          "monthNumber": { "type": "integer", "format": "int32" }
        }
      },
      "LocalDateTime": {
        "type": "object",
        "properties": {
          "time": { "$ref": "#/components/schemas/LocalTime" },
          "year": { "type": "integer", "format": "int32" },
          "dayOfMonth": { "type": "integer", "format": "int32" },
          "hour": { "type": "integer", "format": "int32" },
          "minute": { "type": "integer", "format": "int32" },
          "second": { "type": "integer", "format": "int32" },
          "month": {
            "type": "string",
            "enum": [
              "JANUARY",
              "FEBRUARY",
              "MARCH",
              "APRIL",
              "MAY",
              "JUNE",
              "JULY",
              "AUGUST",
              "SEPTEMBER",
              "OCTOBER",
              "NOVEMBER",
              "DECEMBER"
            ]
          },
          "dayOfWeek": {
            "type": "string",
            "enum": ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]
          },
          "dayOfYear": { "type": "integer", "format": "int32" },
          "date": { "$ref": "#/components/schemas/LocalDate" },
          "value$kotlinx_datetime": { "type": "string", "format": "date-time" },
          "monthNumber": { "type": "integer", "format": "int32" },
          "nanosecond": { "type": "integer", "format": "int32" }
        }
      },
      "LocalTime": {
        "type": "object",
        "properties": {
          "hour": { "type": "integer", "format": "int32" },
          "minute": { "type": "integer", "format": "int32" },
          "second": { "type": "integer", "format": "int32" },
          "value$kotlinx_datetime": { "$ref": "#/components/schemas/LocalTime" },
          "nanosecond": { "type": "integer", "format": "int32" }
        }
      },
      "MainResponse": {
        "type": "object",
        "properties": { "message": { "type": "string" }, "tagline": { "type": "string" }, "docs": { "type": "string" } }
      },
      "MainUserResponse": {
        "type": "object",
        "properties": { "message": { "type": "string" }, "docsUrl": { "type": "string" } }
      },
      "NewUserBody": {
        "type": "object",
        "properties": {
          "username": { "type": "string" },
          "password": { "type": "string" },
          "email": { "type": "string" }
        }
      },
      "OkInfoResponse": {
        "type": "object",
        "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/InfoResponse" } }
      },
      "OkMainResponse": {
        "type": "object",
        "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/MainResponse" } }
      },
      "OkMainUserResponse": {
        "type": "object",
        "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/MainUserResponse" } }
      },
      "OkUnit": {
        "type": "object",
        "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/Unit" } }
      },
      "OkUser": {
        "type": "object",
        "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/User" } }
      },
      "OkUserConnections": {
        "type": "object",
        "properties": { "success": { "type": "boolean" }, "data": { "$ref": "#/components/schemas/UserConnections" } }
      },
      "StringOrImportValue": {
        "type": "object",
        "properties": {
          "stringOrNull": { "type": "string" },
          "importValueOrNull": { "$ref": "#/components/schemas/ImportValue" }
        }
      },
      "Unit": { "type": "object" },
      "UpdateUserBody": {
        "type": "object",
        "properties": {
          "gravatarEmail": { "type": "string" },
          "description": { "type": "string" },
          "username": { "type": "string" },
          "password": { "type": "string" },
          "email": { "type": "string" },
          "name": { "type": "string" }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "gravatarEmail": { "type": "string" },
          "description": { "type": "string" },
          "avatarHash": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/LocalDateTime" },
          "updatedAt": { "$ref": "#/components/schemas/LocalDateTime" },
          "username": { "type": "string" },
          "flags": { "type": "integer", "format": "int64" },
          "name": { "type": "string" },
          "id": { "type": "integer", "format": "int64" }
        }
      },
      "UserConnections": {
        "type": "object",
        "properties": {
          "noelwareAccountID": { "type": "integer", "format": "int64" },
          "googleAccountID": { "type": "string" },
          "githubAccountID": { "type": "string" },
          "appleAccountID": { "type": "string" },
          "createdAt": { "$ref": "#/components/schemas/LocalDateTime" },
          "updatedAt": { "$ref": "#/components/schemas/LocalDateTime" },
          "id": { "type": "integer", "format": "int64" }
        }
      }
    },
    "securitySchemes": {
      "sessionToken": {
        "type": "http",
        "description": "Security scheme to use a JWT (JSON Web Token) as authorization of a user.",
        "name": "Session Token",
        "in": "header",
        "scheme": "Bearer",
        "bearerFormat": "jwt"
      },
      "apiKey": {
        "type": "apiKey",
        "description": "Security scheme to use a generated API Key to do operations with the API",
        "name": "API Key",
        "in": "header",
        "scheme": "ApiKey"
      }
    }
  }
}
