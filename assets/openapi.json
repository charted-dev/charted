{
    "openapi": "3.0.1",
    "info": {
        "title": "charted-server",
        "description": "üêª‚Äç‚ùÑÔ∏èüì¶ Free, open source, and reliable Helm Chart registry made in Kotlin",
        "termsOfService": "https://charts.noelware.org/legal/tos",
        "contact": {
            "name": "Noelware, LLC.",
            "url": "https://noelware.org",
            "email": "team@noelware.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "v0.4.0-nightly"
    },
    "externalDocs": {
        "url": "https://charts.noelware.org/docs/server/0.4.0-nightly"
    },
    "servers": [
        {
            "url": "https://charts.noelware.org/api",
            "description": "Official Instance"
        },
        {
            "url": "http://0.0.0.0:3651",
            "description": "Main Instance"
        }
    ],
    "paths": {
        "/_openapi": {
            "description": "Endpoint for the OpenAPI specification for charted-server",
            "get": {
                "description": "Gets the document in JSON format or YAML format",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/_openapi"
                },
                "parameters": [
                    {
                        "name": "format",
                        "in": "query",
                        "description": "Format to use",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pretty",
                        "in": "query",
                        "description": "Only applicable to `?format=json` -- if the document should be pretty or not",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/_swagger": {
            "description": "Endpoint for Swagger UI",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/_swagger"
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/html": {}
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Generic entrypoint for the Users API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseMainUserResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Welcome to the Users API!",
                                        "docs_url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a user that can interact with this instance",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/users"
                },
                "responses": {
                    "201": {
                        "description": "The created user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the server doesn't allow registrations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "If the configured session manager is not the local one",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the current authentication user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/users"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users": {
            "get": {
                "description": "Generic entrypoint for the Users API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseMainUserResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Welcome to the Users API!",
                                        "docs_url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/users"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates a user that can interact with this instance",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/users"
                },
                "responses": {
                    "201": {
                        "description": "The created user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the server doesn't allow registrations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "501": {
                        "description": "If the configured session manager is not the local one",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the current authentication user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/users"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "Generic entrypoint for the Repositories API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/organizations"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MainOrganizationResponse"
                                },
                                "example": {
                                    "message": "Welcome to the Organizations API!",
                                    "docs": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/organizations"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates an organization resource",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/organizations"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Created organization resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                },
                                "example": {
                                    "verified_publisher": true,
                                    "display_name": "Noelware, LLC.",
                                    "created_at": "2023-04-08T02:37:53.741502369",
                                    "updated_at": "2023-04-08T02:37:53.741532044",
                                    "private": false,
                                    "owner": {
                                        "verified_publisher": true,
                                        "created_at": "2023-04-08T02:37:53.741537324",
                                        "updated_at": "2023-04-08T02:37:53.741541412",
                                        "username": "noel",
                                        "admin": false,
                                        "name": "Noel",
                                        "id": 1
                                    },
                                    "name": "noelware",
                                    "id": 1234
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/organizations": {
            "get": {
                "description": "Generic entrypoint for the Repositories API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/organizations"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MainOrganizationResponse"
                                },
                                "example": {
                                    "message": "Welcome to the Organizations API!",
                                    "docs": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/organizations"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates an organization resource",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/organizations"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Created organization resource",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Organization"
                                },
                                "example": {
                                    "verified_publisher": true,
                                    "display_name": "Noelware, LLC.",
                                    "created_at": "2023-04-08T02:37:53.741502369",
                                    "updated_at": "2023-04-08T02:37:53.741532044",
                                    "private": false,
                                    "owner": {
                                        "verified_publisher": true,
                                        "created_at": "2023-04-08T02:37:53.741537324",
                                        "updated_at": "2023-04-08T02:37:53.741541412",
                                        "username": "noel",
                                        "admin": false,
                                        "name": "Noel",
                                        "id": 1
                                    },
                                    "name": "noelware",
                                    "id": 1234
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}.tar.gz": {
            "get": {
                "description": "Gets a repository release's tarball, if the version exists",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}.tar.gz"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the tar resource wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Tar resource itself",
                        "content": {
                            "application/tar+gzip": {}
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a tarball that is a valid Helm tarball that was generated from the `helm package` command.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/repositories/{id}/releases/{version}.tar.gz"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to use as the tarball name",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Tarball was stored successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid multipart/form-data object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "NOT_FILE_PART",
                                            "message": "Part was not a file."
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}/releases/{version}.tar.gz": {
            "get": {
                "description": "Gets a repository release's tarball, if the version exists",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}.tar.gz"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the tar resource wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Tar resource itself",
                        "content": {
                            "application/tar+gzip": {}
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Uploads a tarball that is a valid Helm tarball that was generated from the `helm package` command.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/repositories/{id}/releases/{version}.tar.gz"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to use as the tarball name",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Tarball was stored successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid multipart/form-data object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "NOT_FILE_PART",
                                            "message": "Part was not a file."
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/features": {
            "get": {
                "description": "Retrieve all the server instance's features",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/features"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkFeaturesResponse"
                                },
                                "example": {
                                    "docker_registry": false,
                                    "registrations": true,
                                    "audit_logs": false,
                                    "webhooks": false,
                                    "is_invite_only": false,
                                    "integrations": {},
                                    "search": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/features": {
            "get": {
                "description": "Retrieve all the server instance's features",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/features"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkFeaturesResponse"
                                },
                                "example": {
                                    "docker_registry": false,
                                    "registrations": true,
                                    "audit_logs": false,
                                    "webhooks": false,
                                    "is_invite_only": false,
                                    "integrations": {},
                                    "search": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/repositories/{repoIdOrName}": {
            "get": {
                "description": "Fetch a single repository from a user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}/repositories/{repoIdOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Name or Snowflake to query a user",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "repoIdOrName",
                        "in": "path",
                        "description": "Name or Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "if a user or repository couldn't be found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseListRepository"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}/repositories/{repoIdOrName}": {
            "get": {
                "description": "Fetch a single repository from a user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}/repositories/{repoIdOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Name or Snowflake to query a user",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "repoIdOrName",
                        "in": "path",
                        "description": "Name or Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "if a user or repository couldn't be found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseListRepository"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/readme": {
            "get": {
                "description": "Retrieve a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "README content in Markdown",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "# Some Markdown\n> Hopefully..."
                            }
                        }
                    },
                    "404": {
                        "description": "If a repository wasn't found or if there is no README",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates or updates a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "README was updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Creates or updates a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "README was updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}/readme": {
            "get": {
                "description": "Retrieve a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "README content in Markdown",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "# Some Markdown\n> Hopefully..."
                            }
                        }
                    },
                    "404": {
                        "description": "If a repository wasn't found or if there is no README",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates or updates a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "README was updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Creates or updates a repository's README",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/repositories/{id}/readme"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake to query a repository",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "README was updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}/values.yaml": {
            "get": {
                "description": "Returns the given Chart.yaml file of this release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/Chart.yaml"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the Chart.yaml file wasn't found for this release",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Chart.yaml file",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}/releases/{version}/values.yaml": {
            "get": {
                "description": "Returns the given Chart.yaml file of this release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/Chart.yaml"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the Chart.yaml file wasn't found for this release",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Chart.yaml file",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/repositories/{id}": {
            "patch": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PATCH-/users/{idOrName}/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}/repositories/{id}": {
            "patch": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PATCH-/users/{idOrName}/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases": {
            "put": {
                "description": "Creates a repository release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/repositories/{id}/releases"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Release resource was created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepositoryRelease"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}/releases": {
            "put": {
                "description": "Creates a repository release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/repositories/{id}/releases"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Release resource was created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepositoryRelease"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/logout": {
            "delete": {
                "description": "Logs out of the current session",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/users/@me/logout"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The session was deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me/logout": {
            "delete": {
                "description": "Logs out of the current session",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/users/@me/logout"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The session was deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apikeys": {
            "get": {
                "description": "Returns all of the API key resources created by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/apikeys"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListApiKeys"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates an API key under the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/apikeys"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseApiKeys"
                                },
                                "example": {
                                    "data": {
                                        "description": "API key to automate some stuff!",
                                        "expires_in": "2023-05-02T02:37:54.111497315",
                                        "bits": 536870913,
                                        "owner": {
                                            "verified_publisher": true,
                                            "created_at": "2023-04-08T02:37:54.111883960",
                                            "updated_at": "2023-04-08T02:37:54.111891595",
                                            "username": "noel",
                                            "admin": true,
                                            "name": "Noel",
                                            "id": 1
                                        },
                                        "name": "some-api-key",
                                        "id": 1234
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/apikeys": {
            "get": {
                "description": "Returns all of the API key resources created by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/apikeys"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListApiKeys"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Creates an API key under the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/apikeys"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseApiKeys"
                                },
                                "example": {
                                    "data": {
                                        "description": "API key to automate some stuff!",
                                        "expires_in": "2023-05-02T02:37:54.111497315",
                                        "bits": 536870913,
                                        "owner": {
                                            "verified_publisher": true,
                                            "created_at": "2023-04-08T02:37:54.111883960",
                                            "updated_at": "2023-04-08T02:37:54.111891595",
                                            "username": "noel",
                                            "admin": true,
                                            "name": "Noel",
                                            "id": 1
                                        },
                                        "name": "some-api-key",
                                        "id": 1234
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me": {
            "get": {
                "description": "Gets the current authentication user's metadata",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/@me"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Current authentication user's metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me": {
            "get": {
                "description": "Gets the current authentication user's metadata",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/@me"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Current authentication user's metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/repositories": {
            "get": {
                "description": "Returns all of an user's repositories",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}/repositories"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseListRepository"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "if an organization couldn't be found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}/repositories": {
            "get": {
                "description": "Returns all of an user's repositories",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}/repositories"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseListRepository"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "if an organization couldn't be found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/avatars/{hash?}": {
            "get": {
                "description": "Returns the current authenticated user's avatar, if any.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}/avatars/{hash?}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "The snowflake or username to find",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Avatar hash, if this was not provided, then it will find the latest one.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "The avatar itself in bytes",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}/avatars/{hash?}": {
            "get": {
                "description": "Returns the current authenticated user's avatar, if any.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}/avatars/{hash?}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "The snowflake or username to find",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Avatar hash, if this was not provided, then it will find the latest one.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "The avatar itself in bytes",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    }
                }
            }
        },
        "/heartbeat": {
            "description": "Heartbeat REST handler, to check server availability",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/heartbeat"
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "Ok."
                            }
                        }
                    }
                }
            }
        },
        "/v1/heartbeat": {
            "description": "Heartbeat REST handler, to check server availability",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/heartbeat"
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                },
                                "example": "Ok."
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/sessions": {
            "get": {
                "description": "Lists all the available sessions from the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/@me/sessions"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListSession"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me/sessions": {
            "get": {
                "description": "Lists all the available sessions from the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/@me/sessions"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkListSession"
                                },
                                "example": {
                                    "data": [],
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apikeys/{nameOrId}": {
            "get": {
                "description": "Returns a single API key resource owned by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/apikeys/{nameOrId}"
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the given API key to delete, or a Snowflake value to delete the API key by",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "API_KEY_NOT_FOUND",
                                            "message": "API key with name 'noel-is-cute' was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkApiKeys"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an API key resource off the current authenticated user's account",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/apikeys/{nameOrId}"
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the given API key to delete, or a Snowflake value to delete the API key by",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "API key resource with name or ID was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "API_KEY_NOT_FOUND",
                                            "message": "API key with name 'noel-is-cute' was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "API key resource was deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/apikeys/{nameOrId}": {
            "get": {
                "description": "Returns a single API key resource owned by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/apikeys/{nameOrId}"
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the given API key to delete, or a Snowflake value to delete the API key by",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "API_KEY_NOT_FOUND",
                                            "message": "API key with name 'noel-is-cute' was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkApiKeys"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an API key resource off the current authenticated user's account",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/apikeys/{nameOrId}"
                },
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the given API key to delete, or a Snowflake value to delete the API key by",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "API key resource with name or ID was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "API_KEY_NOT_FOUND",
                                            "message": "API key with name 'noel-is-cute' was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "API key resource was deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "description": "Login into charted-server with a username and password",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/users/login"
                },
                "responses": {
                    "201": {
                        "description": "Newly created session that was created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the user wasn't found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "UNKNOWN_USER",
                                            "message": "User with username [noel] was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/login": {
            "post": {
                "description": "Login into charted-server with a username and password",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/users/login"
                },
                "responses": {
                    "201": {
                        "description": "Newly created session that was created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the user wasn't found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "UNKNOWN_USER",
                                            "message": "User with username [noel] was not found"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/sessions/refresh_token": {
            "post": {
                "description": "Refreshes the current authenticated session's access token with the refresh token.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/users/@me/sessions/refresh_token"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the access token is still too new or if the passed in Authorization header didn't use the refresh token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me/sessions/refresh_token": {
            "post": {
                "description": "Refreshes the current authenticated session's access token with the refresh token.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/users/@me/sessions/refresh_token"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkSession"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the access token is still too new or if the passed in Authorization header didn't use the refresh token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}": {
            "get": {
                "description": "Returns a repository entity with the given ID. Use the /users/{idOrName}/repos/{repoIdOrName} to fetch a user repository with a ID or name, or /organizations/{idOrName}/repos/{repoIdOrName} to fetch a organization repository with a ID or name",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake of the repository to look up",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepository"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a repository",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/repositories/{id}"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The repository was deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "If the `id` path parameter couldn't be into a valid Snowflake",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "UNABLE_TO_PARSE",
                                            "message": "Unable to convert into a Snowflake"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}": {
            "get": {
                "description": "Returns a repository entity with the given ID. Use the /users/{idOrName}/repos/{repoIdOrName} to fetch a user repository with a ID or name, or /organizations/{idOrName}/repos/{repoIdOrName} to fetch a organization repository with a ID or name",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake of the repository to look up",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepository"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a repository",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/repositories/{id}"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "The repository was deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "If the `id` path parameter couldn't be into a valid Snowflake",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "UNABLE_TO_PARSE",
                                            "message": "Unable to convert into a Snowflake"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/avatars": {
            "post": {
                "description": "Updates the current authenticated user's avatar",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/users/@me/avatars"
                },
                "responses": {
                    "202": {
                        "description": "The avatar was successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUnit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If we couldn't find the file part to use, or if the selected part was not a file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me/avatars": {
            "post": {
                "description": "Updates the current authenticated user's avatar",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/POST-/users/@me/avatars"
                },
                "responses": {
                    "202": {
                        "description": "The avatar was successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUnit"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If we couldn't find the file part to use, or if the selected part was not a file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}/templates": {
            "get": {
                "description": "List of all available templates of a given release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/templates"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the tar resource wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "All the templates available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseListString"
                                },
                                "example": {
                                    "data": [
                                        "http://localhost:3651/repositories/1/releases/1.0.2-alpha/templates/statefulset.yaml"
                                    ],
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}/releases/{version}/templates": {
            "get": {
                "description": "List of all available templates of a given release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/templates"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the tar resource wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "All the templates available",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseListString"
                                },
                                "example": {
                                    "data": [
                                        "http://localhost:3651/repositories/1/releases/1.0.2-alpha/templates/statefulset.yaml"
                                    ],
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/indexes/{idOrName}": {
            "get": {
                "description": "Returns a user or organization's chart index",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/indexes/{idOrName}"
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChartIndexYaml"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/indexes/{idOrName}": {
            "get": {
                "description": "Returns a user or organization's chart index",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/indexes/{idOrName}"
                },
                "responses": {
                    "200": {
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChartIndexYaml"
                                }
                            }
                        }
                    },
                    "404": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}": {
            "get": {
                "description": "Retrieves a user from the database",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "The snowflake or username to use",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the provided idOrName parameter wasn't a snowflake or username",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a user by the idOrName parameter was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}": {
            "get": {
                "description": "Retrieves a user from the database",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/{idOrName}"
                },
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "The snowflake or username to use",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkUser"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the provided idOrName parameter wasn't a snowflake or username",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a user by the idOrName parameter was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/info": {
            "description": "Returns basic information about the server",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/info"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse"
                                },
                                "example": {
                                    "distribution": "git",
                                    "commit_sha": "61a2bad6",
                                    "build_date": "2023-04-04T15:42:54-07:00",
                                    "product": "charted-server",
                                    "version": "0.4.0-nightly",
                                    "vendor": "Noelware"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/info": {
            "description": "Returns basic information about the server",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/info"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse"
                                },
                                "example": {
                                    "distribution": "git",
                                    "commit_sha": "61a2bad6",
                                    "build_date": "2023-04-04T15:42:54-07:00",
                                    "product": "charted-server",
                                    "version": "0.4.0-nightly",
                                    "vendor": "Noelware"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/repositories": {
            "put": {
                "description": "Creates a repository that is owned by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/users/@me/repositories"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepository"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me/repositories": {
            "put": {
                "description": "Creates a repository that is owned by the current authenticated user",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/PUT-/users/@me/repositories"
                },
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OkRepository"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/avatars/{hash?}": {
            "get": {
                "description": "Returns the current authenticated user's avatar, if any.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/@me/avatars/{hash?}"
                },
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Avatar hash, if this was not provided, then it will find the latest one.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "The avatar itself in bytes",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    }
                }
            }
        },
        "/v1/users/@me/avatars/{hash?}": {
            "get": {
                "description": "Returns the current authenticated user's avatar, if any.",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/users/@me/avatars/{hash?}"
                },
                "parameters": [
                    {
                        "name": "hash",
                        "in": "path",
                        "description": "Avatar hash, if this was not provided, then it will find the latest one.",
                        "required": false,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "The avatar itself in bytes",
                        "content": {
                            "image/jpeg": {},
                            "image/svg+xml": {},
                            "image/gif": {},
                            "image/png": {}
                        }
                    }
                }
            }
        },
        "/": {
            "description": "Generic main entrypoint",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseMainResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Hello, world! üëã",
                                        "tagline": "You know, for Helm charts?",
                                        "docs": "https://charts.noelware.org/docs"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1": {
            "description": "Generic main entrypoint",
            "get": {
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseMainResponse"
                                },
                                "example": {
                                    "data": {
                                        "message": "Hello, world! üëã",
                                        "tagline": "You know, for Helm charts?",
                                        "docs": "https://charts.noelware.org/docs"
                                    },
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}/Chart.yaml": {
            "get": {
                "description": "Returns the given Chart.yaml file of this release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/Chart.yaml"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the Chart.yaml file wasn't found for this release",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Chart.yaml file",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChartSpec"
                                },
                                "example": {
                                    "apiVersion": "V2",
                                    "name": "charted",
                                    "version": "0.4.0-nightly",
                                    "kubeVersion": ">=1.23",
                                    "keywords": [],
                                    "home": "https://charts.noelware.org",
                                    "sources": [
                                        "https://github.com/charted-dev/charted/tree/main/distribution/helm",
                                        "https://github.com/charted-dev/charted",
                                        "https://charts.noelware.org"
                                    ],
                                    "dependencies": [
                                        {
                                            "name": "postgresql",
                                            "version": "~12.1.5",
                                            "repository": "https://charts.bitnami.com/bitnami",
                                            "condition": "postgresql.enabled",
                                            "tags": [],
                                            "import-values": []
                                        },
                                        {
                                            "name": "redis",
                                            "version": "~17.6.0",
                                            "repository": "https://charts.bitnami.com/bitnami",
                                            "condition": "redis.enabled",
                                            "tags": [],
                                            "import-values": []
                                        }
                                    ],
                                    "maintainers": [
                                        {
                                            "name": "Noel Towa",
                                            "email": "cutie@floofy.dev",
                                            "url": "https://floofy.dev"
                                        },
                                        {
                                            "name": "Noelware Team",
                                            "email": "team@noelware.org",
                                            "url": "https://noelware.org"
                                        }
                                    ],
                                    "icon": "https://cdn.noelware.cloud/branding/charted.png",
                                    "appVersion": "0.4.0-nightly",
                                    "deprecated": false,
                                    "annotations": {
                                        "charts.noelware.org/repository": "https://charts.noelware.org/~/charted/server"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}/releases/{version}/Chart.yaml": {
            "get": {
                "description": "Returns the given Chart.yaml file of this release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/Chart.yaml"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the Chart.yaml file wasn't found for this release",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Chart.yaml file",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChartSpec"
                                },
                                "example": {
                                    "apiVersion": "V2",
                                    "name": "charted",
                                    "version": "0.4.0-nightly",
                                    "kubeVersion": ">=1.23",
                                    "keywords": [],
                                    "home": "https://charts.noelware.org",
                                    "sources": [
                                        "https://github.com/charted-dev/charted/tree/main/distribution/helm",
                                        "https://github.com/charted-dev/charted",
                                        "https://charts.noelware.org"
                                    ],
                                    "dependencies": [
                                        {
                                            "name": "postgresql",
                                            "version": "~12.1.5",
                                            "repository": "https://charts.bitnami.com/bitnami",
                                            "condition": "postgresql.enabled",
                                            "tags": [],
                                            "import-values": []
                                        },
                                        {
                                            "name": "redis",
                                            "version": "~17.6.0",
                                            "repository": "https://charts.bitnami.com/bitnami",
                                            "condition": "redis.enabled",
                                            "tags": [],
                                            "import-values": []
                                        }
                                    ],
                                    "maintainers": [
                                        {
                                            "name": "Noel Towa",
                                            "email": "cutie@floofy.dev",
                                            "url": "https://floofy.dev"
                                        },
                                        {
                                            "name": "Noelware Team",
                                            "email": "team@noelware.org",
                                            "url": "https://noelware.org"
                                        }
                                    ],
                                    "icon": "https://cdn.noelware.cloud/branding/charted.png",
                                    "appVersion": "0.4.0-nightly",
                                    "deprecated": false,
                                    "annotations": {
                                        "charts.noelware.org/repository": "https://charts.noelware.org/~/charted/server"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories": {
            "get": {
                "description": "Generic entrypoint for the Repositories API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MainRepositoryResponse"
                                },
                                "example": {
                                    "message": "Welcome to the Repositories API!",
                                    "docsUrl": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/repositories"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories": {
            "get": {
                "description": "Generic entrypoint for the Repositories API",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MainRepositoryResponse"
                                },
                                "example": {
                                    "message": "Welcome to the Repositories API!",
                                    "docsUrl": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/repositories"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}/releases/{version}/template/{template}": {
            "get": {
                "description": "List of all available templates of a given release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/templates/{template}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the template wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Valid Kubernetes API object as YAML",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}/releases/{version}/template/{template}": {
            "get": {
                "description": "List of all available templates of a given release",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/GET-/repositories/{id}/releases/{version}/templates/{template}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Repository ID to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Valid SemVer version to lookup",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "allow_prerelease",
                        "in": "query",
                        "description": "If we are allowed to look-up for pre-releases if the version path parameter is \"latest\"",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If the template wasn't found",
                        "content": {
                            "application/json": {}
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "Valid Kubernetes API object as YAML",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the version path parameter wasn't a valid SemVer version",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "errors": [
                                        {
                                            "code": "INVALID_SEMVER",
                                            "message": "Version provided 'v1.noel-is-cute' was not a valid SemVer value"
                                        }
                                    ],
                                    "success": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "delete": {
                "description": "Deletes an organization resource",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/organizations/{id}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake ID of the organization resource to delete",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Organization was successfully deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/organizations/{id}": {
            "delete": {
                "description": "Deletes an organization resource",
                "externalDocs": {
                    "url": "https://charts.noelware.org/docs/server/0.4.0-nightly/api/DELETE-/organizations/{id}"
                },
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Snowflake ID of the organization resource to delete",
                        "required": true,
                        "deprecated": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "401": {
                        "description": "If the authentication handler couldn't authorize successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if the `Authorization` header is not present or a REST controller requires the authentication type to be from a Session Token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "If a session couldn't be found based off the authentication details given, or if a user wasn't found (can happen if a user was deleted)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Whether if the `Authorization` header is not in an acceptable format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Err"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "Organization was successfully deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ApiResponseUnit"
                                },
                                "example": {
                                    "success": true
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ApiError": {
                "required": ["code", "message"],
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "detail": {
                        "type": "object"
                    }
                }
            },
            "ApiKeys": {
                "required": ["bits", "id", "name", "owner"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "expires_in": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "bits": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "token": {
                        "type": "string"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "ApiResponseApiKeys": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ApiResponseListRepository": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ApiResponseListString": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ApiResponseMainResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ApiResponseMainUserResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ApiResponseUnit": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean"
                    }
                }
            },
            "ChartDependency": {
                "required": ["import-values", "name", "tags"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "condition": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "import-values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StringOrImportValue"
                        }
                    },
                    "alias": {
                        "type": "string"
                    }
                }
            },
            "ChartIndexSpec": {
                "required": [
                    "annotations",
                    "apiVersion",
                    "dependencies",
                    "deprecated",
                    "keywords",
                    "maintainers",
                    "name",
                    "removed",
                    "sources",
                    "urls",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "enum": ["v1", "v2"]
                    },
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "kubeVersion": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["application", "library", "operator"]
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "home": {
                        "type": "string"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartDependency"
                        }
                    },
                    "maintainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartMaintainer"
                        }
                    },
                    "icon": {
                        "type": "string"
                    },
                    "appVersion": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "created": {
                        "type": "string",
                        "format": "date"
                    },
                    "removed": {
                        "type": "boolean"
                    },
                    "digest": {
                        "type": "string"
                    }
                }
            },
            "ChartIndexYaml": {
                "required": ["apiVersion", "entries", "generated"],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string"
                    },
                    "entries": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChartIndexSpec"
                            }
                        }
                    },
                    "generated": {
                        "type": "string",
                        "format": "date"
                    }
                }
            },
            "ChartMaintainer": {
                "required": ["name"],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                }
            },
            "ChartSpec": {
                "required": [
                    "annotations",
                    "apiVersion",
                    "dependencies",
                    "deprecated",
                    "keywords",
                    "maintainers",
                    "name",
                    "sources",
                    "version"
                ],
                "type": "object",
                "properties": {
                    "apiVersion": {
                        "type": "string",
                        "enum": ["v1", "v2"]
                    },
                    "name": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "kubeVersion": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["application", "library", "operator"]
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "home": {
                        "type": "string"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartDependency"
                        }
                    },
                    "maintainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartMaintainer"
                        }
                    },
                    "icon": {
                        "type": "string"
                    },
                    "appVersion": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "annotations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "CreateApiKeyPayload": {
                "required": ["name", "scopes"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "expires_in": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "description": "Represents a resource for creating API keys"
            },
            "CreateOrganizationPayload": {
                "required": ["name", "private"],
                "type": "object",
                "properties": {
                    "display_name": {
                        "type": "string"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    }
                }
            },
            "CreateRepositoryPayload": {
                "required": ["name", "private", "type"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "readme": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["application", "library", "operator"]
                    }
                }
            },
            "CreateRepositoryReleasePayload": {
                "required": ["tag"],
                "type": "object",
                "properties": {
                    "update_text": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    }
                }
            },
            "CreateUserPayload": {
                "required": ["email", "password", "username"],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            },
            "Err": {
                "required": ["errors", "success"],
                "type": "object",
                "description": "Represents an unsuccessful response, with any errors that might've occurred during the invocation of the request",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ApiResponseUnit"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "errors": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ApiError"
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseListRepository"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseListString"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseApiKeys"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseMainUserResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseMainResponse"
                    }
                ]
            },
            "FeaturesResponse": {
                "required": [
                    "audit_logs",
                    "docker_registry",
                    "integrations",
                    "is_invite_only",
                    "registrations",
                    "search",
                    "webhooks"
                ],
                "type": "object",
                "properties": {
                    "docker_registry": {
                        "type": "boolean"
                    },
                    "registrations": {
                        "type": "boolean"
                    },
                    "audit_logs": {
                        "type": "boolean"
                    },
                    "webhooks": {
                        "type": "boolean"
                    },
                    "is_invite_only": {
                        "type": "boolean"
                    },
                    "integrations": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    },
                    "search": {
                        "type": "boolean"
                    }
                }
            },
            "ImportValue": {
                "required": ["child", "parent"],
                "type": "object",
                "properties": {
                    "child": {
                        "type": "string"
                    },
                    "parent": {
                        "type": "string"
                    }
                }
            },
            "InfoResponse": {
                "required": ["build_date", "commit_sha", "distribution", "product", "vendor", "version"],
                "type": "object",
                "properties": {
                    "distribution": {
                        "type": "string",
                        "enum": ["kubernetes", "unknown", "docker", "rpm", "deb", "git"]
                    },
                    "commit_sha": {
                        "type": "string"
                    },
                    "build_date": {
                        "type": "string"
                    },
                    "product": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    },
                    "vendor": {
                        "type": "string"
                    }
                },
                "description": "Represents the response for the `GET /info` REST handler."
            },
            "MainOrganizationResponse": {
                "required": ["docs", "message"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "docs": {
                        "type": "string"
                    }
                }
            },
            "MainRepositoryResponse": {
                "required": ["docsUrl", "message"],
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    },
                    "docsUrl": {
                        "type": "string"
                    }
                }
            },
            "NameOrSnowflake": {
                "type": "object",
                "description": "Represents a value that handles Name and Snowflake parameters",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "type": "integer",
                        "format": "int64"
                    }
                ]
            },
            "Ok": {
                "required": ["success"],
                "type": "object",
                "description": "Represents a successful response, with any data attached if any",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ApiResponseUnit"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "object"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseListRepository"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseListString"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseApiKeys"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseMainUserResponse"
                    },
                    {
                        "$ref": "#/components/schemas/ApiResponseMainResponse"
                    }
                ]
            },
            "OkApiKeys": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/ApiKeys"
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkFeaturesResponse": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/FeaturesResponse"
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListApiKeys": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ApiKeys"
                        }
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkListSession": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Session"
                        }
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkRepository": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Repository"
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkRepositoryRelease": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/RepositoryRelease"
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkSession": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Session"
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkUnit": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/Unit"
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "OkUser": {
                "required": ["success"],
                "type": "object",
                "properties": {
                    "data": {
                        "$ref": "#/components/schemas/User"
                    },
                    "success": {
                        "type": "boolean"
                    }
                },
                "description": "Represents a successful response, with any data attached if any"
            },
            "Organization": {
                "required": ["created_at", "id", "name", "owner", "private", "updated_at", "verified_publisher"],
                "type": "object",
                "properties": {
                    "verified_publisher": {
                        "type": "boolean",
                        "description": "Whether if this organization is a verified publisher on this instance"
                    },
                    "twitter_handle": {
                        "type": "string"
                    },
                    "gravatar_email": {
                        "type": "string"
                    },
                    "display_name": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "icon_hash": {
                        "type": "string"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Repository": {
                "required": ["created_at", "deprecated", "id", "name", "owner_id", "private", "type", "updated_at"],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "icon_hash": {
                        "type": "string"
                    },
                    "private": {
                        "type": "boolean"
                    },
                    "owner_id": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": ["application", "library", "operator"]
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "RepositoryRelease": {
                "required": ["created_at", "id", "tag", "updated_at"],
                "type": "object",
                "properties": {
                    "update_text": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Session": {
                "required": ["access_token", "refresh_token", "session_id", "user_id"],
                "type": "object",
                "properties": {
                    "refresh_token": {
                        "type": "string"
                    },
                    "access_token": {
                        "type": "string"
                    },
                    "session_id": {
                        "type": "string",
                        "format": "uuid"
                    },
                    "user_id": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "description": "Represents a session token object. This is how sessions are stored when authenticating to charted-server."
            },
            "StringOrImportValue": {
                "type": "object",
                "oneOf": [
                    {
                        "type": "string"
                    },
                    {
                        "$ref": "#/components/schemas/ImportValue"
                    }
                ]
            },
            "Unit": {
                "type": "object"
            },
            "User": {
                "required": ["admin", "created_at", "id", "updated_at", "username", "verified_publisher"],
                "type": "object",
                "properties": {
                    "verified_publisher": {
                        "type": "boolean"
                    },
                    "gravatar_email": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "avatar_hash": {
                        "type": "string"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "username": {
                        "type": "string"
                    },
                    "admin": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "UserLoginPayload": {
                "required": ["password"],
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                }
            }
        },
        "securitySchemes": {
            "SessionToken": {
                "type": "http",
                "description": "Session token from the POST /users/login endpoint",
                "in": "header",
                "scheme": "Bearer",
                "bearerFormat": "Bearer"
            },
            "ApiKey": {
                "type": "apiKey",
                "in": "header",
                "bearerFormat": "ApiKey"
            },
            "Basic": {
                "type": "http",
                "description": "Basic authentication",
                "in": "header",
                "scheme": "Basic",
                "bearerFormat": "Basic"
            }
        }
    }
}
