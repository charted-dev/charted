{
    "openapi": "3.0.3",
    "info": {
        "title": "charted-server",
        "description": "üêª‚Äç‚ùÑÔ∏èüì¶ Free, open source, and reliable Helm Chart registry made in Rust",
        "termsOfService": "https://charts.noelware.org/legal/tos",
        "contact": {
            "name": "Noelware, LLC.",
            "url": "https://noelware.org",
            "email": "team@noelware.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0"
        },
        "version": "0.1.0-beta"
    },
    "servers": [
        {
            "url": "http://0.0.0.0:3651"
        }
    ],
    "paths": {
        "/": {
            "get": {
                "tags": ["Main"],
                "description": "Main entrypoint to charted-server. This is just a generic \"hello world\" response.",
                "operationId": "main",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/MainResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/apikeys": {
            "get": {
                "tags": ["ApiKeys"],
                "description": "",
                "operationId": "apikeys",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EntrypointResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/features": {
            "get": {
                "tags": ["Main"],
                "description": "Retrieve this server's features. This is only for enabling or disabling features for API consumers.",
                "operationId": "features",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/FeaturesResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/heartbeat": {
            "get": {
                "tags": ["Main"],
                "description": "Generic healthcheck endpoint to use for Docker and Kubernetes usage.",
                "operationId": "heartbeat",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/indexes/{idOrName}": {
            "get": {
                "tags": ["Main", "Users", "Organizations"],
                "description": "Returns a `ChartIndex` for a specific user or organization.",
                "operationId": "get_index",
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Helm index for the user or organization",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/responses/ChartIndexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User or Organization was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/info": {
            "get": {
                "tags": ["Main"],
                "description": "REST handler for getting more information about this instance that can be visible for API consumers.",
                "operationId": "info",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/InfoResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/repositories/{id}": {
            "get": {
                "tags": ["Repositories"],
                "description": "Retrieve a repository by the repo ID.",
                "operationId": "get_repository",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/RepositoryResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Repositories"],
                "description": "Patch a repository's metadata",
                "operationId": "patch_repository",
                "responses": {
                    "204": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request body was invalid (i.e, validation errors)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session couldn't be validated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "(Bearer token only) - if the JWT was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the request body contained invalid data, or if the session header contained invalid data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": ["Users"],
                "description": "Generic entrypoint route for the Users API.",
                "operationId": "users",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EntrypointResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Users"],
                "description": "Creates a new user if the server allows registrations.",
                "operationId": "create_user",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/UserResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if this server doesn't allow registrations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the `username` or `email` was taken.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Users"],
                "description": "Patches the current authenticated user's metadata.",
                "operationId": "patch_user",
                "responses": {
                    "204": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request body was invalid (i.e, validation errors)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session couldn't be validated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "(Bearer token only) - if the JWT was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the request body contained invalid data, or if the session header contained invalid data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me": {
            "get": {
                "tags": ["Users"],
                "description": "Returns a [User] from an authenticated request.",
                "operationId": "get_self",
                "responses": {
                    "200": {
                        "description": "Returns the current authenticated user's metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request body was invalid (i.e, validation errors)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session couldn't be validated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "(Bearer token only) - if the JWT was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the request body contained invalid data, or if the session header contained invalid data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/avatar": {
            "get": {
                "tags": ["Users", "Avatars"],
                "description": "Returns the current authenticated user's current avatar. Use the [`GET /users/@me/avatar/{hash}.png`] REST handler\n to grab by a specific hash.\n\n [`GET /users/@me/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/@me/avatar/{hash}.png",
                "operationId": "get_my_current_avatar",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Users", "Avatars"],
                "description": "Uploads a user avatar.",
                "operationId": "upload_user_avatar",
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/@me/repositories": {
            "put": {
                "tags": ["Repositories"],
                "description": "Creates a [`Repository`] with the current authenticated user as the owner of the repository.",
                "operationId": "create_user_repository",
                "responses": {
                    "201": {
                        "description": "Repository created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/RepositoryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict: repository with that name already exists on the user's account",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": ["Users", "Sessions"],
                "description": "Creates a new session and returns details about the newly created session.",
                "operationId": "login",
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/SessionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload received.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid password received",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/sessions/logout": {
            "delete": {
                "tags": ["Users", "Sessions"],
                "description": "Attempts to destroy the current authenticated session.",
                "operationId": "logout",
                "responses": {
                    "201": {
                        "description": "Session was deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the authenticated user didn't provide a session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/sessions/refresh-token": {
            "post": {
                "tags": ["Users", "Sessions"],
                "description": "",
                "operationId": "refresh_session_token",
                "responses": {
                    "201": {
                        "description": "Session was fully restored with a new one",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/SessionResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the authenticated user didn't provide a refresh token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}": {
            "get": {
                "tags": ["Users"],
                "description": "Retrieve a [`User`] object.",
                "operationId": "get_user",
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid `idOrName` specified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/avatar": {
            "get": {
                "tags": ["Users", "Avatars"],
                "description": "Returns the user's current avatar. Use the [`GET /users/{idOrName}/avatar/{hash}.png`] REST handler\n to grab by a specific hash.\n\n [`GET /users/{idOrName}/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/{idOrName}/avatar/{hash}.png",
                "operationId": "get_current_user_avatar",
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{idOrName}/repositories": {
            "get": {
                "tags": ["Users", "Repositories"],
                "description": "Retrieve a list of all a user's repositories.",
                "operationId": "list_user_repositories",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor to passthrough to proceed into the next or previous page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                            "minLength": 15
                        }
                    },
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order to sort the entries by.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/OrderBy"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many elements should be present in a page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all the user's repositories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/RepositoryPaginatedResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1": {
            "get": {
                "tags": ["Main"],
                "description": "Main entrypoint to charted-server. This is just a generic \"hello world\" response.",
                "operationId": "main",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/MainResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/apikeys": {
            "get": {
                "tags": ["ApiKeys"],
                "description": "",
                "operationId": "apikeys",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EntrypointResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/features": {
            "get": {
                "tags": ["Main"],
                "description": "Retrieve this server's features. This is only for enabling or disabling features for API consumers.",
                "operationId": "features",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/FeaturesResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/heartbeat": {
            "get": {
                "tags": ["Main"],
                "description": "Generic healthcheck endpoint to use for Docker and Kubernetes usage.",
                "operationId": "heartbeat",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/indexes/{idOrName}": {
            "get": {
                "tags": ["Main", "Users", "Organizations"],
                "description": "Returns a `ChartIndex` for a specific user or organization.",
                "operationId": "get_index",
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Helm index for the user or organization",
                        "content": {
                            "text/yaml": {
                                "schema": {
                                    "$ref": "#/components/responses/ChartIndexResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User or Organization was not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/info": {
            "get": {
                "tags": ["Main"],
                "description": "REST handler for getting more information about this instance that can be visible for API consumers.",
                "operationId": "info",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/InfoResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/repositories/{id}": {
            "get": {
                "tags": ["Repositories"],
                "description": "Retrieve a repository by the repo ID.",
                "operationId": "get_repository",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/RepositoryResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Repositories"],
                "description": "Patch a repository's metadata",
                "operationId": "patch_repository",
                "responses": {
                    "204": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request body was invalid (i.e, validation errors)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session couldn't be validated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "(Bearer token only) - if the JWT was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the request body contained invalid data, or if the session header contained invalid data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users": {
            "get": {
                "tags": ["Users"],
                "description": "Generic entrypoint route for the Users API.",
                "operationId": "users",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EntrypointResponse"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": ["Users"],
                "description": "Creates a new user if the server allows registrations.",
                "operationId": "create_user",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/UserResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Whether if this server doesn't allow registrations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the `username` or `email` was taken.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "tags": ["Users"],
                "description": "Patches the current authenticated user's metadata.",
                "operationId": "patch_user",
                "responses": {
                    "204": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request body was invalid (i.e, validation errors)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session couldn't be validated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "(Bearer token only) - if the JWT was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the request body contained invalid data, or if the session header contained invalid data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me": {
            "get": {
                "tags": ["Users"],
                "description": "Returns a [User] from an authenticated request.",
                "operationId": "get_self",
                "responses": {
                    "200": {
                        "description": "Returns the current authenticated user's metadata",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "If the request body was invalid (i.e, validation errors)",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "If the session couldn't be validated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "(Bearer token only) - if the JWT was invalid.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "If the request body contained invalid data, or if the session header contained invalid data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me/avatar": {
            "get": {
                "tags": ["Users", "Avatars"],
                "description": "Returns the current authenticated user's current avatar. Use the [`GET /users/@me/avatar/{hash}.png`] REST handler\n to grab by a specific hash.\n\n [`GET /users/@me/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/@me/avatar/{hash}.png",
                "operationId": "get_my_current_avatar",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": ["Users", "Avatars"],
                "description": "Uploads a user avatar.",
                "operationId": "upload_user_avatar",
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/@me/repositories": {
            "put": {
                "tags": ["Repositories"],
                "description": "Creates a [`Repository`] with the current authenticated user as the owner of the repository.",
                "operationId": "create_user_repository",
                "responses": {
                    "201": {
                        "description": "Repository created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/RepositoryResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict: repository with that name already exists on the user's account",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/login": {
            "post": {
                "tags": ["Users", "Sessions"],
                "description": "Creates a new session and returns details about the newly created session.",
                "operationId": "login",
                "responses": {
                    "201": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/SessionResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid payload received.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid password received",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/sessions/logout": {
            "delete": {
                "tags": ["Users", "Sessions"],
                "description": "Attempts to destroy the current authenticated session.",
                "operationId": "logout",
                "responses": {
                    "201": {
                        "description": "Session was deleted successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/EmptyApiResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the authenticated user didn't provide a session token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/sessions/refresh-token": {
            "post": {
                "tags": ["Users", "Sessions"],
                "description": "",
                "operationId": "refresh_session_token",
                "responses": {
                    "201": {
                        "description": "Session was fully restored with a new one",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/SessionResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "If the authenticated user didn't provide a refresh token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}": {
            "get": {
                "tags": ["Users"],
                "description": "Retrieve a [`User`] object.",
                "operationId": "get_user",
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/UserResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid `idOrName` specified",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Unknown User",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}/avatar": {
            "get": {
                "tags": ["Users", "Avatars"],
                "description": "Returns the user's current avatar. Use the [`GET /users/{idOrName}/avatar/{hash}.png`] REST handler\n to grab by a specific hash.\n\n [`GET /users/{idOrName}/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/{idOrName}/avatar/{hash}.png",
                "operationId": "get_current_user_avatar",
                "parameters": [
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/ApiErrorResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/users/{idOrName}/repositories": {
            "get": {
                "tags": ["Users", "Repositories"],
                "description": "Retrieve a list of all a user's repositories.",
                "operationId": "list_user_repositories",
                "parameters": [
                    {
                        "name": "cursor",
                        "in": "query",
                        "description": "Cursor to passthrough to proceed into the next or previous page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                            "minLength": 15
                        }
                    },
                    {
                        "name": "idOrName",
                        "in": "path",
                        "description": "Path parameter that can take a [`Name`] or [`Snowflake`] identifier.",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/NameOrSnowflake"
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Order to sort the entries by.",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/OrderBy"
                        }
                    },
                    {
                        "name": "per_page",
                        "in": "query",
                        "description": "How many elements should be present in a page.",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all the user's repositories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/responses/RepositoryPaginatedResponse"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ApiKey": {
                "type": "object",
                "description": "A resource for personal-managed API tokens that is created by a User. This is useful\nfor command line tools or scripts that need to interact with charted-server, but\nthe main use-case is for the [Helm plugin](https://charts.noelware.org/docs/helm-plugin/current).",
                "required": ["scopes", "owner", "name", "id"],
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Short description about this API key.",
                        "nullable": true
                    },
                    "expires_in": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date-time of when this API token expires in, `null` can be returned\nif the token doesn't expire",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the API key."
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    },
                    "scopes": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The scopes that are attached to this API key resource."
                    },
                    "token": {
                        "type": "string",
                        "description": "The token itself. This is never revealed when querying, but only revealed\nwhen you create the token.",
                        "nullable": true
                    }
                }
            },
            "Chart": {
                "type": "object",
                "description": "Represents the skeleton of a `Chart.yaml` file.",
                "required": ["apiVersion", "name", "version"],
                "properties": {
                    "annotations": {
                        "type": "object",
                        "description": "Mapping of custom metadata that can be used for custom attributes.\n\n### standardized for charted-server\n* `charts.noelware.org/maintainers` ~ a comma-delimited list of all the maintainers\nthat are mapped by their `Name` or snowflake ID",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "apiVersion": {
                        "$ref": "#/components/schemas/ChartSpecVersion"
                    },
                    "appVersion": {
                        "type": "string",
                        "description": "Note that the appVersion field is not related to the version field. It is a way of specifying the version of the\napplication. For example, the drupal chart may have an appVersion: \"8.2.1\", indicating that the version of Drupal\nincluded in the chart (by default) is 8.2.1. This field is informational, and has no impact on chart version calculations.\n\nWrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string.\nLeaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets 1.0 as a floating point value,\nand a git commit SHA like 1234e10 as scientific notation.",
                        "nullable": true
                    },
                    "dependencies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartDependency"
                        },
                        "description": "In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies'\nfield in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined as a list\nin the dependencies field."
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "When managing charts in a Chart Repository, it is sometimes necessary to deprecate a chart. The optional deprecated field\nin Chart.yaml can be used to mark a chart as deprecated. If the latest version of a chart in the repository is marked\nas deprecated, then the chart as a whole is considered to be deprecated.\n\nThe chart name can be later reused by publishing a newer version that is not marked as deprecated."
                    },
                    "description": {
                        "type": "string",
                        "description": "A single-sentence description of this project",
                        "nullable": true
                    },
                    "home": {
                        "type": "string",
                        "description": "The URL of this project's homepage.",
                        "nullable": true
                    },
                    "icon": {
                        "type": "string",
                        "description": "A URL or an SVG or PNG image to be used as an icon",
                        "nullable": true
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of keywords about this project. These keywords can be searched\nvia the /search endpoint if it's enabled."
                    },
                    "kubeVersion": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/VersionReq"
                            }
                        ],
                        "nullable": true
                    },
                    "maintainers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ChartMaintainer"
                        },
                        "description": "A list of name and URL/email address combinations for the maintainer(s)"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the chart."
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of URLs to the source code for this project"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType"
                    },
                    "version": {
                        "$ref": "#/components/schemas/Version"
                    }
                }
            },
            "ChartDependency": {
                "type": "object",
                "description": "In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies'\nfield in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined\nas a list in the dependencies field.",
                "required": ["name"],
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "Alias that is used to identify a chart. Useful for pointing to the\nsame chart multiple times",
                        "nullable": true
                    },
                    "condition": {
                        "type": "string",
                        "description": "YAML path that resolves to a boolean to enable or disable charts\ndynamically.",
                        "nullable": true
                    },
                    "import-values": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StringOrImportValue"
                        },
                        "description": "[`ImportValues`][ImportValue] holds the mapping of source values to parent key to be imported.\nEach item can be a string or pair of child/parent sublist items."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the chart"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Repository URL or alias that should be used to grab\nthe dependency from.",
                        "nullable": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of tags that can be used to group charts to enable/disable together."
                    },
                    "version": {
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Version"
                            }
                        ],
                        "nullable": true
                    }
                }
            },
            "ChartIndex": {
                "type": "object",
                "description": "Schema skeleton for a `index.yml` file that represents a Chart index.",
                "required": ["api_version", "generated_at"],
                "properties": {
                    "api_version": {
                        "type": "string",
                        "description": "API version for the `index.yaml` file. Will be a constant as `v1`."
                    },
                    "entries": {
                        "type": "object",
                        "description": "List of all possible entries for this user/organization.",
                        "additionalProperties": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/ChartIndexSpec"
                            },
                            "description": "Index contents of a repository",
                            "uniqueItems": true
                        }
                    },
                    "generated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "DateTime of when this `index.yaml` was last generated. In charted-server, this is relative on when a new chart release was last published."
                    }
                }
            },
            "ChartIndexSpec": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Chart"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "created": {
                                "type": "string",
                                "format": "date-time",
                                "nullable": true
                            },
                            "digest": {
                                "type": "string",
                                "nullable": true
                            },
                            "removed": {
                                "type": "boolean"
                            },
                            "urls": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "description": "Represents the specification for a Chart.yaml-schema from a `index.yaml` reference."
            },
            "ChartMaintainer": {
                "type": "object",
                "description": "Name and URL/email address combination as a maintainer. [ChartMaintainer::name] can be referenced\nas a `NameOrSnowflake` union.",
                "required": ["name"],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The maintainer's email",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The maintainer's name"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL for the maintainer",
                        "nullable": true
                    }
                }
            },
            "ChartSpecVersion": {
                "type": "string",
                "description": "The apiVersion field should be v2 for Helm charts that require at least Helm 3. Charts supporting previous Helm versions have an apiVersion set to v1 and are still installable by Helm 3.",
                "default": "v2",
                "enum": ["v1", "v2"]
            },
            "ChartType": {
                "type": "string",
                "description": "Represents what type this chart is. Do keep in mind that `operator` is not supported by Helm, but is specific to the API server. For serializing to valid Helm objects, `application` will be the replacement.",
                "default": "application",
                "enum": ["application", "library", "operator"]
            },
            "Distribution": {
                "type": "string",
                "description": "Represents the distribution that this instance is running off from.",
                "default": "unknown",
                "enum": ["kubernetes", "docker", "rpm", "deb", "git", "unknown"]
            },
            "EntrypointResponse": {
                "type": "object",
                "description": "Generic entrypoint message for any API routes like `/users`.",
                "required": ["message", "docs"],
                "properties": {
                    "docs": {
                        "type": "string",
                        "description": "URL to the documentation to where you can explore more routes for\nthis specific API."
                    },
                    "message": {
                        "type": "string",
                        "description": "A cute message to greet you with"
                    }
                }
            },
            "Error": {
                "type": "object",
                "required": ["code", "message"],
                "properties": {
                    "code": {
                        "type": "string",
                        "description": "A code that can be looked up on why a request failed. You can view\nall available codes in [the documentation](https://charts.noelware.org/docs/server/latest/api#errors)."
                    },
                    "details": {
                        "description": "Any JSON value on any details that might help you on why it failed.",
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Detailed message on why this request failed."
                    }
                }
            },
            "FeaturesResponse": {
                "type": "object",
                "description": "Represents the response from the `GET /features` REST handler",
                "required": [
                    "docker_registry",
                    "registrations",
                    "audit_logs",
                    "webhooks",
                    "is_invite_only",
                    "integrations",
                    "search"
                ],
                "properties": {
                    "audit_logs": {
                        "type": "boolean",
                        "description": "Whether if the Audit Logging feature is enabled or not."
                    },
                    "docker_registry": {
                        "type": "boolean",
                        "description": "Whether if the external OCI registry experimental feature or the home-made implementation registry feature is enabled or not."
                    },
                    "integrations": {
                        "type": "object",
                        "description": "Object of all the session integrations available.",
                        "additionalProperties": {
                            "type": "boolean"
                        }
                    },
                    "is_invite_only": {
                        "type": "boolean",
                        "description": "Whether if this server instance is invite-only.",
                        "deprecated": true
                    },
                    "registrations": {
                        "type": "boolean",
                        "description": "Whether if registrations are enabled on the server"
                    },
                    "search": {
                        "type": "boolean",
                        "description": "Whether if the server has search capabilities with the Elasticsearch or Meilisearch backend"
                    },
                    "webhooks": {
                        "type": "boolean",
                        "description": "Whether if the Webhooks feature is enabled or not."
                    }
                }
            },
            "ImportValue": {
                "type": "object",
                "description": "ImportValues hold the mapping of source values to parent key to be imported. Each\nitem can be a child/parent sublist item or a string.",
                "required": ["parent", "child"],
                "properties": {
                    "child": {
                        "type": "string",
                        "description": "The source key of the values to be imported"
                    },
                    "parent": {
                        "type": "string",
                        "description": "The destination path in the parent chart's values."
                    }
                }
            },
            "InfoResponse": {
                "type": "object",
                "description": "Represents the response for the `GET /info` REST handler.",
                "required": ["distribution", "commit_sha", "build_date", "product", "version", "vendor"],
                "properties": {
                    "build_date": {
                        "type": "string",
                        "description": "Build date in RFC3339 format"
                    },
                    "commit_sha": {
                        "type": "string",
                        "description": "The commit hash from the Git repository."
                    },
                    "distribution": {
                        "$ref": "#/components/schemas/Distribution"
                    },
                    "product": {
                        "type": "string",
                        "description": "Product name. Will always be \"charted-server\""
                    },
                    "vendor": {
                        "type": "string",
                        "description": "Vendor of charted-server, will always be \"Noelware\""
                    },
                    "version": {
                        "type": "string",
                        "description": "Valid SemVer 2 of the current version of this instance"
                    }
                }
            },
            "MainResponse": {
                "type": "object",
                "description": "Response object for the `GET /` REST controller.",
                "required": ["message", "tagline", "docs"],
                "properties": {
                    "docs": {
                        "type": "string",
                        "description": "Documentation URL for this generic entrypoint response."
                    },
                    "message": {
                        "type": "string",
                        "description": "The message, which will always be \"Hello, world!\""
                    },
                    "tagline": {
                        "type": "string",
                        "description": "You know, for Helm charts?"
                    }
                }
            },
            "Member": {
                "type": "object",
                "description": "Represents a resource that is correlated to a repository or organization member\nthat can control the repository's metadata.",
                "required": ["permissions", "updated_at", "joined_at", "user", "id"],
                "properties": {
                    "display_name": {
                        "type": "string",
                        "description": "Display name for this member. This should be formatted as '[{display_name}][Member::display_name] (@[{username}][User::username])' if this\nis set, otherwise '@[{username}][User::username]' is used.",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    "joined_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date-time of when this member resource was created by the API server."
                    },
                    "permissions": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Bitfield value of this member's permissions.",
                        "minimum": 0
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date-time of when this member resource was last updated by the API server."
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    }
                }
            },
            "Name": {
                "type": "string",
                "description": "A valid UTF-8 string that is used to identify a resource from the REST API in a humane fashion. This is meant to help identify a resource without trying to calculate the resource's Snowflake on the first try.",
                "maxLength": 32,
                "minLength": 1,
                "pattern": "([A-z]|-|_|\\d{0,9}){1,32}"
            },
            "NameOrSnowflake": {
                "oneOf": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    {
                        "type": "string",
                        "description": "A valid UTF-8 string that is used to identify a resource from the REST API in a humane fashion. This is meant to help identify a resource without trying to calculate the resource's Snowflake on the first try.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "([A-z]|-|_|\\d{0,9}){1,32}"
                    }
                ],
                "description": "Represents a union enum that can hold a Snowflake and a Name, which is a String that is validated with the Name regex."
            },
            "OrderBy": {
                "type": "string",
                "description": "The ordering to use when querying paginated REST calls.",
                "enum": ["ASC", "DESC"]
            },
            "Organization": {
                "type": "object",
                "description": "Represents a unified entity that can manage and own repositories outside\na User. Organizations to the server is used for business-related Helm charts\nthat aren't tied to a specific User.",
                "required": ["created_at", "updated_at", "owner", "name", "id"],
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when this organization was registered to this instance"
                    },
                    "display_name": {
                        "type": "string",
                        "description": "Display name for this organization. It should be formatted as '[{display_name}][Organization::display_name] (@[{name}][Organization::name])'\nor '@[{name}][Organization::name]'.",
                        "nullable": true
                    },
                    "gravatar_email": {
                        "type": "string",
                        "description": "Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar",
                        "nullable": true
                    },
                    "icon_hash": {
                        "type": "string",
                        "description": "Unique hash to locate an organization's icon, this also includes the extension that this icon is, i.e, `png`.",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    "name": {
                        "type": "string",
                        "description": "The name for this organization."
                    },
                    "owner": {
                        "$ref": "#/components/schemas/User"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Whether this organization is private and only its member can access this resource."
                    },
                    "twitter_handle": {
                        "type": "string",
                        "description": "Returns the twitter handle for this organization, if populated.",
                        "nullable": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when the server has last updated this organization"
                    },
                    "verified_publisher": {
                        "type": "boolean",
                        "description": "Whether if this Organization is a Verified Publisher or not."
                    }
                }
            },
            "PageInfo": {
                "type": "object",
                "description": "Information about a [pagination][Pagination] page.",
                "required": ["cursor"],
                "properties": {
                    "cursor": {
                        "$ref": "#/components/schemas/Snowflake"
                    }
                }
            },
            "PaginatedMember": {
                "type": "object",
                "required": ["data", "page_info"],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Member"
                        }
                    },
                    "page_info": {
                        "$ref": "#/components/schemas/PageInfo"
                    }
                }
            },
            "PaginatedOrganization": {
                "type": "object",
                "required": ["data", "page_info"],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Organization"
                        }
                    },
                    "page_info": {
                        "$ref": "#/components/schemas/PageInfo"
                    }
                }
            },
            "PaginatedRepository": {
                "type": "object",
                "required": ["data", "page_info"],
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Repository"
                        }
                    },
                    "page_info": {
                        "$ref": "#/components/schemas/PageInfo"
                    }
                }
            },
            "Repository": {
                "type": "object",
                "required": ["created_at", "updated_at", "owner", "name", "type", "id"],
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when this repository was registered to this instance"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether if this repository is deprecated or not"
                    },
                    "description": {
                        "type": "string",
                        "description": "Short description about this user, can be `null` if none was provided.",
                        "nullable": true
                    },
                    "icon_hash": {
                        "type": "string",
                        "description": "Unique hash to locate a repository's icon, this also includes the extension that this avatar is, i.e, `png`.",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    "name": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "owner": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Whether if this repository is private or not"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ChartType"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when the server has last updated this repository"
                    }
                }
            },
            "RepositoryRelease": {
                "type": "object",
                "description": "Represents a resource that contains a release from a [Repository] release. Releases\nare a way to group releases of new versions of Helm charts that can be easily\nfetched from the API server.\n\nAny repository can have an unlimited amount of releases, but tags cannot clash\ninto each other, so the API server will not accept it. Each tag should be\na SemVer 2 comformant string, parsing is related to how Cargo evaluates SemVer 2 tags.",
                "required": ["created_at", "updated_at", "tag", "id"],
                "properties": {
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when this release was registered to this instance"
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    "is_prerelease": {
                        "type": "boolean",
                        "description": "Whether if this release is a pre-release or not."
                    },
                    "tag": {
                        "$ref": "#/components/schemas/Version"
                    },
                    "update_test": {
                        "type": "string",
                        "description": "Markdown-formatted string that contains a changelog of this release.",
                        "nullable": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when the server has last updated this repository release"
                    }
                }
            },
            "Session": {
                "type": "object",
                "required": ["session_id", "user_id"],
                "properties": {
                    "access_token": {
                        "type": "string",
                        "description": "Access token. This will always be `null` if queried, but always will\nbe present if you successfully logged in.",
                        "nullable": true
                    },
                    "refresh_token": {
                        "type": "string",
                        "description": "Refresh token. This will always be `null` if queried, but always will\nbe present if you successfully logged in.",
                        "nullable": true
                    },
                    "session_id": {
                        "type": "string",
                        "format": "uuid",
                        "description": "UUID of the session."
                    },
                    "user_id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the user that created this session.",
                        "minimum": 0
                    }
                }
            },
            "Snowflake": {
                "type": "integer",
                "format": "int64",
                "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                "minLength": 15
            },
            "StringOrImportValue": {
                "oneOf": [
                    {
                        "type": "string",
                        "description": "String that points to a key to be imported."
                    },
                    {
                        "$ref": "#/components/schemas/ImportValue"
                    }
                ],
                "description": "Union enum that can contain a String or a [ImportValue] as the import source\nfor referencing parent key items to be imported."
            },
            "User": {
                "type": "object",
                "description": "Represents an account that can own [repositories][Repository] and [organizations][Organizations]",
                "required": ["created_at", "updated_at", "username", "id"],
                "properties": {
                    "admin": {
                        "type": "boolean",
                        "description": "Whether if this User is an Administrator of this instance"
                    },
                    "avatar_hash": {
                        "type": "string",
                        "description": "Unique hash to locate a user's avatar, this also includes the extension that this avatar is, i.e, `png`.",
                        "nullable": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when this user was registered to this instance"
                    },
                    "description": {
                        "type": "string",
                        "description": "Short description about this user, can be `null` if none was provided.",
                        "nullable": true
                    },
                    "gravatar_email": {
                        "type": "string",
                        "description": "Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar",
                        "nullable": true
                    },
                    "id": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.",
                        "minLength": 15
                    },
                    "name": {
                        "type": "string",
                        "description": "A valid UTF-8 string that is used to identify a resource from the REST API in a humane fashion. This is meant to help identify a resource without trying to calculate the resource's Snowflake on the first try.",
                        "maxLength": 32,
                        "minLength": 1,
                        "pattern": "([A-z]|-|_|\\d{0,9}){1,32}"
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date of when the server has last updated this user"
                    },
                    "username": {
                        "$ref": "#/components/schemas/Name"
                    },
                    "verified_publisher": {
                        "type": "boolean",
                        "description": "Whether if this User is a Verified Publisher or not."
                    }
                }
            },
            "Version": {
                "type": "string",
                "description": "Represents a semantic version (https://semver.org) that Helm and charted-server will only accept",
                "pattern": "^(?P<major>0|[1-9]\\d*)\\.(?P<minor>0|[1-9]\\d*)\\.(?P<patch>0|[1-9]\\d*)(?:-(?P<prerelease>(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
            },
            "VersionReq": {
                "type": "string",
                "description": "Represents a semantic version (https://semver.org) requirement (i.e, `>=1.2.0`) that Helm and charted-server will only accept"
            }
        },
        "responses": {
            "ApiErrorResponse": {
                "description": "API response that doesn't contain any data",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "errors"],
                            "properties": {
                                "errors": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Error"
                                    },
                                    "description": "List of errors on why the request failed."
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [ApiErrorResponse] was a success or not"
                                }
                            }
                        }
                    }
                }
            },
            "ChartIndexResponse": {
                "description": "Response object for \"ChartIndex\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/ChartIndex"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [ChartIndexResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "EmptyApiResponse": {
                "description": "API response that doesn't contain any data",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success"],
                            "properties": {
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [EmptyApiResponse] was a success or not"
                                }
                            }
                        }
                    }
                }
            },
            "EntrypointResponse": {
                "description": "Response object for \"EntrypointResponse\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/EntrypointResponse"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [EntrypointResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "FeaturesResponse": {
                "description": "Response object for \"FeaturesResponse\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/FeaturesResponse"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [FeaturesResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "InfoResponse": {
                "description": "Response object for \"InfoResponse\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/InfoResponse"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [InfoResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "MainResponse": {
                "description": "Response object for \"MainResponse\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/MainResponse"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [MainResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "MemberPaginatedResponse": {
                "description": "Response object for \"PaginatedMember\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/PaginatedMember"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [MemberPaginatedResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "OrganizationPaginatedResponse": {
                "description": "Response object for \"PaginatedOrganization\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/PaginatedOrganization"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [OrganizationPaginatedResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "RepositoryPaginatedResponse": {
                "description": "Response object for \"PaginatedRepository\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/PaginatedRepository"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [RepositoryPaginatedResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "RepositoryResponse": {
                "description": "Response object for \"Repository\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/Repository"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [RepositoryResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "SessionResponse": {
                "description": "Response object for \"Session\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/Session"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [SessionResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            },
            "UserResponse": {
                "description": "Response object for \"User\"",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "required": ["success", "data"],
                            "properties": {
                                "data": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "success": {
                                    "type": "boolean",
                                    "description": "whether if this response [UserResponse] was successful or not"
                                }
                            }
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "ApiKey": {
                "type": "apiKey",
                "in": "header",
                "name": "ApiKey"
            },
            "Basic": {
                "type": "http",
                "scheme": "basic",
                "description": "Basic is only meant for testing the API, do not use this for anything else."
            },
            "Bearer": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "Bearer",
                "description": "JWT-signed session key that is used to safely identify someone for 2 days with a refresh token"
            }
        }
    },
    "externalDocs": {
        "url": "https://charts.noelware.org/docs/server/0.1.0-beta",
        "description": "Main documentation for charted-server"
    }
}
