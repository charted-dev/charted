<?xml version="1.0" encoding="UTF-8"?>
<!--
~ ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
~ Copyright 2022 Noelware <team@noelware.org>
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~    http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->

<configuration debug="false" packagingData="true">
    <statusListener class="ch.qos.logback.core.status.NopStatusListener" />
    <property resource="${org.noelware.charted.logback.config:-config/logback.properties}" />

    <conversionRule conversionWord="logLevel" converterClass="org.noelware.charted.core.logback.LogLevelColorComposite" />
    <conversionRule conversionWord="threadName" converterClass="org.noelware.charted.core.logback.ThreadNameComposite" />
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <if condition='isNull("charted.console.json")'>
            <then>
                <encoder>
                    <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS, +10}] %boldCyan([%threadName]) %logLevel([%level]) [%logger{36}:%line] :: %msg%n</pattern>
                    <charset>utf-8</charset>
                </encoder>
            </then>
            <else>
                <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                    <layout class="ch.qos.logback.contrib.json.classic.JsonLayout">
                        <jsonFormatter class="org.noelware.charted.core.logback.LogbackJsonFormatter" />
                    </layout>
                </encoder>
            </else>
        </if>
    </appender>

    <if condition='isDefined("charted.encoders")'>
        <then>
            <if condition='property("charted.encoders").contains("sentry")'>
                <then>
                    <appender name="Sentry" class="io.sentry.logback.SentryAppender">
                        <options>
                            <dsn>${charted.sentry.dsn}</dsn>
                        </options>
                    </appender>

                    <root level="ERROR">
                        <appender-ref ref="Sentry" />
                    </root>
                </then>
            </if>

            <if condition='property("charted.encoders").contains("logstash")'>
                <then>
                    <if condition='isDefined("charted.logstash.endpoint")'>
                        <then>
                            <appender name="Logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
                                <destination>${charted.logstash.endpoint}</destination>
                                <keepAliveDuration>5 minutes</keepAliveDuration>
                                <writeVersionAsInteger>true</writeVersionAsInteger>
                                <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                                    <providers>
                                        <timestamp />
                                        <message />
                                        <loggerName />
                                        <threadName />
                                        <logLevel />
                                        <callerData />
                                        <stackTrace />
                                        <contextName />
                                        <mdc />
                                        <tags />
                                        <logstashMarkers />
                                        <throwableClassName />
                                        <throwableMessage />
                                        <throwableRootCauseClassName />
                                        <throwableRootCauseMessage />
                                        <includeMdcKeyName>user_agent</includeMdcKeyName>
                                    </providers>
                                    <customFields>{"product":"charted-server","vendor":"Noelware"}</customFields>
                                </encoder>
                            </appender>
                        </then>
                    </if>
                </then>
            </if>
        </then>
    </if>

    <root level="DEBUG">
        <appender-ref ref="Console" />
        <if condition='isDefined("charted.encoders")'>
            <then>
                <if condition='property("charted.encoders").contains("logstash")'>
                    <then>
                        <appender-ref ref="Logstash" />
                    </then>
                </if>
            </then>
        </if>
    </root>

    <!-- Default to INFO if not defined -->
    <if condition='isNull("charted.log.level")'>
        <then>
            <root level="INFO">
                <appender-ref ref="Console" />

                <if condition='isDefined("charted.encoders")'>
                    <then>
                        <if condition='property("charted.encoders").contains("logstash")'>
                            <then>
                                <appender-ref ref="Logstash" />
                            </then>
                        </if>
                    </then>
                </if>
            </root>
        </then>
        <else>
            <root level="${charted.log.level}">
                <appender-ref ref="Console" />

                <if condition='isDefined("charted.encoders")'>
                    <then>
                        <if condition='property("charted.encoders").contains("logstash")'>
                            <then>
                                <appender-ref ref="Logstash" />
                            </then>
                        </if>
                    </then>
                </if>
            </root>
        </else>
    </if>
</configuration>
