# This is an example of the "logback.properties" file to configure the logging system charted-server uses.
# You can let Logback know where to find this file:
#    - in $ROOT/config/logback.properties ($ROOT being the root directory where charted-server is in)
#    - Using the "CHARTED_LOGBACK_CONFIG_PATH" environment variable to a valid path
#    - Using the "-Dorg.noelware.charted.logback.config" system property when using the `JAVA_OPTS` environment variable
#
# If none of those clauses above are met, then it will load up a default configuration with the following properties:
# - JSON logging (charted.console.json) is automatically enabled for systems that might require it
# - The log level (charted.log.level) is set to "INFO" so you don't get log spammed
# - There is no appenders enabled (Appenders are extra logging features like Sentry)
#
# If you wish to know more about how Logback works, you can check the :modules:logging subproject (or modules/logging folder)
# and check the LogbackConfigurator.java file.

# The current log level to use when printing to the terminal. By default, it will use the "INFO" log level.
# Acceptable Values:
# - ERROR
# - WARN
# - INFO
# - DEBUG
# - TRACE
#
# If an invalid value is used, then it will probably throw an error.
charted.log.level=INFO

# This property will transform all logs from the default, pretty printed logs into a stream of JSON
# printed out. If you wish to fall back to the default, comment this out or not provide this in the final
# logback.properties file.
charted.console.json=yes

# This property will set the timezone to use when formatting timestamps. Useful if you want the timestamps
# to be in your local timezone (i.e, America/Phoenix) or in UTC. By default, it will attempt to look for
# the one that the system is configured to use. To fall back to the system default, comment this out or not
# provide it in the final logback.properties file.
charted.console.json.timezone=UTC

# This property will configure the timestamp format when the "@timestamp" property is shown in the final
# JSON object. This has to be a valid one that Java can recognize, since internally, it uses the SimpleDateFormatter
# to format timestamps.
#
# You can read more what Java can accept: https://docs.oracle.com/en/java/javase/19/docs/api/java.base/java/text/SimpleDateFormat.html
#
# If you wish to not use this in the final logs, omit this by commenting it our or not provide it
# in the final logback.properties file.
charted.console.json.timestamp-format=yyyy-MM-dd'T'HH:mm:ss.SSSX

# List of appenders to add when configuring the logging system. charted-server supports custom appenders
# that might fit into your infrastructure (i.e, Elastic Stack/Sentry). Setting this value to nothing or
# not including it in "logback.properties" will disable Sentry and/or Logstash.
#
# The only available appenders that are available to customize is (and accepted values):
# - "sentry"
# - "logstash"
#
# To configure both Sentry and Logstash, you can set the appenders array like:
# "charted.appenders=sentry,logstash"
#
# Otherwise, you can set it like:
# "charted.appenders=sentry"
charted.appenders=

# Property to set for the Sentry DSN to send errors and logging to. This is only used if the `sentry` appender
# is enabled in the "charted.appenders" list.
#
# This must be a valid DSN or the API server will throw an error.
charted.sentry.dsn=

# Property to set which Logstash input to use when sending events to Logstash. This must be used if the `charted.appenders`
# list contains "logstash". charted-server supports the following inputs:
#
# - tcp
# - udp
#
# This must also be configured with `charted.logstash.endpoint` to listen towards.
charted.logstash.type=tcp

# Property to set the Logstash input's URL when sending events. This must be appropriate to what you
# used in the `charted.logstash.type` property.
charted.logstash.endpoint=0.0.0.0:4040
