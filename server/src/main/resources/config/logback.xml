<?xml version="1.0" encoding="UTF-8" ?>
<!--
~ ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
~ Copyright 2022-2023 Noelware <team@noelware.org>
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~    http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<configuration debug="false" packagingData="true">
    <statusListener class="ch.qos.logback.core.status.NopStatusListener" />
    <conversionRule
        conversionWord="logLevel"
        converterClass="org.noelware.charted.modules.logging.composites.LogLevelComposite"
    />

    <conversionRule
        conversionWord="threadName"
        converterClass="org.noelware.charted.modules.logging.composites.ThreadNameComposite"
    />

    <conversionRule
        conversionWord="mdc"
        converterClass="org.noelware.charted.modules.logging.composites.MdcComposite"
    />

    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <if condition='isDefined("charted.console.json")'>
            <then>
                <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                    <layout class="org.noelware.charted.modules.logging.json.ClassicJsonLayout">
                        <if condition='isDefined("charted.console.json.pretty")'>
                            <then>
                                <prettyPrint>${charted.console.json.pretty}</prettyPrint>
                            </then>
                            <else>
                                <prettyPrint>false</prettyPrint>
                            </else>
                        </if>
                        <if condition='isDefined("charted.console.json.timezone")'>
                            <then>
                                <timezone>${charted.console.json.timezone}</timezone>
                            </then>
                            <else>
                                <timezone>UTC</timezone>
                            </else>
                        </if>

                        <if condition='isDefined("charted.console.json.timestamp-format")'>
                            <then>
                                <timestampFormat>${charted.console.json.timestamp-format}</timestampFormat>
                            </then>
                            <else>
                                <timestampFormat>yyyy-MM-dd'T'HH:mm:ssXXX</timestampFormat>
                            </else>
                        </if>
                    </layout>
                </encoder>
            </then>
            <else>
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <charset>utf-8</charset>
                    <pattern>
                        [%d{yyyy-MM-dd @ HH:mm:ss.SSS, +10}] %boldCyan([%-48threadName]) %logLevel([%5level]) [%-48logger{36}] %mdc :: %msg%n
                    </pattern>
                </encoder>
            </else>
        </if>
    </appender>

    <logger name="io.swagger.v3.core.converter.ModelConverterContextImpl" level="OFF" />
    <logger name="io.swagger.v3.core.jackson.ModelResolver" level="OFF" />
    <logger name="org.codehaus.janino" level="OFF" />
    <logger name="org.postgresql" level="INFO" />
    <if condition='isDefined("charted.appenders")'>
        <then>
            <if condition='property("charted.appenders").contains("sentry")'>
                <then>
                    <appender name="Sentry" class="io.sentry.logback.SentryAppender">
                        <options>
                            <dsn>${charted.sentry.dsn}</dsn>
                        </options>
                    </appender>
                </then>
            </if>

            <if condition='property("charted.appenders").contains("logstash")'>
                <then>
                    <appender name="Logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
                        <destination>${charted.logstash.endpoint}</destination>
                        <keepAliveDuration>5 minutes</keepAliveDuration>
                        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                            <providers>
                                <timestamp />
                                <message />
                                <loggerName />
                                <threadName />
                                <logLevel />
                                <callerData />
                                <stackTrace />
                                <contextName />
                                <mdc />
                                <tags />
                                <logstashMarkers />
                                <throwableClassName />
                                <throwableMessage />
                                <throwableRootCauseClassName />
                                <throwableRootCauseMessage />
                            </providers>
                            <customFields>{"product":"charted-server","vendor":"Noelware"}</customFields>
                        </encoder>
                    </appender>
                </then>
            </if>

            <if condition='isNull("charted.log.level")'>
                <then>
                    <if condition='property("charted.appenders").contains("sentry")'>
                        <then>
                            <root level="error">
                                <appender-ref ref="Sentry" />
                            </root>
                        </then>
                    </if>

                    <root level="info">
                        <appender-ref ref="Console" />
                        <if condition='property("charted.appenders").contains("logstash")'>
                            <then>
                                <appender-ref ref="Logstash" />
                            </then>
                        </if>
                    </root>
                </then>
                <else>
                    <if condition='property("charted.appenders").contains("sentry")'>
                        <then>
                            <root level="error">
                                <appender-ref ref="Sentry" />
                            </root>
                        </then>
                    </if>

                    <root level="${charted.log.level}">
                        <appender-ref ref="Console" />
                        <if condition='property("charted.appenders").contains("logstash")'>
                            <then>
                                <appender-ref ref="Logstash" />
                            </then>
                        </if>
                    </root>
                </else>
            </if>
        </then>
        <else>
            <if condition='isNull("charted.log.level")'>
                <then>
                    <root level="info">
                        <appender-ref ref="Console" />
                    </root>
                </then>
                <else>
                    <root level="${charted.log.level}">
                        <appender-ref ref="Console" />
                    </root>
                </else>
            </if>
        </else>
    </if>
</configuration>
