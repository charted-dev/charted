<?xml version="1.0" encoding="UTF-8" ?>
<!--
~ ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
~ Copyright 2022-2023 Noelware <team@noelware.org>
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~    http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<configuration debug="false" packagingData="true">
    <statusListener class="ch.qos.logback.core.status.NopStatusListener" />
    <conversionRule
        conversionWord="logLevel"
        converterClass="org.noelware.charted.modules.logging.composites.LogLevelComposite"
    />

    <conversionRule
        conversionWord="threadName"
        converterClass="org.noelware.charted.modules.logging.composites.ThreadNameComposite"
    />

    <conversionRule
        conversionWord="mdc"
        converterClass="org.noelware.charted.modules.logging.composites.MdcComposite"
    />

    <conversionRule
        conversionWord="basicGray"
        converterClass="org.noelware.charted.modules.logging.composites.BasicGrayColourComposite"
    />

    <!-- Disable these loggers (since it can get annoying & spammy) -->
    <logger name="io.swagger.v3.core.converter.ModelConverterContextImpl" level="OFF" />
    <logger name="io.swagger.v3.core.jackson.ModelResolver" level="OFF" />
    <logger name="org.codehaus.janino" level="OFF" />
    <logger name="org.postgresql" level="INFO" />

    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <if condition='isDefined("charted.console.json")'>
            <then>
                <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                    <layout class="org.noelware.charted.modules.logging.json.ClassicJsonLayout">
                        <if condition='isDefined("charted.console.json.pretty")'>
                            <then>
                                <prettyPrint>${charted.console.json.pretty}</prettyPrint>
                            </then>
                        </if>

                        <if condition='isDefined("charted.console.json.timezone")'>
                            <then>
                                <timezone>${charted.console.json.timezone}</timezone>
                            </then>
                        </if>

                        <if condition='isDefined("charted.console.json.timestamp-format")'>
                            <then>
                                <timestampFormat>${charted.console.json.timestamp-format}</timestampFormat>
                            </then>
                        </if>
                    </layout>
                </encoder>
            </then>
            <else>
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <charset>utf-8</charset>
                    <pattern>
                        %basicGray([%d{yyyy/MM/dd - HH:mm:ss.SSS, +10}]) %logLevel(%-5level) %basicGray([%cyan(%-56logger{48})) %threadName :: %mdc%msg%n
                    </pattern>
                </encoder>
            </else>
        </if>
    </appender>

    <if condition='isDefined("charted.appenders") &amp;&amp; property("charted.appenders").contains("sentry")'>
        <then>
            <appender name="Sentry" class="io.sentry.logback.SentryAppender">
                <options>
                    <dsn>${charted.sentry.dsn}</dsn>
                </options>
            </appender>
        </then>
    </if>

    <if condition='isDefined("charted.appenders") &amp;&amp; property("charted.appenders").contains("logstash")'>
        <then>
            <appender name="Logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
                <destination>${charted.logstash.endpoint}</destination>
                <keepAliveDuration>5 minutes</keepAliveDuration>
                <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
                    <providers>
                        <timestamp />
                        <message />
                        <loggerName />
                        <threadName />
                        <logLevel />
                        <callerData />
                        <stackTrace />
                        <contextName />
                        <mdc />
                        <tags />
                        <logstashMarkers />
                        <throwableClassName />
                        <throwableMessage />
                        <throwableRootCauseClassName />
                        <throwableRootCauseMessage />
                    </providers>
                    <customFields>{"product":"charted-server","vendor":"Noelware"}</customFields>
                </encoder>
            </appender>
        </then>
    </if>

    <root level="${charted.log.level:-INFO}">
        <appender-ref ref="Console" />
    </root>

    <if condition='isDefined("charted.appenders") &amp;&amp; property("charted.appenders").contains("logstash")'>
        <then>
            <root>
                <appender-ref ref="Logstash" />
            </root>
        </then>
    </if>

    <if condition='isDefined("charted.appenders") &amp;&amp; property("charted.appenders").contains("sentry")'>
        <then>
            <root>
                <appender-ref ref="Sentry" />
            </root>
        </then>
    </if>
</configuration>
