# üêª‚Äç‚ùÑÔ∏èüì¶ charted-server: Free, open source, and reliable Helm Chart registry made in Rust
# Copyright 2022-2023 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# web/ for bazel is disabled until we can figure out how to fix
# cyclic dependencies

load("@aspect_bazel_lib//lib:copy_to_bin.bzl", "copy_to_bin")
load("@npm//:defs.bzl", "npm_link_all_packages")
load("@npm//web:prettier/package_json.bzl", prettier = "bin")
load("@npm//web:vite/package_json.bzl", vite = "bin")
load("@npm//web:vue-tsc/package_json.bzl", vue_tsc = "bin")
# load("@npm//web:eslint/package_json.bzl", eslint = "bin")

npm_link_all_packages(name = "node_modules")

copy_to_bin(
    name = "types",
    srcs = glob([
        "**/*.d.ts",
    ]),
    visibility = ["//:__pkg__"],
)

SRCS = [
    "//web/src",
    "index.html",
    "package.json",
    "tsconfig.json",
    "tailwind.config.ts",
    "postcss.config.cjs",
    "vite.config.ts",
    "auto-imports.d.ts",
    "typed-router.d.ts",
] + [":node_modules/{dep}".format(dep = dep) for dep in [
    "@augu/tsconfig",
    "@fontsource/cantarell",
    "@fontsource/inter",
    "@fontsource/jetbrains-mono",
    "@formkit/vue",
    "@formkit/zod",
    "@iconify/vue",
    "@ncharts/types",
    "@noelware/utils",
    "@tailwindcss/forms",
    "@tailwindcss/typography",
    "@vitejs/plugin-vue",
    "@vitejs/plugin-vue-jsx",
    "@vue/compiler-sfc",
    "@vueuse/core",
    "@vueuse/head",
    "autoprefixer",
    "class-variance-authority",
    "clsx",
    "luxon",
    "markdown-it",
    "markdown-it-emoji",
    "markdown-it-shikiji",
    "ofetch",
    "pinia",
    "postcss",
    "postcss-import",
    "radix-vue",
    "shikiji",
    "tailwind-merge",
    "tailwindcss",
    "unplugin-auto-import",
    "unplugin-fluent-vue",
    "unplugin-vue-components",
    "unplugin-vue-router",
    "vue",
    "vue-router",
    "vite",
    "vite-plugin-vue-devtools",
    "vite-plugin-vue-layouts",
    "zod",
]]

vite.vite(
    name = "build",
    srcs = SRCS,
    args = ["build"],
    chdir = package_name(),
    env = {
        "BAZEL": "1",
    },
    out_dirs = ["dist"],
)

vue_tsc.vue_tsc_test(
    name = "typecheck",
    args = [
        "--noEmit",
        "--pretty",
    ],
    chdir = package_name(),
    data = SRCS + [
        ":node_modules/@types/node",
    ],
    include_declarations = True,
    tags = [
        "noclippy",
        "norustfmt",
    ],
)

# eslint.eslint_test(
#     name = "eslint",
#     args = [
#         "--ext .ts,.js,.tsx,.vue",
#         "--ignore-path",
#         ".eslintignore",
#         "-c",
#         ".eslintrc.js",
#         "--format=codeframe",
#         "src",
#     ],
#     chdir = package_name(),
#     data = SRCS + [
#         "tsconfig.eslint.json",
#         ":node_modules/@augu/eslint-config",
#         ":node_modules/@typescript-eslint/eslint-plugin",
#         ":node_modules/@typescript-eslint/parser",
#         ":node_modules/eslint-config-prettier",
#         ":node_modules/eslint-plugin-vue",
#         ":node_modules/vue-eslint-parser",
#     ],
# )

prettier.prettier_test(
    name = "prettier",
    args = [
        "--check",
        "--config",
        ".prettierrc.json",
        "**/*.{ts,js,vue,tsx,json,yaml,yml,html}",
    ],
    chdir = package_name(),
    data = SRCS + [
        ".prettierignore",
        ".prettierrc.json",
    ],
    tags = [
        "noclippy",
        "norustfmt",
    ],
)
