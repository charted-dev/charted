/* eslint-disable */
/*
 * üêª‚Äç‚ùÑÔ∏èüì¶ charted-server: Free, open source, and reliable Helm Chart registry made in Rust
 * Copyright 2022-2024 Noelware, LLC. <team@noelware.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file was generated by `bun generate:openapi` at 2024-01-23T03:12:06.183Z
// Do not make edits to this file as it won't reflect on the next `bun generate:openapi` invocation

export interface paths {
    '/': {
        /** @description Main entrypoint to charted-server. This is just a generic "hello world" response. */
        get: operations['main'];
    };
    '/features': {
        /** @description Retrieve this server's features. This is only for enabling or disabling features for API consumers. */
        get: operations['features'];
    };
    '/heartbeat': {
        /** @description Generic healthcheck endpoint */
        get: operations['heartbeat'];
    };
    '/index/{idOrName}': {
        /** @description Returns a index of a user or organization's Helm charts */
        get: operations['get_chart_index'];
    };
    '/info': {
        /** @description REST handler for getting more information about this instance that can be visible for API consumers. */
        get: operations['info'];
    };
    '/v1': {
        /** @description Main entrypoint to charted-server. This is just a generic "hello world" response. */
        get: operations['main'];
    };
    '/v1/features': {
        /** @description Retrieve this server's features. This is only for enabling or disabling features for API consumers. */
        get: operations['features'];
    };
    '/v1/heartbeat': {
        /** @description Generic healthcheck endpoint */
        get: operations['heartbeat'];
    };
    '/v1/index/{idOrName}': {
        /** @description Returns a index of a user or organization's Helm charts */
        get: operations['get_chart_index'];
    };
    '/v1/info': {
        /** @description REST handler for getting more information about this instance that can be visible for API consumers. */
        get: operations['info'];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        /**
         * @description A resource for personal-managed API tokens that is created by a User. This is useful
         * for command line tools or scripts that need to interact with charted-server, but
         * the main use-case is for the [Helm plugin](https://charts.noelware.org/docs/helm-plugin/current).
         */
        readonly ApiKey: {
            /** @description Short description about this API key. */
            readonly description?: string | null;
            readonly expires_in?: components['schemas']['DateTime'] | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id: number;
            /** @description The name of the API key. */
            readonly name: string;
            readonly owner: components['schemas']['User'];
            /**
             * Format: int64
             * @description The scopes that are attached to this API key resource.
             */
            readonly scopes: number;
            /**
             * @description The token itself. This is never revealed when querying, but only revealed
             * when you create the token.
             */
            readonly token?: string | null;
        };
        /** @description Represents the skeleton of a `Chart.yaml` file. */
        readonly Chart: {
            /**
             * @description Mapping of custom metadata that can be used for custom attributes.
             *
             * ### standardized for charted-server
             * * `charts.noelware.org/maintainers` ~ a comma-delimited list of all the maintainers
             * that are mapped by their `Name` or snowflake ID
             */
            readonly annotations?: {
                [key: string]: string;
            };
            readonly apiVersion: components['schemas']['ChartSpecVersion'];
            /**
             * @description Note that the appVersion field is not related to the version field. It is a way of specifying the version of the
             * application. For example, the drupal chart may have an appVersion: "8.2.1", indicating that the version of Drupal
             * included in the chart (by default) is 8.2.1. This field is informational, and has no impact on chart version calculations.
             *
             * Wrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string.
             * Leaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets 1.0 as a floating point value,
             * and a git commit SHA like 1234e10 as scientific notation.
             */
            readonly appVersion?: string | null;
            /**
             * @description In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies'
             * field in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined as a list
             * in the dependencies field.
             */
            readonly dependencies?: readonly components['schemas']['ChartDependency'][];
            /**
             * @description When managing charts in a Chart Repository, it is sometimes necessary to deprecate a chart. The optional deprecated field
             * in Chart.yaml can be used to mark a chart as deprecated. If the latest version of a chart in the repository is marked
             * as deprecated, then the chart as a whole is considered to be deprecated.
             *
             * The chart name can be later reused by publishing a newer version that is not marked as deprecated.
             */
            readonly deprecated?: boolean;
            /** @description A single-sentence description of this project */
            readonly description?: string | null;
            /** @description The URL of this project's homepage. */
            readonly home?: string | null;
            /** @description A URL or an SVG or PNG image to be used as an icon */
            readonly icon?: string | null;
            /**
             * @description A list of keywords about this project. These keywords can be searched
             * via the /search endpoint if it's enabled.
             */
            readonly keywords?: readonly string[];
            readonly kubeVersion?: components['schemas']['VersionReq'] | null;
            /** @description A list of name and URL/email address combinations for the maintainer(s) */
            readonly maintainers?: readonly components['schemas']['ChartMaintainer'][];
            /** @description The name of the chart. */
            readonly name: string;
            /** @description A list of URLs to the source code for this project */
            readonly sources?: readonly string[];
            readonly type?: components['schemas']['ChartType'];
            readonly version: components['schemas']['Version'];
        };
        /**
         * @description In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies'
         * field in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined
         * as a list in the dependencies field.
         */
        readonly ChartDependency: {
            /**
             * @description Alias that is used to identify a chart. Useful for pointing to the
             * same chart multiple times
             */
            readonly alias?: string | null;
            /**
             * @description YAML path that resolves to a boolean to enable or disable charts
             * dynamically.
             */
            readonly condition?: string | null;
            /**
             * @description [`ImportValues`][ImportValue] holds the mapping of source values to parent key to be imported.
             * Each item can be a string or pair of child/parent sublist items.
             */
            readonly 'import-values'?: readonly components['schemas']['StringOrImportValue'][];
            /** @description The name of the chart */
            readonly name: string;
            /**
             * @description Repository URL or alias that should be used to grab
             * the dependency from.
             */
            readonly repository?: string | null;
            /** @description List of tags that can be used to group charts to enable/disable together. */
            readonly tags?: readonly string[];
            readonly version?: components['schemas']['Version'] | null;
        };
        /** @description Schema skeleton for a `index.yml` file that represents a Chart index. */
        readonly ChartIndex: {
            /** @description API version for the `index.yaml` file. Will be a constant as `v1`. */
            readonly api_version: string;
            /** @description List of all possible entries for this user/organization. */
            readonly entries?: {
                [key: string]: readonly components['schemas']['ChartIndexSpec'][];
            };
            /**
             * Format: date-time
             * @description DateTime of when this `index.yaml` was last generated. In charted-server, this is relative on when a new chart release was last published.
             */
            readonly generated_at: string;
        };
        /** @description Represents the specification for a Chart.yaml-schema from a `index.yaml` reference. */
        readonly ChartIndexSpec: components['schemas']['Chart'] & {
            readonly created?: components['schemas']['DateTime'] | null;
            readonly digest?: string | null;
            readonly removed?: boolean;
            readonly urls?: readonly string[];
        };
        /**
         * @description Name and URL/email address combination as a maintainer. [ChartMaintainer::name] can be referenced
         * as a `NameOrSnowflake` union.
         */
        readonly ChartMaintainer: {
            /** @description The maintainer's email */
            readonly email?: string | null;
            /** @description The maintainer's name */
            readonly name: string;
            /** @description URL for the maintainer */
            readonly url?: string | null;
        };
        /**
         * @description The apiVersion field should be v2 for Helm charts that require at least Helm 3. Charts supporting previous Helm versions have an apiVersion set to v1 and are still installable by Helm 3.
         * @default v2
         * @enum {string}
         */
        readonly ChartSpecVersion: 'v1' | 'v2';
        /**
         * @description Represents what type this chart is. Do keep in mind that `operator` is not supported by Helm, but is specific to the API server. For serializing to valid Helm objects, `application` will be the replacement.
         * @default application
         * @enum {string}
         */
        readonly ChartType: 'application' | 'library' | 'operator';
        /**
         * Format: date-time
         * @description RFC3339-encoded string that represents the date time of an entity
         */
        readonly DateTime: string;
        /** @description Represents an error that could occur. */
        readonly Error: {
            readonly code: components['schemas']['ErrorCode'];
            /** @description Other details to send to the user to give even more context about this error. */
            readonly details?: unknown;
            /**
             * @description Humane message that is based off the contextual [error code][Error::code] to give
             * a brief description.
             */
            readonly message: string;
        };
        /**
         * @description Represents a error code that can happen.
         * @enum {string}
         */
        readonly ErrorCode:
            | 'INTERNAL_SERVER_ERROR'
            | 'REACHED_UNEXPECTED_EOF'
            | 'UNABLE_TO_PROCESS'
            | 'HANDLER_NOT_FOUND'
            | 'ENTITY_NOT_FOUND'
            | 'ENTITY_ALREADY_EXISTS'
            | 'VALIDATION_FAILED'
            | 'UNKNOWN_CDN_QUERY'
            | 'INVALID_CONTENT_TYPE'
            | 'SESSION_ONLY_ROUTE'
            | 'INVALID_HTTP_HEADER'
            | 'UNABLE_TO_DECODE_BASE64'
            | 'INVALID_UTF8'
            | 'INVALID_BODY'
            | 'MISSING_HEADER'
            | 'REGISTRATIONS_DISABLED'
            | 'MISSING_PASSWORD'
            | 'ACCESS_NOT_PERMITTED'
            | 'IO'
            | 'INVALID_JWT_CLAIM'
            | 'MISSING_AUTHORIZATION_HEADER'
            | 'INVALID_PASSWORD'
            | 'INVALID_AUTHENTICATION_TYPE'
            | 'INVALID_AUTHORIZATION_PARTS'
            | 'INVALID_SESSION_TOKEN'
            | 'SESSION_EXPIRED'
            | 'UNKNOWN_SESSION'
            | 'REFRESH_TOKEN_REQUIRED'
            | 'MAX_PER_PAGE_EXCEEDED'
            | 'UNABLE_TO_PARSE_PATH_PARAMETER'
            | 'MISSING_PATH_PARAMETER'
            | 'INVALID_JSON_PAYLOAD'
            | 'UNKNOWN_MULTIPART_FIELD'
            | 'INCOMPLETE_MULTIPART_FIELD_DATA'
            | 'READ_MULTIPART_HEADER_FAILED'
            | 'DECODE_MULTIPART_CONTENT_TYPE_FAILED'
            | 'MISSING_MULTIPART_BOUNDARY'
            | 'NO_MULTIPART_RECEIVED'
            | 'INCOMPLETE_MULTIPART_STREAM'
            | 'DECODE_MULTIPART_HEADER_NAME_FAILED'
            | 'STREAM_SIZE_EXCEEDED'
            | 'MULTIPART_FIELDS_SIZE_EXCEEDED'
            | 'MULTIPART_STREAM_READ_FAILED'
            | 'MISSING_MULTIPART_FIELD'
            | 'INVALID_MULTIPART_BOUNDARY';
        /**
         * @description ImportValues hold the mapping of source values to parent key to be imported. Each
         * item can be a child/parent sublist item or a string.
         */
        readonly ImportValue: {
            /** @description The source key of the values to be imported */
            readonly child: string;
            /** @description The destination path in the parent chart's values. */
            readonly parent: string;
        };
        /** @description Represents the response for the `GET /info` REST handler. */
        readonly InfoResponse: {
            /** @description Build date in RFC3339 format */
            readonly build_date: string;
            /** @description The commit hash from the Git repository. */
            readonly commit_sha: string;
            readonly distribution: components['schemas']['Distribution'];
            /** @description Product name. Will always be "charted-server" */
            readonly product: string;
            /** @description Vendor of charted-server, will always be "Noelware, LLC." */
            readonly vendor: string;
            /** @description Valid SemVer 2 of the current version of this instance */
            readonly version: string;
        };
        /** @description Response object for the `GET /` REST controller. */
        readonly MainResponse: {
            /** @description Documentation URL for this generic entrypoint response. */
            readonly docs: string;
            /** @description The message, which will always be "Hello, world!" */
            readonly message: string;
            /** @description You know, for Helm charts? */
            readonly tagline: string;
        };
        /**
         * @description Represents a resource that is correlated to a repository or organization member
         * that can control the repository's metadata.
         */
        readonly Member: {
            /**
             * @description Display name for this member. This should be formatted as '[{display_name}][Member::display_name] (@[{username}][User::username])' if this
             * is set, otherwise '@[{username}][User::username]' is used.
             */
            readonly display_name?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id: number;
            readonly joined_at: components['schemas']['DateTime'];
            /**
             * Format: int64
             * @description Bitfield value of this member's permissions.
             */
            readonly permissions: number;
            readonly updated_at: components['schemas']['DateTime'];
            readonly user: components['schemas']['User'];
        };
        /** @description A valid UTF-8 string that is used to identify a resource from the REST API in a humane fashion. This is meant to help identify a resource without trying to calculate the resource's Snowflake on the first try. */
        readonly Name: string;
        /** @description Represents a union enum that can hold a Snowflake and a Name, which is a String that is validated with the Name regex. */
        readonly NameOrSnowflake: number | string;
        /**
         * @description The ordering to use when querying paginated REST calls.
         * @enum {string}
         */
        readonly OrderBy: 'ASC' | 'DESC';
        /**
         * @description Represents a unified entity that can manage and own repositories outside
         * a User. Organizations to the server is used for business-related Helm charts
         * that aren't tied to a specific User.
         */
        readonly Organization: {
            readonly created_at: components['schemas']['DateTime'];
            /**
             * @description Display name for this organization. It should be formatted as '[{display_name}][Organization::display_name] (@[{name}][Organization::name])'
             * or '@[{name}][Organization::name]'.
             */
            readonly display_name?: string | null;
            /** @description Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar */
            readonly gravatar_email?: string | null;
            /** @description Unique hash to locate an organization's icon, this also includes the extension that this icon is, i.e, `png`. */
            readonly icon_hash?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id: number;
            /** @description The name for this organization. */
            readonly name: string;
            readonly owner: components['schemas']['User'];
            /** @description Whether this organization is private and only its member can access this resource. */
            readonly private?: boolean;
            /** @description Returns the twitter handle for this organization, if populated. */
            readonly twitter_handle?: string | null;
            readonly updated_at: components['schemas']['DateTime'];
            /** @description Whether if this Organization is a Verified Publisher or not. */
            readonly verified_publisher?: boolean;
        };
        /** @description Information about a [pagination][Pagination] page. */
        readonly PageInfo: {
            readonly cursor: components['schemas']['Snowflake'];
        };
        readonly PaginatedMember: {
            readonly data: readonly components['schemas']['Member'][];
            readonly page_info: components['schemas']['PageInfo'];
        };
        readonly PaginatedOrganization: {
            readonly data: readonly components['schemas']['Organization'][];
            readonly page_info: components['schemas']['PageInfo'];
        };
        readonly PaginatedRepository: {
            readonly data: readonly components['schemas']['Repository'][];
            readonly page_info: components['schemas']['PageInfo'];
        };
        readonly Repository: {
            readonly created_at: components['schemas']['DateTime'];
            /** @description Whether if this repository is deprecated or not */
            readonly deprecated?: boolean;
            /** @description Short description about this user, can be `null` if none was provided. */
            readonly description?: string | null;
            /** @description Unique hash to locate a repository's icon, this also includes the extension that this avatar is, i.e, `png`. */
            readonly icon_hash?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id: number;
            readonly name: components['schemas']['Name'];
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly owner: number;
            /** @description Whether if this repository is private or not */
            readonly private?: boolean;
            readonly type: components['schemas']['ChartType'];
            readonly updated_at: components['schemas']['DateTime'];
        };
        /**
         * @description Represents a resource that contains a release from a [Repository] release. Releases
         * are a way to group releases of new versions of Helm charts that can be easily
         * fetched from the API server.
         *
         * Any repository can have an unlimited amount of releases, but tags cannot clash
         * into each other, so the API server will not accept it. Each tag should be
         * a SemVer 2 comformant string, parsing is related to how Cargo evaluates SemVer 2 tags.
         */
        readonly RepositoryRelease: {
            readonly created_at: components['schemas']['DateTime'];
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id: number;
            /** @description Whether if this release is a pre-release or not. */
            readonly is_prerelease?: boolean;
            readonly tag: components['schemas']['Version'];
            /** @description Markdown-formatted string that contains a changelog of this release. */
            readonly update_text?: string | null;
            readonly updated_at: components['schemas']['DateTime'];
        };
        readonly Session: {
            /**
             * @description Access token. This will always be `null` if queried, but always will
             * be present if you successfully logged in.
             */
            readonly access_token?: string | null;
            /**
             * @description Refresh token. This will always be `null` if queried, but always will
             * be present if you successfully logged in.
             */
            readonly refresh_token?: string | null;
            /**
             * Format: uuid
             * @description UUID of the session.
             */
            readonly session: string;
            /**
             * Format: int64
             * @description ID of the user that created this session.
             */
            readonly user: number;
        };
        /**
         * Format: int64
         * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
         */
        readonly Snowflake: number;
        /**
         * @description Union enum that can contain a String or a [ImportValue] as the import source
         * for referencing parent key items to be imported.
         */
        readonly StringOrImportValue: string | components['schemas']['ImportValue'];
        /** @description Represents an account that can own [repositories][Repository] and [organizations][Organizations] */
        readonly User: {
            /** @description Whether if this User is an Administrator of this instance */
            readonly admin?: boolean;
            /** @description Unique hash to locate a user's avatar, this also includes the extension that this avatar is, i.e, `png`. */
            readonly avatar_hash?: string | null;
            readonly created_at: components['schemas']['DateTime'];
            /** @description Short description about this user, can be `null` if none was provided. */
            readonly description?: string | null;
            /** @description Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar */
            readonly gravatar_email?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id: number;
            /** @description A valid UTF-8 string that is used to identify a resource from the REST API in a humane fashion. This is meant to help identify a resource without trying to calculate the resource's Snowflake on the first try. */
            readonly name?: string;
            readonly updated_at: components['schemas']['DateTime'];
            readonly username: components['schemas']['Name'];
            /** @description Whether if this User is a Verified Publisher or not. */
            readonly verified_publisher?: boolean;
        };
        /**
         * @description Represents a collection of a user's connections that can be used
         * to login from different sources (like GitHub OAuth2)
         */
        readonly UserConnections: {
            readonly created_at: components['schemas']['DateTime'];
            /**
             * @description Account ID that was sourced from GitHub OAuth2. This can differ from
             * GitHub (https://github.com) and GitHub Enterprise usage.
             */
            readonly github_account_id?: string | null;
            /** @description Account ID that was sourced from Google OAuth2 */
            readonly google_account_id?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id: number;
            /**
             * Format: int64
             * @description Snowflake ID that was sourced from [Noelware's Accounts System](https://accounts.noelware.org)
             */
            readonly noelware_account_id?: number | null;
            readonly updated_at: components['schemas']['DateTime'];
        };
        /** @description Represents a semantic version (https://semver.org) that Helm and charted-server will only accept */
        readonly Version: string;
        /** @description Represents a semantic version (https://semver.org) requirement (i.e, `>=1.2.0`) that Helm and charted-server will only accept */
        readonly VersionReq: string;
    };
    responses: {
        /** @description API response that doesn't contain any data */
        readonly ApiErrorResponse: {
            content: {
                readonly 'application/json': {
                    /** @description List of errors on why the request failed. */
                    readonly errors: readonly components['schemas']['Error'][];
                    /** @description whether if this response [ApiErrorResponse] was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description API response that doesn't contain any data */
        readonly EmptyApiResponse: {
            content: {
                readonly 'application/json': {
                    /** @description whether if this response [EmptyApiResponse] was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for "InfoResponse" */
        readonly InfoResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['InfoResponse'];
                    /** @description whether if this response [InfoResponse] was successful or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for "MainResponse" */
        readonly MainResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['MainResponse'];
                    /** @description whether if this response [MainResponse] was successful or not */
                    readonly success: boolean;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /** @description Main entrypoint to charted-server. This is just a generic "hello world" response. */
    main: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['MainResponse'];
                };
            };
        };
    };
    /** @description Retrieve this server's features. This is only for enabling or disabling features for API consumers. */
    features: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['FeaturesResponse'];
                };
            };
        };
    };
    /** @description Generic healthcheck endpoint */
    heartbeat: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'text/plain': string;
                };
            };
        };
    };
    /** @description Returns a index of a user or organization's Helm charts */
    get_chart_index: {
        parameters: {
            path: {
                /** @description Path parameter that can take a `Name` or `Snowflake` identifier */
                idOrName: components['schemas']['NameOrSnowflake'];
            };
        };
        responses: {
            /** @description Chart index for a specific user or organization */
            200: {
                content: {
                    readonly 'text/yaml': components['responses']['ChartIndexResponse'];
                };
            };
            /** @description User or Organization was not found */
            404: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description REST handler for getting more information about this instance that can be visible for API consumers. */
    info: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['InfoResponse'];
                };
            };
        };
    };
}
