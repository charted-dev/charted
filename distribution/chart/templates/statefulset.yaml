# ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
# Copyright 2022-2023 Noelware <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if eq "filesystem" .Values.storage.driver }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "charted.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{ include "charted.labels" . | nindent 4 }}
  annotations: {{ include "charted.defaultAnnotations" . | nindent 4 }}
    {{- range $key, $val := .Values.global.annotations }}
    {{ $key }}: {{ $val | quote }}
    {{- end }}
spec:
  serviceName: {{ printf "%s-%s" (include "charted.fullname" .) "headless" }}
  replicas: {{ .Values.global.replicas }}
  selector:
    matchLabels: {{ include "charted.labels" . | nindent 6 }}
  template:
    metadata:
      labels: {{ include "charted.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "charted.serviceAccountName" . }}
      securityContext: {{ default (include "charted.defaultPodSecurityContext" .) .Values.global.podSecurityContext | nindent 8 }}
      volumes:
      - name: {{ .Values.config.mapName }}
        configMap:
          name: {{ printf "%s-%s" (include "charted.fullname" .) .Values.config.mapName }}
          defaultMode: 420
      - name: {{ .Values.config.logback.mapName }}
        configMap:
          name: {{ printf "%s-%s" (include "charted.fullname" .) .Values.config.logback.mapName }}
          defaultMode: 420
      {{- if .Values.storage.filesystem.persistence.enabled }}
      - name: {{ printf "%s-%s" (include "charted.fullname" .) "data" }}
        persistentVolumeClaim:
          claimName: {{ printf "%s-%s" (include "charted.fullname" .) .Values.storage.filesystem.persistence.claimName }}
      {{- end }}
      {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ include "charted.fullname" . }}
          image: {{ printf "%s:%s" .Values.image.repository (default .Chart.AppVersion .Values.image.tag) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext: {{ default (include "charted.defaultContainerSecurityContext" .) .Values.global.containerSecurityContext | nindent 12 }}
          resources:
            limits:
              cpu: 1500m
              memory: 2Gi
            requests:
              cpu: 10m
              memory: 200Mi
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /heartbeat
              port: {{ .Values.service.port }}
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /heartbeat
              port: {{ .Values.service.port }}
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: /heartbeat
              port: {{ .Values.service.port }}
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 5
          env:
          {{- with .Values.global.extraEnvVars }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
          - name: CHARTED_CONFIG_PATH
            value: {{ .Values.config.path }}
          - name: CHARTED_LOGBACK_CONFIG_PATH
            value: {{ .Values.config.logback.path }}
          - name: JWT_SECRET_KEY
            valueFrom:
              secretKeyRef:
                key: jwtSecretKey
                name: {{ printf "%s-%s" (include "charted.fullname" .) "jwt-secret" }}
          volumeMounts:
          - mountPath: {{ .Values.config.path }}
            name: {{ .Values.config.mapName }}
            readOnly: true
            subPath: charted.yaml
          - mountPath: {{ .Values.config.logback.path }}
            name: {{ .Values.config.logback.mapName }}
            readOnly: true
            subPath: logback.properties
{{- end }}
