/*
 * ðŸ“¦ charted-server: Free, open source, and reliable Helm Chart registry made in Kotlin.
 * Copyright 2022 Noelware <team@noelware.org>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.noelware.charted.gradle.Architecture
import org.noelware.charted.gradle.VERSION
import com.netflix.gradle.plugins.deb.Deb
import dev.floofy.utils.gradle.by

plugins {
    id("org.noelware.charted.distribution.deb")
    distribution
}

// So we can see the directories that would be generated by the `buildDebRepo` task.
val createRepoFiles by tasks.registering(Copy::class) {
    destinationDir = file("$buildDir/packaging")

    val distribution = (project(":server").extensions.getByName("distributions") as DistributionContainer).named("main").get()
    into("/etc/noelware/charted/server") {
        from(File(project(":server").projectDir, "bin")) {
            include("config/logback.properties")
            include("config/charted.yml")
            include("README.txt")
            include("LICENSE")
        }

        with(distribution.contents.include("**/*.jar"))
    }

    into("/etc/noelware/charted/server/bin") {
        from(File(project(":server").projectDir, "bin")) {
            include("charted-server")
        }
    }

    doLast {
        listOf(
            "/etc/noelware/charted/server",
            "/var/lib/noelware/charted/server/data",
            "/var/log/noelware/charted/server"
        ).forEach { pkg ->
            mkdir("$buildDir/packaging$pkg")
        }
    }
}

val buildDebRepo by tasks.registering(Deb::class) {
    dependsOn(createRepoFiles)

    val architecture = Architecture.current()

    packageName = "charted-server"
    setArch(if (architecture.isX64) "amd64" else "arm64")

    archiveFileName by "charted-server-$VERSION-${architecture.key}.deb"
    destinationDirectory.set(file("$buildDir/distributions"))
    archiveVersion by VERSION.toString()

//    setPreInstall(file("scripts/preinstall"))
//    setPostInstall(file("scripts/postinstall"))
//    setPreUninstall(file("scripts/preuninstall"))
//    setPreUninstall(file("scripts/postuninstall"))

    // /etc/noelware/charted/server will be the main directory where
    // the binary, libraries, and configuration will live in.
    into("/etc/noelware/charted/server") {
        into("bin") {
            from(File(project(":server").projectDir, "bin")) {
                include("bin/charted-server")
                fileMode = 644
            }
        }

        into("config") {
            from(File(project(":server").projectDir, "bin")) {
                include("config/charted.yml")
                include("config/logback.properties")
            }
        }

        val distribution = (project(":server").extensions.getByName("distributions") as DistributionContainer).named("main").get()
        into("lib") {
            with(distribution.contents.include("**/*.jar"))
        }

        from(File(project(":server").projectDir, "bin")) {
            include("README.txt")
            fileMode = 644
        }
    }

    into("/usr/share/doc/charted-server") {
        from("$projectDir/src/copyright")
        fileMode = 644
    }

    into("/usr/lib/systemd/system") {
        from(File(project(":server").projectDir, "bin")) {
            include("charted.service")
            fileMode = 644
        }
    }

    into("/var/lib/noelware/charted/server/data") {
        createDirectoryEntry = true
        includeEmptyDirs = true
        permissionGroup = "charted"
        dirMode = 2750
        user = "charted"

        include(file("/var/lib/noelware/charted/server/data").name)
    }

    into("/var/log/noelware/charted/server") {
        createDirectoryEntry = true
        includeEmptyDirs = true
        permissionGroup = "charted"
        dirMode = 2750
        user = "charted"

        include(file("/var/log/noelware/charted/server").name)
    }
}
