/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/': {
        /** @description Main entrypoint to charted-server. This is just a generic "hello world" response. */
        get: operations['main'];
    };
    '/apikeys': {
        get: operations['entrypoint'];
    };
    '/features': {
        /** @description Retrieve this server's features. This is only for enabling or disabling features for API consumers. */
        get: operations['features'];
    };
    '/heartbeat': {
        /** @description Generic healthcheck endpoint to use for Docker and Kubernetes usage. */
        get: operations['heartbeat'];
    };
    '/indexes/{idOrName}': {
        /** @description Returns a `ChartIndex` for a specific user or organization. */
        get: operations['get_index'];
    };
    '/info': {
        /** @description REST handler for getting more information about this instance that can be visible for API consumers. */
        get: operations['info'];
    };
    '/users': {
        /** @description Generic entrypoint route for the Users API. */
        get: operations['users'];
        /** @description Creates a new user if the server allows registrations. */
        put: operations['create_user'];
        /** @description Patches the current authenticated user's metadata. */
        patch: operations['patch_user'];
    };
    '/users/@me': {
        /** @description Returns a [User] from an authenticated request. */
        get: operations['get_self'];
    };
    '/users/@me/avatar': {
        /**
         * @description Returns the current authenticated user's current avatar. Use the [`GET /users/@me/avatar/{hash}.png`] REST handler
         *  to grab by a specific hash.
         *
         *  [`GET /users/@me/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/@me/avatar/{hash}.png
         */
        get: operations['get_my_current_avatar'];
        /** @description Uploads a user avatar. */
        post: operations['upload_user_avatar'];
    };
    '/users/@me/repositories': {
        /** @description Creates a [`Repository`] with the current authenticated user as the owner of the repository. */
        put: operations['create_user_repository'];
    };
    '/users/login': {
        /** @description Creates a new session and returns details about the newly created session. */
        post: operations['login'];
    };
    '/users/sessions/logout': {
        /** @description Attempts to destroy the current authenticated session. */
        delete: operations['logout'];
    };
    '/users/sessions/refresh-token': {
        post: operations['refresh_session_token'];
    };
    '/users/{idOrName}': {
        /** @description Retrieve a [`User`] object. */
        get: operations['get_user'];
    };
    '/users/{idOrName}/avatar': {
        /**
         * @description Returns the user's current avatar. Use the [`GET /users/{idOrName}/avatar/{hash}.png`] REST handler
         *  to grab by a specific hash.
         *
         *  [`GET /users/{idOrName}/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/{idOrName}/avatar/{hash}.png
         */
        get: operations['get_current_user_avatar'];
    };
    '/users/{idOrName}/repositories': {
        /** @description Retrieve a list of all a user's repositories. */
        get: operations['list_user_repositories'];
    };
}

export type webhooks = Record<string, never>;

export interface components {
    schemas: {
        /**
         * @description A resource for personal-managed API tokens that is created by a User. This is useful
         * for command line tools or scripts that need to interact with charted-server, but
         * the main use-case is for the [Helm plugin](https://charts.noelware.org/docs/helm-plugin/current).
         */
        readonly ApiKey: {
            /** @description Short description about this API key. */
            readonly description?: string | null;
            /**
             * Format: date-time
             * @description Date-time of when this API token expires in, `null` can be returned
             * if the token doesn't expire
             */
            readonly expires_in?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id?: number;
            /** @description The name of the API key. */
            readonly name: string;
            readonly owner: components['schemas']['User'];
            /**
             * Format: int64
             * @description The scopes that are attached to this API key resource.
             */
            readonly scopes: number;
            /**
             * @description The token itself. This is never revealed when querying, but only revealed
             * when you create the token.
             */
            readonly token?: string | null;
        };
        /** @description Represents the skeleton of a `Chart.yaml` file. */
        readonly Chart: {
            /**
             * @description Mapping of custom metadata that can be used for custom attributes.
             *
             * ### standardized for charted-server
             * * `charts.noelware.org/maintainers` ~ a comma-delimited list of all the maintainers
             * that are mapped by their `Name` or snowflake ID
             */
            readonly annotations?: {
                [key: string]: string;
            };
            readonly apiVersion: components['schemas']['ChartSpecVersion'];
            /**
             * @description Note that the appVersion field is not related to the version field. It is a way of specifying the version of the
             * application. For example, the drupal chart may have an appVersion: "8.2.1", indicating that the version of Drupal
             * included in the chart (by default) is 8.2.1. This field is informational, and has no impact on chart version calculations.
             *
             * Wrapping the version in quotes is highly recommended. It forces the YAML parser to treat the version number as a string.
             * Leaving it unquoted can lead to parsing issues in some cases. For example, YAML interprets 1.0 as a floating point value,
             * and a git commit SHA like 1234e10 as scientific notation.
             */
            readonly appVersion?: string | null;
            /**
             * @description In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies'
             * field in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined as a list
             * in the dependencies field.
             */
            readonly dependencies?: readonly components['schemas']['ChartDependency'][];
            /**
             * @description When managing charts in a Chart Repository, it is sometimes necessary to deprecate a chart. The optional deprecated field
             * in Chart.yaml can be used to mark a chart as deprecated. If the latest version of a chart in the repository is marked
             * as deprecated, then the chart as a whole is considered to be deprecated.
             *
             * The chart name can be later reused by publishing a newer version that is not marked as deprecated.
             */
            readonly deprecated?: boolean;
            /** @description A single-sentence description of this project */
            readonly description?: string | null;
            /** @description The URL of this project's homepage. */
            readonly home?: string | null;
            /** @description A URL or an SVG or PNG image to be used as an icon */
            readonly icon?: string | null;
            /**
             * @description A list of keywords about this project. These keywords can be searched
             * via the /search endpoint if it's enabled.
             */
            readonly keywords?: readonly string[];
            readonly kubeVersion?: components['schemas']['VersionReq'] | null;
            /** @description A list of name and URL/email address combinations for the maintainer(s) */
            readonly maintainers?: readonly components['schemas']['ChartMaintainer'][];
            /** @description The name of the chart. */
            readonly name: string;
            /** @description A list of URLs to the source code for this project */
            readonly sources?: readonly string[];
            readonly type?: components['schemas']['ChartType'];
            readonly version: components['schemas']['Version'];
        };
        /**
         * @description In Helm, one chart may depend on any number of other charts. These dependencies can be dynamically linked using the dependencies'
         * field in Chart.yaml or brought in to the charts/ directory and managed manually. The charts required by the current chart are defined
         * as a list in the dependencies field.
         */
        readonly ChartDependency: {
            /**
             * @description Alias that is used to identify a chart. Useful for pointing to the
             * same chart multiple times
             */
            readonly alias?: string | null;
            /**
             * @description YAML path that resolves to a boolean to enable or disable charts
             * dynamically.
             */
            readonly condition?: string | null;
            /**
             * @description [`ImportValues`][ImportValue] holds the mapping of source values to parent key to be imported.
             * Each item can be a string or pair of child/parent sublist items.
             */
            readonly 'import-values'?: readonly components['schemas']['StringOrImportValue'][];
            /** @description The name of the chart */
            readonly name: string;
            /**
             * @description Repository URL or alias that should be used to grab
             * the dependency from.
             */
            readonly repository?: string | null;
            /** @description List of tags that can be used to group charts to enable/disable together. */
            readonly tags?: readonly string[];
            readonly version?: components['schemas']['Version'] | null;
        };
        /** @description Represents the specification for a Chart.yaml-schema from a `index.yaml` reference. */
        readonly ChartIndexSpec: components['schemas']['Chart'] & {
            /** Format: date-time */
            readonly created?: string | null;
            readonly digest?: string | null;
            readonly removed?: boolean;
            readonly urls?: readonly string[];
        };
        /**
         * @description Name and URL/email address combination as a maintainer. [ChartMaintainer::name] can be referenced
         * as a `NameOrSnowflake` union.
         */
        readonly ChartMaintainer: {
            /** @description The maintainer's email */
            readonly email?: string | null;
            /** @description The maintainer's name */
            readonly name: string;
            /** @description URL for the maintainer */
            readonly url?: string | null;
        };
        /**
         * @description The apiVersion field should be v2 for Helm charts that require at least Helm 3. Charts supporting previous Helm versions have an apiVersion set to v1 and are still installable by Helm 3.
         * @default v2
         * @enum {string}
         */
        readonly ChartSpecVersion: 'v1' | 'v2';
        /**
         * @description Represents what type this chart is. Do keep in mind that `operator` is not supported by Helm, but is specific to the API server. For serializing to valid Helm objects, `application` will be the replacement.
         * @default application
         * @enum {string}
         */
        readonly ChartType: 'application' | 'library' | 'operator';
        /**
         * @description Represents the distribution that this instance is running off from.
         * @default unknown
         * @enum {string}
         */
        readonly Distribution: 'kubernetes' | 'docker' | 'rpm' | 'deb' | 'git' | 'unknown';
        /** @description Generic entrypoint message for any API routes like `/users`. */
        readonly EntrypointResponse: {
            /**
             * @description URL to the documentation to where you can explore more routes for
             * this specific API.
             */
            readonly docs: string;
            /** @description A cute message to greet you with */
            readonly message: string;
        };
        readonly Error: {
            /**
             * @description A code that can be looked up on why a request failed. You can view
             * all available codes in [the documentation](https://charts.noelware.org/docs/server/latest/api#errors).
             */
            readonly code: string;
            /** @description Any JSON value on any details that might help you on why it failed. */
            readonly details?: Record<string, unknown> | null;
            /** @description Detailed message on why this request failed. */
            readonly message: string;
        };
        /** @description Represents the response from the `GET /features` REST handler */
        readonly FeaturesResponse: {
            /** @description Whether if the Audit Logging feature is enabled or not. */
            readonly audit_logs: boolean;
            /** @description Whether if the external OCI registry experimental feature or the home-made implementation registry feature is enabled or not. */
            readonly docker_registry: boolean;
            /** @description Object of all the session integrations available. */
            readonly integrations: {
                [key: string]: boolean;
            };
            /**
             * @deprecated
             * @description Whether if this server instance is invite-only.
             */
            readonly is_invite_only: boolean;
            /** @description Whether if registrations are enabled on the server */
            readonly registrations: boolean;
            /** @description Whether if the server has search capabilities with the Elasticsearch or Meilisearch backend */
            readonly search: boolean;
            /** @description Whether if the Webhooks feature is enabled or not. */
            readonly webhooks: boolean;
        };
        /**
         * @description ImportValues hold the mapping of source values to parent key to be imported. Each
         * item can be a child/parent sublist item or a string.
         */
        readonly ImportValue: {
            /** @description The source key of the values to be imported */
            readonly child: string;
            /** @description The destination path in the parent chart's values. */
            readonly parent: string;
        };
        /** @description Represents the response for the `GET /info` REST handler. */
        readonly InfoResponse: {
            /** @description Build date in RFC3339 format */
            readonly build_date: string;
            /** @description The commit hash from the Git repository. */
            readonly commit_sha: string;
            readonly distribution: components['schemas']['Distribution'];
            /** @description Product name. Will always be "charted-server" */
            readonly product: string;
            /** @description Vendor of charted-server, will always be "Noelware" */
            readonly vendor: string;
            /** @description Valid SemVer 2 of the current version of this instance */
            readonly version: string;
        };
        /** @description Response object for the `GET /` REST controller. */
        readonly MainResponse: {
            /** @description Documentation URL for this generic entrypoint response. */
            readonly docs: string;
            /** @description The message, which will always be "Hello, world!" */
            readonly message: string;
            /** @description You know, for Helm charts? */
            readonly tagline: string;
        };
        /**
         * @description Represents a resource that is correlated to a repository or organization member
         * that can control the repository's metadata.
         */
        readonly Member: {
            /**
             * @description Display name for this member. This should be formatted as '[{display_name}][Member::display_name] (@[{username}][User::username])' if this
             * is set, otherwise '@[{username}][User::username]' is used.
             */
            readonly display_name?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id?: number;
            /**
             * Format: date-time
             * @description Date-time of when this member resource was created by the API server.
             */
            readonly joined_at: string;
            /**
             * Format: int64
             * @description Bitfield value of this member's permissions.
             */
            readonly permissions: number;
            /**
             * Format: date-time
             * @description Date-time of when this member resource was last updated by the API server.
             */
            readonly updated_at: string;
            readonly user: components['schemas']['User'];
        };
        /** @description A valid UTF-8 string that is used to identify a resource from the REST API in a humane fashion. This is meant to help identify a resource without trying to calculate the resource's Snowflake on the first try. */
        readonly Name: string;
        /** @description Represents a union enum that can hold a Snowflake and a Name, which is a String that is validated with the Name regex. */
        readonly NameOrSnowflake: number | string;
        /**
         * @description The ordering to use when querying paginated REST calls.
         * @enum {string}
         */
        readonly OrderBy: 'ASC' | 'DESC';
        /**
         * @description Represents a unified entity that can manage and own repositories outside
         * a User. Organizations to the server is used for business-related Helm charts
         * that aren't tied to a specific User.
         */
        readonly Organization: {
            /**
             * Format: date-time
             * @description Date of when this organization was registered to this instance
             */
            readonly created_at: string;
            /**
             * @description Display name for this organization. It should be formatted as '[{display_name}][Organization::display_name] (@[{name}][Organization::name])'
             * or '@[{name}][Organization::name]'.
             */
            readonly display_name?: string | null;
            /** @description Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar */
            readonly gravatar_email?: string | null;
            /** @description Unique hash to locate an organization's icon, this also includes the extension that this icon is, i.e, `png`. */
            readonly icon_hash?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id?: number;
            /** @description The name for this organization. */
            readonly name: string;
            readonly owner: components['schemas']['User'];
            /** @description Whether this organization is private and only its member can access this resource. */
            readonly private?: boolean;
            /** @description Returns the twitter handle for this organization, if populated. */
            readonly twitter_handle?: string | null;
            /**
             * Format: date-time
             * @description Date of when the server has last updated this organization
             */
            readonly updated_at: string;
            /** @description Whether if this Organization is a Verified Publisher or not. */
            readonly verified_publisher?: boolean;
        };
        /** @description Information about a [pagination][Pagination] page. */
        readonly PageInfo: {
            readonly cursor: components['schemas']['Snowflake'];
        };
        readonly PaginatedOrganization: {
            readonly data: readonly components['schemas']['Organization'][];
            readonly page_info: components['schemas']['PageInfo'];
        };
        readonly PaginatedOrganizationMember: {
            readonly data: readonly components['schemas']['OrganizationMember'][];
            readonly page_info: components['schemas']['PageInfo'];
        };
        readonly PaginatedRepository: {
            readonly data: readonly components['schemas']['Repository'][];
            readonly page_info: components['schemas']['PageInfo'];
        };
        readonly PaginatedRepositoryMember: {
            readonly data: readonly components['schemas']['RepositoryMember'][];
            readonly page_info: components['schemas']['PageInfo'];
        };
        readonly Repository: {
            /**
             * Format: date-time
             * @description Date of when this repository was registered to this instance
             */
            readonly created_at: string;
            /** @description Whether if this repository is deprecated or not */
            readonly deprecated?: boolean;
            /** @description Short description about this user, can be `null` if none was provided. */
            readonly description?: string | null;
            /** @description Unique hash to locate a repository's icon, this also includes the extension that this avatar is, i.e, `png`. */
            readonly icon_hash?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id?: number;
            readonly name: components['schemas']['Name'];
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly owner?: number;
            /** @description Whether if this repository is private or not */
            readonly private?: boolean;
            readonly type: components['schemas']['ChartType'];
            /**
             * Format: date-time
             * @description Date of when the server has last updated this repository
             */
            readonly updated_at: string;
        };
        /**
         * @description Represents a resource that contains a release from a [Repository] release. Releases
         * are a way to group releases of new versions of Helm charts that can be easily
         * fetched from the API server.
         *
         * Any repository can have an unlimited amount of releases, but tags cannot clash
         * into each other, so the API server will not accept it. Each tag should be
         * a SemVer 2 comformant string, parsing is related to how Cargo evaluates SemVer 2 tags.
         */
        readonly RepositoryRelease: {
            /**
             * Format: date-time
             * @description Date of when this release was registered to this instance
             */
            readonly created_at: string;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id?: number;
            /** @description Whether if this release is a pre-release or not. */
            readonly is_prerelease?: boolean;
            readonly tag: components['schemas']['Version'];
            /** @description Markdown-formatted string that contains a changelog of this release. */
            readonly update_test?: string | null;
            /**
             * Format: date-time
             * @description Date of when the server has last updated this repository release
             */
            readonly updated_at: string;
        };
        readonly Session: {
            /**
             * @description Access token. This will always be `null` if queried, but always will
             * be present if you successfully logged in.
             */
            readonly access_token?: string | null;
            /**
             * @description Refresh token. This will always be `null` if queried, but always will
             * be present if you successfully logged in.
             */
            readonly refresh_token?: string | null;
            /**
             * Format: uuid
             * @description UUID of the session.
             */
            readonly session_id: string;
            /**
             * Format: int64
             * @description ID of the user that created this session.
             */
            readonly user_id: number;
        };
        /**
         * Format: int64
         * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
         */
        readonly Snowflake: number;
        /**
         * @description Union enum that can contain a String or a [ImportValue] as the import source
         * for referencing parent key items to be imported.
         */
        readonly StringOrImportValue: string | components['schemas']['ImportValue'];
        /** @description Represents an account that can own [repositories][Repository] and [organizations][Organizations] */
        readonly User: {
            /** @description Whether if this User is an Administrator of this instance */
            readonly admin?: boolean;
            /** @description Unique hash to locate a user's avatar, this also includes the extension that this avatar is, i.e, `png`. */
            readonly avatar_hash?: string | null;
            /**
             * Format: date-time
             * @description Date of when this user was registered to this instance
             */
            readonly created_at: string;
            /** @description Short description about this user, can be `null` if none was provided. */
            readonly description?: string | null;
            /** @description Valid email address that points to a Gravatar avatar, or `null` if it shouldn't use one as the primary avatar */
            readonly gravatar_email?: string | null;
            /**
             * Format: int64
             * @description Unique identifier for a resource. Based off the [Twitter Snowflake](https://blog.twitter.com/engineering/en_us/a/2010/announcing-snowflake) spec.
             */
            readonly id?: number;
            /** @description A valid UTF-8 string that is used to identify a resource from the REST API in a humane fashion. This is meant to help identify a resource without trying to calculate the resource's Snowflake on the first try. */
            readonly name?: string;
            /**
             * Format: date-time
             * @description Date of when the server has last updated this user
             */
            readonly updated_at: string;
            readonly username: components['schemas']['Name'];
            /** @description Whether if this User is a Verified Publisher or not. */
            readonly verified_publisher?: boolean;
        };
    };
    responses: {
        /** @description Response object for ChartIndexResponse */
        readonly ApiChartIndexResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['ChartIndex'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Empty response object */
        readonly ApiEmptyResponse: {
            content: {
                readonly 'application/json': {
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for EntrypointResponse */
        readonly ApiEntrypointResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['EntrypointResponse'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response of when something went wrong. Used in all non 200 status codes. */
        readonly ApiErrorResponse: {
            content: {
                readonly 'application/json': {
                    /** @description List of errors on why the request failed. */
                    readonly errors: readonly components['schemas']['Error'][];
                    /** @description Whether if the request succeeded. This will always be `false` */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for FeaturesResponse */
        readonly ApiFeaturesResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['FeaturesResponse'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for InfoResponse */
        readonly ApiInfoResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['InfoResponse'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for MainResponse */
        readonly ApiMainResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['MainResponse'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for OrganizationMemberPaginatedResponse */
        readonly ApiOrganizationMemberPaginatedResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['ApiPaginatedOrganizationMember'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for OrganizationPaginatedResponse */
        readonly ApiOrganizationPaginatedResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['ApiPaginatedOrganization'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for RepositoryMemberPaginatedResponse */
        readonly ApiRepositoryMemberPaginatedResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['ApiPaginatedRepositoryMember'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for RepositoryPaginatedResponse */
        readonly ApiRepositoryPaginatedResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['ApiPaginatedRepository'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for SessionResponse */
        readonly ApiSessionResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['Session'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
        /** @description Response object for UserResponse */
        readonly ApiUserResponse: {
            content: {
                readonly 'application/json': {
                    readonly data: components['schemas']['User'];
                    /** @description Indicates whether if this response was a success or not */
                    readonly success: boolean;
                };
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
    /** @description Main entrypoint to charted-server. This is just a generic "hello world" response. */
    main: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiMainResponse'];
                };
            };
        };
    };
    entrypoint: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiEntrypointResponse'];
                };
            };
        };
    };
    /** @description Retrieve this server's features. This is only for enabling or disabling features for API consumers. */
    features: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiFeaturesResponse'];
                };
            };
        };
    };
    /** @description Generic healthcheck endpoint to use for Docker and Kubernetes usage. */
    heartbeat: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'text/plain': string;
                };
            };
        };
    };
    /** @description Returns a `ChartIndex` for a specific user or organization. */
    get_index: {
        parameters: {
            path: {
                /** @description Path parameter that can take a [`Name`] or [`Snowflake`] identifier. */
                idOrName: components['schemas']['NameOrSnowflake'];
            };
        };
        responses: {
            /** @description Helm index for the user or organization */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiChartIndexResponse'];
                };
            };
            /** @description User or Organization was not found */
            404: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description REST handler for getting more information about this instance that can be visible for API consumers. */
    info: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiInfoResponse'];
                };
            };
        };
    };
    /** @description Generic entrypoint route for the Users API. */
    users: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiEntrypointResponse'];
                };
            };
        };
    };
    /** @description Creates a new user if the server allows registrations. */
    create_user: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiUserResponse'];
                };
            };
            /** @description Whether if this server doesn't allow registrations */
            403: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description If the `username` or `email` was taken. */
            406: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Patches the current authenticated user's metadata. */
    patch_user: {
        responses: {
            /** @description Successful response */
            204: {
                content: {
                    readonly 'application/json': components['responses']['ApiEmptyResponse'];
                };
            };
            /** @description If the request body was invalid (i.e, validation errors) */
            400: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description If the session couldn't be validated */
            401: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description (Bearer token only) - if the JWT was invalid. */
            403: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description If the request body contained invalid data, or if the session header contained invalid data */
            406: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Returns a [User] from an authenticated request. */
    get_self: {
        responses: {
            /** @description Returns the current authenticated user's metadata */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiUserResponse'];
                };
            };
            /** @description If the request body was invalid (i.e, validation errors) */
            400: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description If the session couldn't be validated */
            401: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description (Bearer token only) - if the JWT was invalid. */
            403: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description If the request body contained invalid data, or if the session header contained invalid data */
            406: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /**
     * @description Returns the current authenticated user's current avatar. Use the [`GET /users/@me/avatar/{hash}.png`] REST handler
     *  to grab by a specific hash.
     *
     *  [`GET /users/@me/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/@me/avatar/{hash}.png
     */
    get_my_current_avatar: {
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'image/*': string;
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Uploads a user avatar. */
    upload_user_avatar: {
        responses: {
            /** @description Successful response */
            201: {
                content: {
                    readonly 'application/json': components['responses']['ApiEmptyResponse'];
                };
            };
            /** @description Bad Request */
            400: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Not Acceptable */
            406: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Creates a [`Repository`] with the current authenticated user as the owner of the repository. */
    create_user_repository: {
        responses: {
            /** @description Repository created */
            201: {
                content: {
                    readonly 'application/json': components['responses']['ApiRepositoryResponse'];
                };
            };
            /** @description Bad Request */
            400: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Conflict: repository with that name already exists on the user's account */
            409: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Creates a new session and returns details about the newly created session. */
    login: {
        responses: {
            /** @description Successful response */
            201: {
                content: {
                    readonly 'application/json': components['responses']['ApiSessionResponse'];
                };
            };
            /** @description Invalid payload received. */
            400: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Invalid password received */
            403: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Unknown User */
            404: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Attempts to destroy the current authenticated session. */
    logout: {
        responses: {
            /** @description Session was deleted successfully */
            201: {
                content: {
                    readonly 'application/json': components['responses']['ApiEmptyResponse'];
                };
            };
            /** @description If the authenticated user didn't provide a session token */
            403: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    refresh_session_token: {
        responses: {
            /** @description Session was fully restored with a new one */
            201: {
                content: {
                    readonly 'application/json': components['responses']['ApiSessionResponse'];
                };
            };
            /** @description If the authenticated user didn't provide a refresh token */
            403: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Retrieve a [`User`] object. */
    get_user: {
        parameters: {
            path: {
                /** @description Path parameter that can take a [`Name`] or [`Snowflake`] identifier. */
                idOrName: components['schemas']['NameOrSnowflake'];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiUserResponse'];
                };
            };
            /** @description Invalid `idOrName` specified */
            400: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
            /** @description Unknown User */
            404: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /**
     * @description Returns the user's current avatar. Use the [`GET /users/{idOrName}/avatar/{hash}.png`] REST handler
     *  to grab by a specific hash.
     *
     *  [`GET /users/{idOrName}/avatar/{hash}.png`]: https://charts.noelware.org/docs/server/latest/api/reference/users#GET-/users/{idOrName}/avatar/{hash}.png
     */
    get_current_user_avatar: {
        parameters: {
            path: {
                /** @description Path parameter that can take a [`Name`] or [`Snowflake`] identifier. */
                idOrName: components['schemas']['NameOrSnowflake'];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                content: {
                    readonly 'image/*': string;
                };
            };
            /** @description Internal Server Error */
            500: {
                content: {
                    readonly 'application/json': components['responses']['ApiErrorResponse'];
                };
            };
        };
    };
    /** @description Retrieve a list of all a user's repositories. */
    list_user_repositories: {
        parameters: {
            query?: {
                /** @description Cursor to passthrough to proceed into the next or previous page. */
                cursor?: number;
                /** @description How many elements should be present in a page. */
                per_page?: number;
                /** @description Order to sort the entries by. */
                order?: components['schemas']['OrderBy'];
            };
            path: {
                /** @description Path parameter that can take a [`Name`] or [`Snowflake`] identifier. */
                idOrName: components['schemas']['NameOrSnowflake'];
            };
        };
        responses: {
            /** @description List of all the user's repositories */
            200: {
                content: {
                    readonly 'application/json': components['responses']['ApiRepositoryPaginatedResponse'];
                };
            };
        };
    };
}
