# üêª‚Äç‚ùÑÔ∏èüì¶ charted-server: Free, open source, and reliable Helm Chart registry made in Rust
# Copyright 2022-2023 Noelware, LLC. <team@noelware.org>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_rust//crate_universe:defs.bzl", "crate", "crates_vendor")
load("//:build/manifests.bzl", "CARGO_MANIFESTS")

crates_vendor(
    name = "crate_index",
    annotations = {
        # for NixOS / Nix users (like @auguwu and @spotlightishere at Noelware), it is important
        # that we make sure Bazel includes the @openssl-static repository as it is the OpenSSL static
        # library for Noel and Spotlight to compile the code on our systems.
        #
        # This is useful if `charted-server` is ever on Nixpkgs, maybe...
        "curl-sys": [
            crate.annotation(
                build_script_data = [
                    {
                        "@org_noelware_charted_server//build/settings:nixos": "@openssl-static//:include",
                    },
                ],
                build_script_env = {
                    "DEP_OPENSSL_INCLUDE": {
                        "@org_noelware_charted_server//build/settings:nixos": "../openssl-static/include",
                    },
                },
            ),
        ],
        # "openssl-sys": [
        #     crate.annotation(
        #         build_script_data = [
        #             {
        #                 "@org_noelware_charted_server//build/settings:nixos": "@openssl-static//:lib",
        #             },
        #             {
        #                 "@org_noelware_charted_server//build/settings:nixos": "@openssl-static//:include",
        #             },
        #         ],
        #         build_script_env = {
        #             "OPENSSL_INCLUDE_DIR": {
        #                 "@org_noelware_charted_server//build/settings:nixos": "../openssl-static/include",
        #             },
        #             "OPENSSL_LIB_DIR": {
        #                 "@org_noelware_charted_server//build/settings:nixos": "../openssl-static/lib",
        #             },
        #             "OPENSSL_STATIC": {
        #                 "@org_noelware_charted_server//build/settings:nixos": "1",
        #             },
        #         },
        #         data = [
        #             {
        #                 "@org_noelware_charted_server//build/settings:nixos": "@openssl-static//:lib",
        #             },
        #             {
        #                 "@org_noelware_charted_server//build/settings:nixos": "@openssl-static//:include",
        #             },
        #         ],
        #         rustc_flags = [
        #             {
        #                 "@org_noelware_charted_server//build/settings:nixos": "-Lexternal/openssl-static/lib",
        #             },
        #         ],
        #     ),
        # ],
    },

    # TODO(@auguwu): currently broken with:
    #
    # ~> Error: unknown field `generate_target_compatible_with`, expected one of `generate_binaries`, `generate_build_scripts`, `annotations`, `rendering`, `cargo_config`, `supported_platform_triples` at line 6 column 37
    #
    # cargo_bazel = select({
    #     "//build/settings:nixos": "@nix-cargo-bazel//:bin/cargo-bazel",
    #     "//conditions:default": "@cargo_bazel_bootstrap//:binary",
    # }),
    cargo_config = "//:.cargo/config.toml",
    cargo_lockfile = "//:Cargo.lock",

    # we only want to target what we support so far:
    # * Linux x86_64, ARM64
    # * macOS x86_64, ARM64
    # * Windows x86_64
    generate_target_compatible_with = False,
    manifests = CARGO_MANIFESTS,
    mode = "remote",

    # this should be synced with rust-toolchain.toml
    supported_platform_triples = [
        "aarch64-apple-darwin",
        "x86_64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-unknown-linux-gnu",
        "x86_64-pc-windows-msvc",
    ],
    tags = ["manual"],
    vendor_path = "crates",
)
